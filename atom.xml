<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hack hack hack...]]></title>
  <link href="http://adamjonas.com/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2016-04-06T14:18:07-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Investing without the anger]]></title>
    <link href="http://adamjonas.com/blog/investing-without-the-anger/"/>
    <updated>2016-04-01T12:45:00-04:00</updated>
    <id>http://adamjonas.com/blog/investing-without-the-anger</id>
    <content type="html"><![CDATA[<p>I need to write about this subject. How can I be passionate and invest so much of myself in my work, but not then handle failure better? How can I bleed my work but be less aggressive? How do athletes, CEO, politicians handle this? Lots more to write about here&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java basics]]></title>
    <link href="http://adamjonas.com/blog/java-basics/"/>
    <updated>2016-03-23T13:49:00-04:00</updated>
    <id>http://adamjonas.com/blog/java-basics</id>
    <content type="html"><![CDATA[<h2>Some basics</h2>

<ul>
<li>Here&#8217;s a basic method signature <code>public static void main(String args[])</code></li>
<li>The void keyword allows us to create methods which do not return a value. Otherwise in java you need to specific what type the return value must be.</li>
<li><p><code>public</code> is a Java keyword which declares a member&#8217;s access as public. Public members are visible to all other classes. This means that any other class can access a public field or method. Further, other classes can modify public fields unless the field is declared as final.</p>

<ul>
<li>A best practice is to give fields <code>private</code> access and reserve <code>public</code> access to only the set of methods and <code>final</code> fields that define the class&#8217; public constants. This helps with encapsulation and information hiding, since it allows you to change the implementation of a class without affecting the consumers who use only the public API of the class.</li>
</ul>
</li>
<li><p>In Java, you need to have a method named <code>main()</code> in at least one class. This method must appear within a class, but it can be any class.</p></li>
<li><p>ints don&#8217;t evaluate to <code>true</code></p></li>
</ul>


<h2><a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html">interfaces</a></h2>

<ul>
<li>An interface declaration consists of modifiers, the keyword interface, the interface name, a comma-separated list of parent interfaces (if any), and the interface body.</li>
<li><a href="https://en.wikipedia.org/wiki/Interface-based_programming">Interface programming</a> is an architectural pattern for implementing modular programming at the component level in an object-oriented programming language which does not have a module system.</li>
<li><p>Implementing an interface allows a class to become more formal about the behavior it promises to provide. Interfaces form a contract between the class and the outside world, and this contract is enforced at build time by the compiler. If your class claims to implement an interface, all methods defined by that interface must appear in its source code before the class will successfully compile.</p></li>
<li><p><strong>inheritance</strong></p>

<ul>
<li>A java class cannot extend more than one class at a time so it won&#8217;t provide support for multiple inheritance in classes, but it can extend more than one interface at a time so we java can support multiple inheritances with regard to interfaces.</li>
</ul>
</li>
</ul>


<h2>HAS-A relationship</h2>

<ul>
<li>HAS-A means an instance of one class &#8220;has a&#8221; reference to an instance of another class or another instance of same class.</li>
<li>It is also known as &#8220;composition&#8221; or &#8220;aggregation&#8221;.</li>
<li>There is no specific keyword to implement HAS-A relationship but mostly we are depended upon &#8220;new&#8221; keyword.</li>
<li>Composition:

<ul>
<li>Without existence of container object, if there is no chance of existence of contained objects then container and contained objects are said to be strongly associated and this strong association is known as composition.</li>
<li>Eg: A &#8220;university&#8221; has several &#8220;departments&#8221;. Without existence of &#8220;university&#8221; there is no chance for the &#8220;departments&#8221; to exist. Hence &#8220;university&#8221; and &#8220;departments&#8221; are strongly associated and this strong association is known as composition.</li>
</ul>
</li>
</ul>


<h2>IS-A Relationship:</h2>

<ul>
<li>This refers to inheritance or implementation.</li>
<li>Expressed using keyword &#8220;extends&#8221;.</li>
<li>Main advantage is code reusability.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four - Observer and Mediator Pattern]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-observer-and-mediator-pattern/"/>
    <updated>2016-03-16T13:32:00-04:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-observer-and-mediator-pattern</id>
    <content type="html"><![CDATA[<h2>Observer</h2>

<ul>
<li>subject is a logical place to keep track of the collection of the observers

<ul>
<li>the upside is the observers needing to check with the subject via something like long-polling versus the subject notifying the owners</li>
</ul>
</li>
<li>ActiveRecord before_actions and after_actions are a ruby implementation of the observer pattern</li>
<li>How does JS does this?

<ul>
<li>functions are first class object, easy to pass around</li>
</ul>
</li>
</ul>


<h2>Mediator</h2>

<ul>
<li>what&#8217;s the difference between mediator and observer

<ul>
<li>Define an object that encapsulates how a set of objects interact.</li>
<li>Mediator is a little more specific, it avoids having classes communicate directly but instead through a mediator. This helps the Single Responsibility principle by allowing communication to be offloaded to a class that just handles that.</li>
</ul>
</li>
<li>replaces many to many interactions with one to many interactions.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react]]></title>
    <link href="http://adamjonas.com/blog/react/"/>
    <updated>2016-03-10T14:43:00-05:00</updated>
    <id>http://adamjonas.com/blog/react</id>
    <content type="html"><![CDATA[<h2>What is it?</h2>

<ul>
<li>beefed up view layer</li>
<li>one way data binding -> if state changes the view changes</li>
<li>creates a virtual DOM</li>
<li>doesn&#8217;t provide any data management systems like backbone, Alt.js, Redux</li>
<li>no ajax, use JQuery</li>
<li>no routing capabilities</li>
<li>does not work well with JQuery DOM manipulation</li>
<li>can re-render a lot because of the virtual DOM manipulation</li>
</ul>


<h2>Setup</h2>

<ul>
<li>Babel</li>
<li>Gulp - task runner like rake</li>
<li>Webpack - processes through Babel interpreter and make it useable code</li>
</ul>


<h2>Quirks</h2>

<ul>
<li>class becomes className since it is a reserved word</li>
<li>typeSetting</li>
</ul>


<h2>Going forwards</h2>

<ul>
<li>flux

<ul>
<li>alt.js</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four: Proxy and adapter pattern]]></title>
    <link href="http://adamjonas.com/blog/proxy-and-adapter-pattern/"/>
    <updated>2016-03-09T13:10:00-05:00</updated>
    <id>http://adamjonas.com/blog/proxy-and-adapter-pattern</id>
    <content type="html"><![CDATA[<h2>Proxy</h2>

<ul>
<li>reverse proxies</li>
<li>virtual proxy: creates expensive objects on demand. the worker box maybe?

<ul>
<li>infinite scroll or pagination (these objects exist in Octokit, where there are objects as placeholders but it hasn&#8217;t acutally fetched the data)</li>
<li>memoization example in the ruby boook</li>
<li><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html">collection proxy</a></li>
</ul>
</li>
</ul>


<h2>Adapter (aka wrapper)</h2>

<ul>
<li>Fog: cloud storage</li>
<li>ActiveRecord</li>
<li>OctokitWrapper is more of a decorator because it adds additional implementation on top of Octokit</li>
<li>Gateway pattern is an adapter specifically created to talk to external services</li>
<li>HierarchyBuilder is the adapter</li>
<li>The key difference between bridge and apater lies in their intents.

<ul>
<li>Adapter focuses on resolving incompatibilities between two existing interfaces. Bridge, on the other hand, bridges an abstraction and its (potentially numerous) implementations.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four: Builder pattern and Singletons]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-builder-pattern-and-singletons/"/>
    <updated>2016-03-02T12:07:00-05:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-builder-pattern-and-singletons</id>
    <content type="html"><![CDATA[<h2>Builder</h2>

<ul>
<li>Concrete builders: <code>html to markdown</code> and <code>html to json</code>?</li>
<li>Could we think of a complex cart like this? Like line items of a educational program might compose a composite object by the cart which is the director.

<ul>
<li>doesn&#8217;t quite match up with subbing in different builders</li>
</ul>
</li>
<li>like strategy pattern, but the way it differs is that it creates a composite object at the end</li>
<li>but this book is more about the abstract factory, the way this differs is that it the director gives you finer control of the order.</li>
<li><p>separating out <strong>how</strong> the object is built</p></li>
<li><p>e.g. Creating enrollments with one time purchases vs recurring subscriptions</p>

<ul>
<li>client == browser</li>
<li>director == model ShoppingCart</li>
<li>builder1 == JobGuaranteeSubscription</li>
<li>builder2 == NonJobGuaranteeSubscription</li>
<li><p>result == subscription</p></li>
<li><p>Build part: slack group, google group, batch</p></li>
</ul>
</li>
</ul>


<h2>Singleton</h2>

<ul>
<li>there is only one instance and so if another part of the code changes it, then you will have shot yourself in the foot</li>
<li>publishers, which are all singletons, don&#8217;t need more than one, but they could have been classes instead</li>
<li>dependency injection makes tests way easier</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four: Decorator and Composition]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-decorator-and-composition/"/>
    <updated>2016-02-17T13:56:00-05:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-decorator-and-composition</id>
    <content type="html"><![CDATA[<h2>Decorator</h2>

<ul>
<li>OOCSS -> does that fit the pattern?</li>
<li>&#8220;Changing the skin of an object versus changing its guts&#8221;</li>
</ul>


<h2>Composite</h2>

<ul>
<li>componenet: parent node</li>
<li>composite: has children</li>
<li>leaf: has no children</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four Chap 1]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-chap-1/"/>
    <updated>2016-02-03T13:41:00-05:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-chap-1</id>
    <content type="html"><![CDATA[<h2>Polymorphism vs duck typing</h2>

<ul>
<li>from the gospel of <a href="http://stackoverflow.com/a/11502482/1496757">stackoverflow</a> and <a href="http://programmers.stackexchange.com/a/121781">stackexchange</a> and a <a href="https://gist.github.com/46bit/4366791">gist</a></li>
</ul>


<p>  ### Polymorphism</p>

<pre><code>- often hear in the context of subclasses
</code></pre>

<p>  ### Duck typing</p>

<pre><code>- usually hear in the context of mixins
- an interface that can interact without having to know what that object is
</code></pre>

<ul>
<li>class inheritance versus interface inheritance</li>
</ul>


<h2>Composition vs class inheritance</h2>

<ul>
<li>Rule of thumb: when behavior spans classes use composition and when limited to derivations of classes then use subclassing</li>
<li></li>
</ul>


<h2>Run time versus compile time</h2>

<h2>Program to an interface not an implementation</h2>

<ul>
<li>interface is the behavior</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Pointers]]></title>
    <link href="http://adamjonas.com/blog/memory-pointers/"/>
    <updated>2016-01-28T13:54:00-05:00</updated>
    <id>http://adamjonas.com/blog/memory-pointers</id>
    <content type="html"><![CDATA[<h3>Random notes from code reading</h3>

<ul>
<li><p>with 64-bit pointers</p></li>
<li><p>poro -> an array, for example, is made multiple times. One with items
of the array, again for indexes of the array, etc.</p></li>
<li><p>memory swap -> linked lists</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">red-black tree</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Sparse_array">sparse array</a></p></li>
<li><p>program restart re-allocates the memory</p></li>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of User Experience]]></title>
    <link href="http://adamjonas.com/blog/the-elements-of-user-experience/"/>
    <updated>2016-01-19T17:08:00-05:00</updated>
    <id>http://adamjonas.com/blog/the-elements-of-user-experience</id>
    <content type="html"><![CDATA[<p>The Five Planes:</p>

<ol>
<li>The Surface Plane</li>
<li><p>Sensory Design</p></li>
<li><p>The Skeleton Plane</p></li>
<li><p>Interface Design, Navigation Design, and Information Design</p></li>
<li><p>The Structure Plane</p></li>
<li><p>Interaction Design and Information Architecture</p></li>
<li><p>The Scope Plane</p></li>
<li><p>Functional Specifications and Content Requirements</p></li>
<li><p>The Strategy Plane</p></li>
<li>Product Objectives and User Needs</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cantilever tricks]]></title>
    <link href="http://adamjonas.com/blog/cantilever-tricks/"/>
    <updated>2016-01-13T15:45:00-05:00</updated>
    <id>http://adamjonas.com/blog/cantilever-tricks</id>
    <content type="html"><![CDATA[<ul>
<li><p><code>@extend</code> means that the element just get a comment where the extended
class was previously.</p></li>
<li><p>inline svg styling is preferred &#8211; think of it like an iframe.</p></li>
<li><p>gradients are crazy powerful: You can specify that the white area at the bottom starts at 50% from the bottom as specified here &#8211; <code>background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.8) 50%, rgba(255,255,255,1) );</code>. And you can repeat it to make like a rainbow effect. Really cool.</p></li>
<li><p><a href="https://www.smashingmagazine.com/2012/12/css-baseline-the-good-the-bad-and-the-ugly/">baseline alignment</a></p></li>
</ul>


<h2>SVGs</h2>

<ul>
<li><a href="https://css-tricks.com/svg-use-with-external-reference-take-2/">Chris Coyer&#8217;s SVG use external references</a></li>
<li><a href="https://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/">svg sprite creation techniques</a></li>
</ul>


<h2>OOCSS</h2>

<ul>
<li><a href="http://www.stubbornella.org/content/">Nicole Sullivan</a></li>
</ul>


<h2>Floating</h2>

<ul>
<li>if things are longer than expected -> it will overflow with
abosolutely positioned</li>
<li>more predictable behavior for overflow</li>
</ul>


<h2>border box</h2>

<ul>
<li><a href="http://www.w3schools.com/cssref/css3_pr_box-sizing.asp"><code>box-sizing: border-box</code></a> includes padding but not margin in the width
measurements.</li>
</ul>


<h2>whitespace</h2>

<ul>
<li><code>nowrap</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS restyle]]></title>
    <link href="http://adamjonas.com/blog/css-restyle/"/>
    <updated>2016-01-05T10:13:00-05:00</updated>
    <id>http://adamjonas.com/blog/css-restyle</id>
    <content type="html"><![CDATA[<p>#</p>

<h2>Block, Element, Modifier (BEM)</h2>

<ul>
<li><p><a href="https://en.bem.info/">site</a></p></li>
<li><p>containers and objects are more modular</p></li>
<li><p>layouts aren&#8217;t reused</p></li>
<li><p>clearfix issue</p>

<ul>
<li>using psuedo element hack</li>
</ul>
</li>
<li><p>media element</p>

<ul>
<li>object in css methodology</li>
</ul>
</li>
<li><p>containers</p>

<ul>
<li><p>an element that can contain other things -> more container-ish</p>

<ul>
<li>doesn&#8217;t usually contain other elements</li>
</ul>
</li>
<li><p>any decendents are named-spaced of the parent</p>

<ul>
<li>e.g. <code>.sample-object</code> and <code>.sample-object__child</code></li>
<li>child is indicated by double underscore</li>
<li>you should expect to see similar classes up the DOM

<ul>
<li>e.g. <code>&lt;div class='level'&gt;&lt;div
class='level__inner'&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>options

<ul>
<li><code>&lt;div style-color='red'&gt;</code></li>
<li><code>&lt;dic data-count='16'&gt;</code></li>
</ul>
</li>
<li>extensions

<ul>
<li>modifiers have double dash</li>
<li>you should expect to see similar class within the same div

<ul>
<li>e.g. <code>&lt;div class='module module--island module--island--cap'&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>modules

<ul>
<li>usually have a head/body/footer</li>
<li>provides margin around it, background and borders</li>
</ul>
</li>
</ul>
</li>
<li><p>object</p>

<ul>
<li>an element that doesn&#8217;t contain other elements as opposed to
objects which are more like containers</li>
<li>built to fill the width they are in, without explicit width</li>
<li>maybe a place where <code>!important</code> can live given that other
elements won&#8217;t live within it.</li>
<li>expect more legos than objects</li>
</ul>
</li>
<li><p>levels</p>

<ul>
<li>makes vertical organization of the grids</li>
<li>they stack on top of eachother - levels of a building</li>
<li>centers a container in a strip that goes across the page</li>
</ul>
</li>
<li><p>utility class</p>

<ul>
<li>namespaced with url

<ul>
<li>with margin on the bottom</li>
<li><code>utl__m--bxl</code> => utility, margin, bottom extra large</li>
</ul>
</li>
</ul>
</li>
</ul>


<p> ## ?
  - how is this going to work with vendors (like icons)
  - vertical height for grid</p>

<ul>
<li>user bar is a layout

<ul>
<li>list horizontal</li>
</ul>
</li>
<li>level for bubble bar</li>
<li>remove rows and cols from markdown to json parser</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcp, udp, http]]></title>
    <link href="http://adamjonas.com/blog/tcp-udp-http/"/>
    <updated>2015-12-29T17:00:00-05:00</updated>
    <id>http://adamjonas.com/blog/tcp-udp-http</id>
    <content type="html"><![CDATA[<p>I really had no idea between TCP and UDP.</p>

<p><a href="http://www.diffen.com/difference/TCP_vs_UDP">This did a nice comparsion</a>:
Transmission Control Protocol ensures a reliable and ordered delivery of a stream of bytes from user to server or vice versa. User Datagram Protocol is not dedicated to end to end connections and communication does not check readiness of receiver.</p>

<ul>
<li>HTTP uses TCP connection. But HTTP uses only one TCP connection.</li>
<li>Use persistent plain TCP sockets if both client and server independently send packets but an occasional delay is OK (e.g. Online Poker, many MMOs).</li>
<li>Use UDP if both client and server may independently send packets and occasional lag is not OK (e.g. Most multiplayer action games, some MMOs).</li>
</ul>


<p>And <a href="https://www.reddit.com/r/ProgrammerHumor/comments/14wv9p/i_was_gonna_tell_you_guys_a_joke_about_udp/">there is always this</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moneyball on the Keyboard: Scouting Talented Developers]]></title>
    <link href="http://adamjonas.com/blog/moneyball-on-the-keyboard-scouting-talented-developers/"/>
    <updated>2015-12-06T12:12:00-05:00</updated>
    <id>http://adamjonas.com/blog/moneyball-on-the-keyboard-scouting-talented-developers</id>
    <content type="html"><![CDATA[<iframe width="1280" height="720" src="https://www.youtube-nocookie.com/embed/tw5wFOAmpTc?rel=0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how the web works]]></title>
    <link href="http://adamjonas.com/blog/how-the-web-works/"/>
    <updated>2015-07-08T12:20:00-04:00</updated>
    <id>http://adamjonas.com/blog/how-the-web-works</id>
    <content type="html"><![CDATA[<h2>learn co</h2>

<p>  -> get IP address for server
  -> assemble http request, sends an ack
  -> open a tcp connection on 80 (or 443 for SSL)
  -> tcp port established between user and host (over 1024)
  -> ssl negotiation, user provides public key and the host provides its public key we validate based on a cert provider and then we are provided a symetric key that we use with that site going forward
  -> nat - network address translation
  -> GET HTTP request</p>

<h2>On the server -></h2>

<ul>
<li>HA proxy (ssl negotiation, load balancing) (we could replace this with nginx)</li>
<li>apache (speaks http, this is the web server)</li>
<li>phusion passenger (the workers that enable concurrancy)</li>
<li>hit the routes file</li>
</ul>


<h2>LB01</h2>

<ul>
<li>ubuntu 14.04 (LTS)</li>
<li>HA proxyd (port 443 -d SSL only)</li>
<li>sshd (port 22) -> run commands remotely (ssl encrypted)</li>
</ul>


<h2>IB03</h2>

<ul>
<li>apache, spawns passenger pushion</li>
<li>passenger spawns 5 wokers

<ul>
<li>takes the request and turns it into a rack ruby object</li>
</ul>
</li>
</ul>


<h2>NFS - Network file system</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Innovator's Dilemma]]></title>
    <link href="http://adamjonas.com/blog/innovators-dilemma/"/>
    <updated>2015-06-14T10:43:00-04:00</updated>
    <id>http://adamjonas.com/blog/innovators-dilemma</id>
    <content type="html"><![CDATA[<h2>Sustaining v Disruptive Technologies</h2>

<ul>
<li>sustaining tech are improvements that sustain a company&#8217;s focus, goals, and customers.</li>
</ul>


<h2>Distruptive Products</h2>

<ul>
<li>Generally these products underperform establish products in mainstream markets.</li>
<li>Cheaper, simpler, smaller, more convenient. (Dimensions: functionality, reliability, convenience, price)

<ul>
<li>The attributes that often make the distruptive technology worthless in mainstream markets often become strong selling points in emerging markets.</li>
</ul>
</li>
<li>Do not improve the focus of the company. A market must be developed and new customers found.

<ul>
<li>Ignore the mainstream market. Find a market that values the disadvantages of the distruptive technology.</li>
</ul>
</li>
<li>Neither the firm nor the customers know of distruptive tech can be used.</li>
<li>managers need to plan to learn and discover, not plan and execute bc markets are unknowable.</li>
<li>cannot rely on new breakthrough technology, it is usually combining existing tech in a new way.</li>
</ul>


<h2>Allocating Resources</h2>

<ul>
<li><p>Being a follower in sustaining technologies is a viable and possibly desirable strategy, but leadership in disruptive technology creates enormous value. (Ch 6)</p></li>
<li><p>Match the size of the organization to the size of the market. Implant projects aimed at commercializing disruptive innovations small enough to get excited about small market opportunities. (Ch 6)</p>

<ul>
<li>Johnson and Johnson is comprises of 160 automonous companies each of which can introduce distuptive products.</li>
</ul>
</li>
<li><p>small markets don&#8217;t solve growth needs of big companies. For disruptive technologies, markets are unknowable.</p></li>
<li><p>look at the performance improvement of new technology. If it is growing faster than market performance demand, then it can be distruptive (it will eventually intersect the market need curve). (Ch 10)</p></li>
</ul>


<h2>Summary</h2>

<ul>
<li>Managing innovation is a mirror image of managing the resource allocation process.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stemming and faceted search]]></title>
    <link href="http://adamjonas.com/blog/stemming-and-faceted-search/"/>
    <updated>2015-06-12T09:32:00-04:00</updated>
    <id>http://adamjonas.com/blog/stemming-and-faceted-search</id>
    <content type="html"><![CDATA[<h2>Faceted Search</h2>

<p>Search of specific facets like a brand or size for a show search. These are limited set of values, not like a username or ID which could be anything. It&#8217;s like a taxomony search.</p>

<p><a href="http://en.wikipedia.org/wiki/Faceted_search">Wikipedia</a></p>

<h2>Stemming</h2>

<p>Reduces the word to its root. So &#8216;fishes&#8217; and &#8216;fishing&#8217; to &#8216;fish.&#8217;</p>

<p>This algorithm really hasn&#8217;t been around that long. First proposed in &#8216;68 it gained popularity in the 80s.</p>

<p><a href="http://en.wikipedia.org/wiki/Stemming">Wikipedia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Warren Buffet Bio]]></title>
    <link href="http://adamjonas.com/blog/warren-buffet-bio/"/>
    <updated>2015-03-21T13:30:00-04:00</updated>
    <id>http://adamjonas.com/blog/warren-buffet-bio</id>
    <content type="html"><![CDATA[<ul>
<li><p>The cornerstone of Buffet&#8217;s investment philiosphy: Never count on making a good sale. Have a purchase price be so attractive that a mediocre sale gives good results.</p></li>
<li><p>Book value is equal to that capital that have gone <em>into</em> a business, plus whatever profits been retained. An investoris concerned with how much can be taken out in the future; that is what determines the company&#8217;s worth or <em>intrinsic value</em> as Buffet would call it. Book value is blind to intangibles like brand and so there are opportunities to take aadvantage of the  gap between the discepency of the book value and the instrinsic value.</p></li>
<li><p>Also read Benjamin Graham, Charlie Munger, &amp; Philip Fisher.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[omniauth tomfoolery]]></title>
    <link href="http://adamjonas.com/blog/omniauth-tomfoolery/"/>
    <updated>2015-03-04T18:01:00-05:00</updated>
    <id>http://adamjonas.com/blog/omniauth-tomfoolery</id>
    <content type="html"><![CDATA[<p>Problem: Want to redirect a user who has yet to sign up back to our site after joining Github. Github does not support a url other than login and if you were to click on sign up from there, you would lose the query string parameters.</p>

<p>Resources:
<a href="https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview#cannot-load-strategy-class">Explicitly set strategy class</a></p>

<p><a href="https://github.com/intridea/omniauth/wiki/Strategy-Contribution-Guide#defining-the-request-phase">Strategy Contribution Guide</a></p>

<p><a href="https://github.com/intridea/omniauth-oauth/blob/43008e42b257d9b7c0b98122cf03ce14b021d782/lib/omniauth/strategies/oauth.rb">oauth strategy</a></p>

<p>I ended up getting the param through, but github noticed and closed the loop. Sad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Working in Professional Baseball Taught Me about Web Development]]></title>
    <link href="http://adamjonas.com/blog/what-working-in-professional-baseball-taught-me-about-web-development/"/>
    <updated>2015-01-19T15:32:00-05:00</updated>
    <id>http://adamjonas.com/blog/what-working-in-professional-baseball-taught-me-about-web-development</id>
    <content type="html"><![CDATA[<p>Before I was a web developer, I spent my time on baseball fields helping teenagers realize their ultimate dream of playing in the Major Leagues. All of them had talent. Somewhere, someone had seen glimpses of it. Cultivating that talent and turning their potential into performance was the primary purpose of my job. In the vast majority of cases we failed. Now, a few years removed from the game, most of the players I worked with are out of professional baseball. Those who did succeed, found a way to endure the grind and adjusted to the game’s mental and emotional demands.</p>

<p>In 2012, I hit the reset button on my career and became a web developer. I thought I would be leaving baseball forever. However, I found that many of the same traits I saw in successful ball players, even those with very little formal schooling, were some of the very same characteristics I observed in talented engineers. The inability to manage failure, maintain consistency, and learn how to be a professional shattered the dreams of the vast majority players I worked with because they were skills that were so difficult to master.</p>

<p>When I see one of them on TV, it’s hard to not recall the younger, yet unmolded version. It is why I was never the best scout. The baseball scout’s job is to imagine the possibilities. They envision a future version of a gangly youth whose body and mind has matured and whose flaws have been smoothed away to the point they can perform in the Major Leagues. It is a hard job and one that I wish existed in other industries.</p>

<h2>Facing failure</h2>

<p>Successful people, in any field, often struggle with making mistakes. This isn’t surprising, we are wired for bad news. We internalize it. We personalize it. Repeated failure is exhausting. Ball players, whose hitting success rate is at best around 30% are forced to cope. Failure is inherently part of the game.</p>

<p>Resilient players’ confidences seem immune to repeated failure. In fact, failure appears to be inextricably linked to their progress. This makes sense. We improve fastest based on negative feedback. The great thing about that big red error message is that it leaves an obvious clue. Sometimes these hints are more obscure than others, but bugs and errors inform us where to look and where to improve.</p>

<p>Getting repeatedly beaten by the same pitch provides feedback on where hitters need to improve in the same way that a familiar error in our terminal window instructs us where in the code to start looking for our mistake. As humans we learn through repetition and experience. The goal is to not getting beaten again by the same pitch or the same problem.</p>

<p>When I first started learning to program, I focused on never repeating the same mistake twice. This, of course, is impossible but I recorded most my thoughts and posted it online so that I had a searchable collection of my mistakes. The frequency of my posts have waned, but I still find myself searching my blog archives when I know I’ve solved a similar problem in the past. While it was rare to see ball players jot down notes on opponents, most hitting savants have the ability recall previous pitch sequences from past at-bats. Either way, the secret to coping with failure is to reframe it as valuable feedback to be used in the future.</p>

<h2>Consistency</h2>

<p>As developers, we know that consistent performance is important. We construct our dependencies on the most stable parts of our applications. The same goes for managers: when Sarah demonstrates she can be depended on to meet deadlines on a day-to-day, week-to-week, sprint-to-sprint or quarter-to-quarter basis, Sarah can be relied on to build the feature to satisfy the high priority business objective.</p>

<p>Consistency creates the opportunity for measurement. Like the measurement of feature velocity based on a set period of time, comparison of player’s abilities would be worthless without a standard 162 game schedule where the participants play nine innings with nine players on the field. Without a level playing field, comparisons are no longer valid and people can get really upset (see baseball and steroids).</p>

<p>Consistency is difficult because we are wired to break free from it. We are not as perfectly repeatable as the scripts we write. Our brains thrive on novelty. The day-to-day becomes mundane without it. We seek out adventure and variety. We create drama where there is none. We endeavor to learn new things.</p>

<p>But mostly being consistent is just showing up. Being there when products ship and stuff goes down. Career defining highlights are created when people are in the right place at the right time. Crashes on the production server and DEFCON 1 bugs are inevitable but these panic moments create opportunities. Under pressure, acting as you always do makes you a hero.</p>

<p>Derek Jeter’s lifetime batting average was .310. A consummate professional, he hit .308 in the playoffs. Just being yourself when the pressure is on and more eyes are on you makes it seem like you are rising to the occasion. No one is perfect, but bringing your best everyday provides predictability to our human unpredictability and separates the amateurs from the pros.</p>

<h2>Professionalism</h2>

<p>Professional baseball is a child’s game played by overgrown men who make millions of dollars. Make no mistake about it, baseball is a grueling sport. The schedule is relentless. Players arrive at the stadium five-plus hours before the first pitch to weight train, stretch, hit, throw, review scouting reports, etc.</p>

<p>After a three hour game, players are expected to hold court in front of their lockers and answer questions that essentially boil down to, “Tell us about your glaring mistake that you made in front of thousands of people across America.” Each major league team plays 162 games in about 180 days &#8211; not to mention the the month of spring training before the season starts and, if they are lucky, a month of postseason games. Eighty-one of these games in other cities meaning players are switching time zones for weeks on end. The truly blessed ones do this for 20+ years. What the casual fan sees of a player on any given night is the result of thousands of hours of refining subtle movements through exhaustive repetition.</p>

<p>And while we developers don’t enjoy the fame and fortune of Major Leaguers, we get to solve the worlds’ hardest puzzles. The impact of our code has touched the lives of nearly every human on the planet. The drudgery of implementing the vision of others is offset by the natural builder’s high.</p>

<p>Hacker News is littered with discussion on how writing software can crush your soul, but for the lucky ones, the “job” retains its joy. Despite the jeering fans and elusive bugs, there are a blessed few who simply love what they do.</p>

<h2>The Same But Different</h2>

<p>Of course, there are stark differences between baseball and software engineering. Software has been in the hands of laymen for less than a generation and baseball has remained unchanged since before the Civil War. While software’s impact continues to accelerate, we should pause to take breathers and remember that what is old becomes new again. There are lessons to learn everywhere we look and baseball has proven no different for me.</p>

<p>I love what I do. I’ve never been as challenged as when I’m muddling to make sense of a new concept or totally lost in a self-created code mess. The wins and losses I’ve experienced as a developer are like nothing else I’ve experienced as an athlete or a coach. While I’m still a relatively new programmer, my experiences in baseball have transferred as valuable lessons on coping with failures, reliability, and professionalism.</p>

<p>Not all that long ago my work day consisted of spotting the subtle deficiencies in a pitcher’s delivery and the sound of a shortstop’s feet as he ran a 60 yard dash, but when I watch how a junior dev deftly uses her VIM shortcuts or the ease of which she writes a complex SQL query, I’m reminded it’s not so different after all.</p>
]]></content>
  </entry>
  
</feed>

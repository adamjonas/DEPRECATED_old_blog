<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FIS | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/fis/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2012-11-09T09:44:41-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day23]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day23/"/>
    <updated>2012-11-08T09:50:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day23</id>
    <content type="html"><![CDATA[<h3>Blog Configuration</h3>

<p><code>
♕ heroku domains:add adamjonas.com
Adding adamjonas.com to ajonas... done
♕ heroku domains:add blog.adamjonas.com
Adding blog.adamjonas.com to ajonas... done
</code></p>

<p>```
HOST NAME IP ADDRESS/ URL RECORD TYPE MX PREF TTL
  @       Heroku IPs              A(address)
  @       Heroku IPs              A(address)
  @       Heroku IPs              A(address)
  www      ajonas.heroku  CNAME</p>

<p>SUB-DOMAIN SETTINGS
  blog   ajonas.heroku   CNAME
```
Explanation of heroku side <a href="https://devcenter.heroku.com/articles/custom-domains">is here</a>.</p>

<h3>POTD</h3>

<ul>
<li>Jeff Raskin</li>
</ul>


<h3>Morning Code</h3>

<p><code>ruby
rails generate rspec:install
</code></p>

<p>a class is what describes how objects are similar to eachother
instances describe how objects are different</p>

<h3>Rails</h3>

<p>form builders - ActionView</p>

<p>acceptance -> virtual attribute</p>

<p>@instance_variables only can be accessed within the same action</p>

<p><code>ruby Every time you run a migration
rake db:test:prepare
</code></p>

<p>shoulda_matchers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day22]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day22/"/>
    <updated>2012-11-07T10:10:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day22</id>
    <content type="html"><![CDATA[<h3>HTTParty</h3>

<ul>
<li><a href="https://github.com/jnunemaker/httparty">On github</a></li>
<li><a href="http://blog.teamtreehouse.com/its-time-to-httparty">Treehouse blog post</a></li>
</ul>


<h3>Rant</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Conway%27s_law">Conway's law</a>

<ul>
<li>organizational communication will be reflected in the product</li>
</ul>
</li>
</ul>


<p>seagull architect -</p>

<blockquote><p>comes in, shits all over your code and then leaves</p></blockquote>

<p><a href="https://speakerdeck.com/sarahmei/the-insufficiency-of-good-design">Insufficiency of good design</a></p>

<p>Open source: def up and down in migration.rb in rails can be refactored</p>

<h3>POTD</h3>

<p><a href="http://en.wikipedia.org/wiki/Joseph_Weizenbaum">Joseph Weizenbaum</a></p>

<h2>Rails Lecture</h2>

<p>```ruby Controller Test Continued from Day21...
require 'spec_helper'</p>

<p>describe SongsController do
  describe 'POST /songs' do</p>

<pre><code>it 'should create a song with a name' do
  post :create, {:song =&gt; {:name =&gt; "Thriller"}}

  assigns(:song).name.should == "Thriller"
end

it 'should create a song with an artist name' do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :artist_name =&gt; "Michael Jackson"}}

  assigns(:song).artist_name.should == "Michael Jackson"
end

it "should create a song with a genre string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; "Pop"}}

  assigns(:song).genre_names.should include("Pop")
end


it "should create a song with a genres from a CSV string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; "Pop, Techno"}}

  assigns(:song).genre_names.should include("Pop")
end

it "should create a song with a genre array containing CSV string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; ["Pop, Techno", "Rap"]}}

  assigns(:song).genre_names.should include("Pop")
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby song_spec.rb Unit Test
require 'spec_helper'</p>

<p>describe Song do
  let(:song){Song.new(:name => "Thriller")}</p>

<p>  context 'with genres' do</p>

<pre><code>let(:genre){Genre.create(:name =&gt; "Pop")}

context '.genre_names' do
  it "should return an array of genre names" do
    song.genres &lt;&lt; genre
    song.save


    song.genre_names.should be_an_instance_of(Array)
    song.genre_names.should include("Pop")
  end

  it "should accept a genre name and add that genre" do
    song.genre_names = "Techno"
    song.save

    song.genre_names.should include("Techno")
  end

  it "should accept a comma delimited list of genre names" do
    song.genre_names = "Techno, Pop"
    song.save

    song.genre_names.should include("Techno", "Pop")
  end

  it "should accept an array containing comma delimited list of genre names" do
    song.genre_names = ["Techno, Pop", "Rap"]
    song.save

    song.genre_names.should include("Techno", "Pop", "Rap")
  end

  it "should only add unique genres" do
    song.genre_names = ["Pop", "Pop"]
    song.save

    song.genre_names.count.should == 1
  end

end
</code></pre>

<p>```
rake spec:models</p>

<p><code>ruby gem file
group [:development, :test] do
  gem 'debugger'
end
</code></p>

<ul>
<li>detect returns nil if there is not match</li>
<li>select returns an empty array when no match</li>
</ul>


<p><a href="http://guides.rubyonrails.org/active_support_core_extensions.html#array-conversions"><strong>to_sentence method in rails</strong></a></p>

<h3>HTML &lt; form_tag lower &lt; form_for</h3>

<p><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag">form_tag</a></p>

<p>```
<form action="/songs" id="new_song" class="new_song"> <form></p>

<p>&lt;%= form_tag(songs_path, :id => "new song") do %>
  &lt;%= text_field_tag "song[name]", @song.name, :id => "song_name"] %>
  &lt;%= text_field_tag "song[artist_name]", @song.artist_name, :id => "song_artist_name"] %>
  &lt;%= submit_tag "Create Song", :id => "create_song" %>
&lt;% end %></p>

<p>&lt;%= form_for(@song) do |f| %>
  &lt;%= f.text_field :name %>
  &lt;%= f.text_field :artist_name %>
  &lt;%= f.submit %>
&lt;% end %>
```
<a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag">text_field_tag docs</a></p>

<h3>Integration test / Acceptance Test</h3>

<ul>
<li><p><a href="http://railscasts.com/episodes/187-testing-exceptions">Railscast 187</a></p></li>
<li><p><a href="http://railscasts.com/episodes/257-request-specs-and-capybara">Railscast 257</a></p></li>
<li><a href="https://github.com/copiousfreetime/launchy">launchy gem</a> to see that page that capybara filled out - useful for creating fixtures</li>
<li><p>post_via_redirect</p>

<ul>
<li>get => response</li>
<li>visit => page</li>
</ul>
</li>
</ul>


<h3>Continuous Integration / Testing</h3>

<ul>
<li>autotest</li>
<li>guard

<ul>
<li><a href="https://github.com/guard/guard">gem guard-rspec</a></li>
</ul>
</li>
<li>rb-fsevent -> rb-FileSaveEvent -> gem that pings guard (or anything else) when a file is saved</li>
<li>growl extension or terminal notifier on the <a href="https://github.com/guard/guard#terminal-notifier">guard gem page</a></li>
<li><a href="https://github.com/jnicklas/capybara">capybara</a></li>
</ul>


<p><strong>receiver.try(:method) -> if the receiver is nil then try will not call the method, otherwise it will</strong></p>

<h3>Pull down the other app</h3>

<p>git merge upstream/master</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day21]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day21/"/>
    <updated>2012-11-06T13:57:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day21</id>
    <content type="html"><![CDATA[<p><strong><em>Generate a model that is singular-- ALWAYS</em></strong></p>

<p>'self' means the receiver of this method call</p>

<p><a href="http://blog.aviflombaum.com/blog/2012/07/dont-use-accepts-nested-attributes-for-with-belongs-to/"><strong>never ever have a nested attributes for belongs_to ONLY has has_many</strong>
</a></p>

<p>```ruby song.rb Model
Class Song</p>

<p>  def add_genre(genre)</p>

<pre><code>genre = Genre.find_or_create_by_name(genre) if genre.is_a?(String) 
self.song_genres.create(:genre =&gt; genre).genre
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>```ruby song_spec.rb Unit Test
require 'spec_helper'</p>

<p>describe Song do
  context '.add_genre' do</p>

<pre><code>before(:each) do
  let(:song){Song.create(:name =&gt; "Thriller")} 
  let(:genre){Genre.create(:name =&gt; "Pop")} #this creates the genre method that executes the block that follows it.

  it "should add the genre" do
    song.add_genre(genre)

    song.genres.should include(genre)
  end

  it "should return the newly added genre" do
    song.add_genre(genre) should == genre #this means it won't return a full array like a push method return
  end

  it 'should accept an existing genre name do'
    genre = Genre.create(:name =&gt; "Techno")
    song.add_genre("Techno").should == genre
  end

  it 'should accept a genre name' do
    song.add_genre("Pop").should == genre
  end

  it "should add only unique genres" do
    #if I add the same genre twice, it should still 
    song.add_genre(genre)
    song.add_genre(genre)

    song.genres.count.should == 1
  end
</code></pre>

<p>  end
end
```
Rspec runs its tests in isolation, by running each test in a transaction. After each test, it rollbacks all the writes.</p>

<p>LOGS:
<code>
tail -f #open the end of the file and keep it open.
</code></p>

<p>If you are building associated data outside of your model, then you haven't encapsulated enough.</p>

<ul>
<li>Tests Hierarchy in ascending levels of abstraction

<ul>
<li>unit tests</li>
<li>controller tests</li>
<li>integration tests</li>
</ul>
</li>
</ul>


<p>```ruby Controller Test
require 'spec_helper'</p>

<p>describe SongsController do
  describe 'POST /songs' do</p>

<pre><code>it 'should create a song with a name do'
  post :create, {:song =&gt; {:name =&gt; "Thriller"}}
  #create action in the song controller with post or request parameters that you 
  #want to send along with it

 # Song.find_by_name("Thriller").should be_true
 assigns(:song).name.should == "Thriller"
end

it 'should create a song with an artist name'
  post :create, {:song =&gt; {:name =&gt; "Thriller", :artist_name =&gt; "Michael Jackson"}}}
  #this makes artist_name a first class citizen in the params hash.

  #we killed this because we are assigning a string, not an artist object--&gt; post :create, {:song =&gt; {:name =&gt; "Thriller", :artist =&gt; {:name =&gt; "Michael Jackson"}}} 

  #create action in the song controller with post or request parameters that you 
  #want to send along with it

  #Song.find_by_name("Thriller").should be_true
  assigns(:song).artist.name.should == "Michael Jackson"
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby song_spec.rb
context '.artist_name' do
  it "should have an artist_name method" do</p>

<pre><code>song.should respond_to(:artist_name)
</code></pre>

<p>  end</p>

<p>  it 'should return a songs artist' do</p>

<pre><code>song.artist = Artist.create(:name =&gt; "Michael Jackson")
song.artst_name.should == "Michael Jackson"
</code></pre>

<p>  end
end</p>

<p>  context '.artist_name=' do</p>

<pre><code>it "should assign the artist via the name" do
  song.artist_name = "Michael Jackson"
  song.artist.should be_a(Artist)
  song.artist_name.should == "Michael Jackson"
end
</code></pre>

<p>  end
```</p>

<p>```ruby Song.rb Model
  def artist_name</p>

<pre><code>self.artist.name if self.artist
</code></pre>

<p>  end</p>

<p>  def artist_name=(string)</p>

<pre><code>self.artist = Artist.find_or_create_by_name(string)
</code></pre>

<p>  end
```</p>

<h3>SOLID</h3>

<p>Procedural code- solutions for very specific problems</p>

<p>dependencies will kill your code, but design will save it</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of Web Requests]]></title>
    <link href="http://www.adamjonas.com/blog/anatomy-of-web-requests/"/>
    <updated>2012-11-05T12:58:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/anatomy-of-web-requests</id>
    <content type="html"><![CDATA[<h3><a href="http://johndbritton.com/">John Britton</a></h3>

<h3>Requests are like</h3>

<ul>
<li>driving a car</li>
<li><p>shipping containers</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/OSI_model">OSI model</a></p></li>
</ul>


<p>  sounds a lot like mvc- in terms of abstraction</p>

<p>  HTTP: the language that your browser speaks
  - The webpage is a document</p>

<h3>URI:</h3>

<ul>
<li><p>Rendering</p>

<ul>
<li>HTML structure</li>
<li>CSS style</li>
<li><p>JS behavior</p></li>
<li><p>ports are a concept</p></li>
<li>ftp 21</li>
<li>ssl 53</li>
<li>0-1024 -> are assigned</li>
<li>1024-49151 -> are available</li>
<li><p>49152+</p></li>
<li><p>if listening on 80- that means that route every request on port 80 to this program</p></li>
</ul>
</li>
<li><p><a href="http://jsfiddle.net/">JS Fiddle</a></p></li>
<li><p>HTTP: methods/verbs</p>

<ul>
<li>GET - grab some stuff and bring it down</li>
<li>POST - anything you are altering the state of the app with is probably a post request</li>
<li>PUT</li>
<li>DELETE</li>
<li>others: HEAD, PATCH, TRACE, OPTIONS, CONNECT</li>
</ul>
</li>
<li><p>curl- works just like a browser on the command line.</p></li>
</ul>


<h3>Where do those requests go?</h3>

<ul>
<li>what is the ip address of the resource I am looking for</li>
<li><p>if nothing is cached anywhere</p>

<ul>
<li>13 root nameservers</li>
<li>TLD nameserver- authoritative for .coms for example</li>
<li>A record - I found the place to go for github, but I need the actual IP address</li>
<li><p>IP address</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/BIND">BIND</a> is the most widely used DNS software on the Internet.</p></li>
<li><p>TTL- <a href="http://en.wikipedia.org/wiki/Time_to_live">time to live</a></p></li>
<li><p>Networks: nodes that can talk to each other directly</p></li>
<li>Interface</li>
<li><p>Network addresses:</p>

<ul>
<li>defines all the address that can talk to each other</li>
<li>a.b.c.d/n (n= network mask /subnet)</li>
<li>Private (non routable) network

<ul>
<li>10.0.0.0/8</li>
<li>172.16.0.0/12 -> identifies which part is</li>
<li>192.168.0.0/16 -> private networks namespaced for private networks</li>
</ul>


<p>255.255.255.0 -> subnet mask -> 24 bits ->
192.168.1.N and n can't exceed 255 people.</p>

<p>10101100.0001 -> this is the network address -> the first 16 bits, the rest would be the node of the network</p>

<ul>
<li>you can have a lot more machines on an 8 bit network identifier, than a 16 bit. But you wouldn't want to waste a bunch of nodes that aren't going to be used.</li>
</ul>
</li>
</ul>
</li>
<li><p>Maximum number of address minus two</p>

<ul>
<li>192.168.1.255 -> broadcast address</li>
</ul>
</li>
<li><p>Network Hardware</p>

<ul>
<li>Hub - dumb -> connects everyone's ports to each other -> every machine's send is connected to everyone's receive -> lowest level</li>
<li>Switch - smarter -> knows what addresses are connected to what ports - lowers network traffic, sending something once and remembering who responds</li>
<li>Router - smartest -> connects <a href="http://www.merriam-webster.com/dictionary/disparate">disparate</a> networks. Hub and switch talk to each other, for a router, we go through another point -> knows about disparate networks and IP addresses</li>
</ul>
</li>
</ul>


<p>-Network Protocols</p>

<ul>
<li>Operating system knows about the <strong>transport</strong>.

<ul>
<li>Something reliable it will write in <strong>TCP</strong>

<ul>
<li>It has to all get there or the file will be corrupt</li>
<li>there is a control mechanism. If the packets I'm not sending</li>
</ul>
</li>
<li><strong>UDP</strong> - don't want a reliable transport.

<ul>
<li>I don't care if it all gets there. Deliver it in order.</li>
<li>You don't want a second of video that was sent out of order, you don't want to patch it together out of order. Streaming would use UDP.</li>
</ul>
</li>
</ul>
</li>
<li>Routing - my machine doesn't know about them.

<ul>
<li><a href="http://en.wikipedia.org/wiki/Routing_Information_Protocol">RIP</a> -</li>
<li><a href="http://en.wikipedia.org/wiki/Open_Shortest_Path_First">OSPF</a> - Open Shortest Path First- a concept of links and weight of links. If you have two possible routes, it will go on</li>
</ul>
</li>
<li><p>Network Address Translation</p>

<ul>
<li>maps traffic coming from an internal network and makes sure the appropriate machine gets the info it requested.</li>
</ul>
</li>
<li><p>traceroute
<code>
traceroute github.com
whois adamjonas.com
ping google.com
curl google.com
</code></p></li>
</ul>
</li>
<li><p>nmap
brew install nmap
nmap #map the network</p>

<h1>could run this against port 22 which is all the ssh</h1></li>
<li><p><a href="http://whatismyipaddress.com/">wireshark</a></p></li>
<li><p>hazel- rules based apps</p></li>
<li>cueing in rails</li>
<li><p><a href="http://progrium.com/localtunnel/">local tunnel</a></p></li>
<li><p>blobs, tags, branches, commits</p>

<ul>
<li>blob is just a file -> any data</li>
<li>git hash-object README</li>
</ul>
</li>
<li><p>tree</p>

<ul>
<li>brew install tree</li>
</ul>
</li>
<li><p>Divy or breeze: window arranging</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day20]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day20/"/>
    <updated>2012-11-05T08:55:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day20</id>
    <content type="html"><![CDATA[<h3>UMLs</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Unified_Modeling_Language">Unified Model Language</a></li>
<li>Monolithic user classes

<ul>
<li><a href="http://stackoverflow.com/questions/3179396/what-does-monolithic-mean">definition of monolithic</a></li>
</ul>
</li>
</ul>


<h3>SQL</h3>

<ul>
<li>A has_many :through type query
<code>
SELECT * FROM song_genres INNER JOIN genres ON genre.id = genre_id FROM song_genre WHERE song_id = 1
</code></li>
</ul>


<h3>Avoiding has_and_belongs_to_many</h3>

<ul>
<li>if you name a column order, connection, attribute, etc., you will run into issues, because those words are reserved</li>
<li><a href="http://archive.culann.com/2008/03/the-evil-unnecessary-has_and_belongs_to_many">don't user HABTM</a></li>
<li><a href="http://blog.hasmanythrough.com/2006/4/20/many-to-many-dance-off">Jose Susser isn't as adamant</a></li>
</ul>


<h3>Lessons Learned</h3>

<ul>
<li><p>Parameters in a method HAVE TO BE comma delimited:
<code>ruby
form_tag(url_for_options = {}, options = {}, &amp;block)
</code></p></li>
<li><p>When using build, you just need to save the parent.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

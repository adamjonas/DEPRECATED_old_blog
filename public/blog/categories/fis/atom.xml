<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FIS | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/fis/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-24T09:30:58-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day13]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13/"/>
    <updated>2012-10-21T19:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13</id>
    <content type="html"><![CDATA[<blockquote><p>"It is much easier to optimize correct code than it is to correct optimized code."</p></blockquote>

<h3>POTD Uncle Bob</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Robert_Cecil_Martin">Wikipedia</a></li>
<li><a href="http://agilemanifesto.org/">Agile manifesto</a></li>
</ul>


<h3>Nate Westheimer</h3>

<ul>
<li>? What kind of startups would you like to work at?</li>
<li>? Since we are starting with a blank slate, what would you spend your time learning? Mobile? What skills will ensure you will be valuable for the next few years?</li>
<li>? why choose mysql over other db options, how do you make other architectural decisions since you may not have a bird's eye view?</li>
<li>? controlling feature creep - where i live based on the photos-- necessary? A: intuition</li>
</ul>


<p><strong>Mentions:</strong></p>

<ul>
<li><a href="http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html">comparing pictures</a></li>
<li>imagemagick- gem for manipulating photos</li>
<li><a href="http://stu.mp/2004/06/a-quick-bitmask-howto-for-programmers.html">bit mask</a></li>
<li>vertical color palette is spits out top 5 colors out my <a href="http://www.imagemagick.org/script/index.php">imagemagick</a></li>
<li><a href="http://www.merbivore.com/">merb</a>- a product people love because it's simple</li>
<li><a href="http://digital-photography-school.com/using-exif-data">exif</a> data in the photos</li>
<li><a href="http://www.amazon.com/iWoz-Computer-Invented-Personal-Co-Founded/dp/0393330435/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1350920465&amp;sr=1-1&amp;keywords=iwoz">IWOZ</a> by Steve Wozniak</li>
<li><a href="http://www.amazon.com/Soul-New-Machine-Tracy-Kidder/dp/0316491977">soul of the new machine</a></li>
</ul>


<h3>TDD</h3>

<p>Setup and tear down methods come with every test suite.</p>

<ul>
<li>CLI application for the dynamic</li>
<li>test the job board classes, using SQL joins-- class called job and a class called company</li>
<li>test the student class in the dynamic site</li>
<li>focus on Sinatra- put a front end on the job board</li>
<li>find what they scraped and build an end all be all of job scrapers.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day10]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/17/fis-day10/"/>
    <updated>2012-10-17T09:42:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/17/fis-day10</id>
    <content type="html"><![CDATA[<p>Yaml is more about structured data. Markdown is more about content.</p>

<p>Koans don't really demonstrate variable scope.</p>

<p>Vint Cerf:</p>

<blockquote><p>built TCP</p></blockquote>

<h3>Programmer of the day</h3>

<p>Kent Beck:</p>

<ul>
<li>invented smalltalk</li>
<li>smalltalk design patterns, refactoring, test-driven development, extreme programming, the agile manifesto</li>
</ul>


<blockquote><p><strong>The nature of errors are unmet expectations</strong> you made an assumption and for some reason that is not longer true.</p></blockquote>

<h3>Test Driven Development</h3>

<p>define your expectation</p>

<ul>
<li><strong>writing tests is writing the code I wish I had</strong></li>
<li><strong>testing is not about quality assurance</strong></li>
</ul>


<p>If you are using a case statement your code isn't object oriented.</p>

<p><a href="http://sqlite-ruby.rubyforge.org/sqlite3/faq.html">execute batch</a></p>

<h2>Ruby</h2>

<h3>Hooks</h3>

<p>```ruby initialize
def initialize(arg1, arg2)</p>

<pre><code>#by specifying that initialize 
#in initialize its very much ok to use initialize
</code></pre>

<p>end
```</p>

<p>```ruby class Methods
class Artist</p>

<pre><code>def self.top_5
end
</code></pre>

<p>end</p>

<p>class Artist</p>

<pre><code>class &lt;&lt; self
#this method is hard to read if you are scrolled all the way down.
#it doesn't explicitly say it's a class method in the method signature
    def top_5
    end
end
</code></pre>

<p>end
```</p>

<h3>Mini Library Project</h3>

<p>```ruby Lessons Learned
begin
  assert_equal find_songs(library, "Poker Face").first.name, "Poker Face"
rescue => e
  puts e
end</p>

<h1>notice that find_songs has an implicit receiver. Since it's not a</h1>

<h1>class method, it has to be called OUTSIDE a class...</h1>

<h1>ALSO</h1>

<p>def search_songs(library, song)</p>

<pre><code>library.songs.find_all { |ea_song| ea_song if ea_song.name.match(song) }
</code></pre>

<p>end</p>

<h1>make sure that I'm calling the .find_all on an ATTRIBUTE of an object. 'Come on Jonas,' you are better than that.</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day7]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/12/fis-day7/"/>
    <updated>2012-10-12T09:46:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/12/fis-day7</id>
    <content type="html"><![CDATA[<p>So this was on hacknews, but I thought this article was awesome: [Why the laptop has such a hard time catching on].(http://www.theatlantic.com/technology/archive/2012/09/why-the-first-laptop-had-such-a-hard-time-catching-on-hint-sexism/262220/)</p>

<h2>Beauty in code</h2>

<p><em>pythagoras</em>: beauty in numbers. He found the blacksmith's sounds of hammers were beautiful. It was based on the proportion of the hammers-- ended up being the basis of music theory. The ratios were also integrated into Greek Architecture.</p>

<p><em>Thomas Aquinas</em></p>

<ol>
<li>proportion</li>
<li>integrity (also have to be able to do the job they need to do and do it well)</li>
<li>Clarity (simplicity and clear)</li>
</ol>


<p>There is a balance between these three points:
if a command triggers something very powerful it violates the clarity requirement because so much is happening under the hood.</p>

<p>"Goodness is beauty in action"
It just so happens that learning how to write software better, happen to comply with the characteristics of beauty.</p>

<p>Elegance is about restraint</p>

<p>One isn't perfect and the other isn't wrong-- it's the tension between opposing sides is what makes it work. (think ying/yang &amp; star wars)</p>

<h2>Programmer of the Day</h2>

<p><em>Larry Wall:</em></p>

<ul>
<li>inventor of perl</li>
<li>optimized for human read-ability and not performance</li>
<li>modernists believe in a OR b, post-modern believe in AND ~> polymorphic interfaces</li>
</ul>


<p>Programming Virtues:</p>

<ul>
<li>laziness: build a script because we won't accept the long process of manual task</li>
<li>impatient: things that are slow, you just won't use</li>
<li>hubris: Belief in yourself to tackle a problem that no one else thinks is possible.</li>
</ul>


<h3>rsync</h3>

<p>How to move lots of files around. For moving files or music to a server since mac osx is so terrible at moving files.</p>

<h1>Ruby</h1>

<p><em>case statements</em> AKA switch it</p>

<p>case y #the condition you want to compare it against
when 3
when 2,4</p>

<p>just like y ===3
y===2 || y ===4</p>

<p>integers are immutable (so are booleans, nil, and symbols)</p>

<p><strong><em>When you have multiple branches of an if statement and you are comparing multiple values, then a case statement is probably more appropriate</em></strong></p>

<p>If statement is for controlling flow and when is for switching state.</p>

<p>?? Need to understand state</p>

<p><a href="http://worrydream.com">Brett Victor</a>.</p>

<h3>While</h3>

<p>is a ruby keyword. It's a construct, not a method.
<code>ruby While e.g.
while x&lt;10
 puts x
 x+=1
end
</code></p>

<p>```ruby building each with while
array = [1,2,3,4,5]</p>

<p>array_length = array.length
i = 0</p>

<p>def each(array, &amp;block)</p>

<pre><code>while i &lt; array_length
    yield array[i]
    i +=1
end
</code></pre>

<p>end</p>

<p>colors = ["red", "yellow", "green"]</p>

<p>each(colors) do |color|</p>

<pre><code>puts color
</code></pre>

<p>end
```</p>

<p>??I'm not getting yield</p>

<p>[array][-1] -> called a negative index</p>

<p>literal constructors</p>

<ul>
<li>[1,2,nil, nil,5]</li>
<li>""</li>
<li>{}</li>
<li>// -> regex</li>
</ul>


<p>Stopping a loop:</p>

<ul>
<li>the break keyword will exit the current loop.</li>
<li>return will break the loop but also return the value</li>
<li>next</li>
</ul>


<p>```ruby next keyword
["Billy"].each do |i|</p>

<pre><code>next if i == "Billy"
</code></pre>

<p>end</p>

<p>"a".next #=> "b"
```</p>

<p>shout.upcase -> dot notation</p>

<p>```ruby ||=
x ||= 1 #is the same as</p>

<p>if x.nil?</p>

<pre><code>x = 1
</code></pre>

<p>else</p>

<pre><code>x
</code></pre>

<p>end
```</p>

<p>```ruby Helpful methods...
.insert(position, 'insertion')
"find the w".index("w") #=> 9</p>

<p>.scan #=> returns all the matches
.match #=> returns the first it finds
```</p>

<p>?? slug def
space is considered empty?</p>

<h3>&amp;&amp; vs and</h3>

<ul>
<li>use and for joining routines</li>
<li>use &amp;&amp; for conditions</li>
</ul>


<h3>Scope</h3>

<ul>
<li>something is in scope when the context it which it was defined and used is the same</li>
</ul>


<p>scope gates: anytime when you change the scope</p>

<p>blocks are scope gates. blocks have shared scope. If defined outside the block it is accessible in the block. Whatever is defined within the block is NOT accessible outside the block.</p>

<p>Methods have exclusive scope gates: are very strict. Parameters are the way to pass in info into a method.</p>

<p>You wouldn't be able to reuse variables if you didn't have scope...</p>

<h3>Hashes</h3>

<p><code>ruby New Notation
{hello: "World"} #=&gt; {:hello =&gt; "World"}
</code></p>

<p>Can use anything has a key
weird_hash {</p>

<pre><code>[0]=&gt; "an array",
1=&gt; "number one"
"1"=&gt; "string one"
</code></pre>

<p>}
weird_hash[[0]]
weird_hash[1]
weird_hash["1"]</p>

<p><strong>variables are just pointers they are things</strong></p>

<p>we use symbols because they are immutible</p>

<ul>
<li>Nesting
In general, we don't need to go 3 levels deep.</li>
</ul>


<p><strong>Garbage collection refers to the ability to let go of memory</strong></p>

<p>When you iterate over over a hash you need to think of the :key=>value pair as one unit. Seperating doesn't make sense.</p>

<p>```ruby
alphabet = {:a => 1, :b => 2}
alphabet.each do |arr|</p>

<pre><code>arr #=&gt; [:a,1] [:a,2]
</code></pre>

<p>end
```</p>

<h3>Useful methods on arrays</h3>

<ul>
<li>.compact -> remove all nil values</li>
<li>.uniq -> uniq values only</li>
<li>.flatten -> will remove nesting from an array</li>
<li>.join() -> join with a delimiter</li>
<li>.reverse</li>
<li>.reverse!</li>
<li>.insert</li>
<li>.pop() -> the argument it accepts is number of values it pops</li>
<li>.shift -> the reverse of pop - removes the first element</li>
<li><em>.pop is to shift was unshift is to push</em></li>
<li>.slice -> does not modify the original</li>
<li>.delete() -> index position and return the value</li>
<li>.index() -> position</li>
</ul>


<p>puts method.inspect is similar to print</p>

<p><em>pop is to shift was unshift is to push</em>
<a href="https://speakerdeck.com/u/mordaroso/p/dci-and-ruby">DCI presentationn</a></p>

<p><a href="https://speakerdeck.com/u/mattyoho/p/exploiting-the-resource-idiom">resource idiom</a></p>

<p><a href="https://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-ruby-could-do">10 Things You Didn't Know Ruby Could do</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day6]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/11/fis-day6/"/>
    <updated>2012-10-11T09:46:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/11/fis-day6</id>
    <content type="html"><![CDATA[<h3>Programmer of the Day</h3>

<p>_Why the Lucky Stiff</p>

<p><a href="http://en.wikipedia.org/wiki/Nikola_Tesla">Tesla</a>:
1909 predicted the internet and wireless communication</p>

<h3>Scraping</h3>

<p><a href="http://www.andrewsturges.com/2011/09/how-to-harvest-web-data-using-ruby-and.html">Possible Workflow</a>
<a href="http://lostechies.com/rodpaddock/2011/04/11/hacking-websites-with-ruby-and-nokogiri/">NokoGiri</a>
<a href="https://github.com/luislavena/sqlite3-ruby">sqlite3</a> ruby gem</p>

<h3>Stuff I read</h3>

<p>One page script
<a href="http://coryschires.com/whats-the-difference-between-each-and-collect/">Difference between map and collect</a></p>

<p>CSS selectors are hard
<a href="http://www.w3schools.com/cssref/css_selectors.asp">need to keep this handy</a></p>

<p><em>DB prepare:</em>
If the same statement is going to be executed repeatedly, you can speed things up a bit by preparing the statement.</p>

<p><a href="http://blog.jayfields.com/2006/12/ruby-multiline-strings-here-doc-or.html">&lt;&lt;HEREDOC</a> <a href="http://blog.grayproductions.net/articles/working_with_multiline_strings">This one has some tricks in it</a></p>

<p>xpath: for very specific selectors</p>

<p><code>ruby Multi Assignment
first_name, last_name = doc.css('h1').text.split
</code></p>

<p>```ruby Symbol to proc
.map(&amp;:text)</p>

<h1>equal to</h1>

<p>.map { |e| e.text }
```</p>

<p><code>ruby .try
.try("attr", "href")
</code>
In rails, but not in the ruby library.</p>

<p>SQL sanitation:
<code>
"INSERT INTO students (tagline, bio) VALUES (?, ?)", "I'm the ruby guy", "I'm awesome")
</code>
DB drivers in SQLite3 does the sanitation.</p>

<p><code>ruby Delete DB if it exists
FileUtils.rm("database.db") if File.exists("database.db")
</code></p>

<h3>Avi's code</h3>

<p>nokogiri supports a "/div li.a" syntax, which is more common than the doc.css('div li.a')</p>

<h3>Mark Up Languages</h3>

<p>SGML -> standard generalized markup language
XML -> extensible markup language
HTML is an extension of XML.</p>

<p>dtd - document type definition
html5 is a new dtd published standards committee</p>

<h3>Ternary Operator</h3>

<p>logical expression (true or false)
this is good for the pattern:
<code>
if true (do this)
else (that)
end
</code></p>

<p>reg ex are pretty much patterns-- all languages implement them the same
Remember <a href="http://rubular.com/">rubular</a> for regular expressions (regex).</p>

<p>if you have email1 and email2 and phone1 and phone2, it's time to break out another table. Store vertically, not horizontally.</p>

<p><strong>If you see an each block with a push in it, you should be using a collect</strong></p>

<p><a href="http://www.w3schools.com/cssref/css_selectors.asp">CSS Selector</a></p>

<ul>
<li>element1~element2

<ul>
<li>(e.g. p~ul)</li>
<li>Selects every <ul> element that are preceded by a <p> element</li>
</ul>
</li>
</ul>


<h3>Homework</h3>

<p>nice <a href="http://www.skorks.com/2009/08/how-a-ruby-case-statement-works-and-what-you-can-do-with-it/">case statement reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day5]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/10/fis-day5/"/>
    <updated>2012-10-10T09:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/10/fis-day5</id>
    <content type="html"><![CDATA[<p>"Classes are state plus behavior, if you just want the behavior then use a module!"</p>

<p>```ruby This is no good: Singleton Object- class with one method on it
class Random</p>

<pre><code>def self.something
end
</code></pre>

<p>end
```
Underuse of modules...</p>

<h3>Programmer of the day</h3>

<p>Dan Bricklin</p>

<ul>
<li>inventor of the spreadsheet</li>
</ul>


<h3>Homework Review</h3>

<p>table names should be plaural (e.g.table USERS)</p>

<p>id INTEGER PRIMARY KEY -> always be called ID, is an integer and auto increments</p>

<p>'never use ruby for something SQL can do'</p>

<p>you want to group by integer values rather than string values</p>

<p>AS aliases the columns</p>

<p>subqueries- as long as a query returns one and only one value you can use that for another query</p>

<p><a href="http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html">Visual explanation of sql</a></p>

<h3>INDEXes</h3>

<ul>
<li>index a column when it is being used in columns or queries</li>
<li>should index foreign keys (they are not automatically indexed)</li>
<li>cost: everytime you add a record it has to reindex</li>
<li>indexes compromise the write speed in favor of read speed</li>
</ul>


<p>Two optimization steps:</p>

<ul>
<li>denormalize (add more columns)</li>
<li><p>index - optimize for write or read?</p>

<ul>
<li>the more indexes your keys are using the more efficient your DB will be</li>
</ul>
</li>
<li><p>You optimize the joins by denormalizing (and thus removing the need for joins) and indexing</p></li>
</ul>


<p><code>
cp -r &lt;old dir name&gt; &lt;new dir name&gt;
</code></p>

<p>update in SQL
<code>
UPDATE Persons
SET Address='Nissestien 67', City='Sandnes'
WHERE LastName='Tjessem' AND FirstName='Jakob'
</code>
<a href="http://stackoverflow.com/questions/2044467/how-to-update-two-tables-in-one-statement-in-sql-server-2005">Transaction</a></p>
]]></content>
  </entry>
  
</feed>

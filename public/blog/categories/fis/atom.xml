<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FIS | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/fis/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-11-03T13:22:14-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day19]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/11/02/fis-day19/"/>
    <updated>2012-11-02T11:57:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/11/02/fis-day19</id>
    <content type="html"><![CDATA[<h3>Virtual Attributes:</h3>

<p>There are two rails casts on this... <a href="http://railscasts.com/episodes/16-virtual-attributes-revised">#16</a> and <a href="http://railscasts.com/episodes/167-more-on-virtual-attributes">#167</a>.</p>

<h3>Rails Lecture</h3>

<p>the name attribute of the HTML determines how it is processed by the server</p>

<p>form_vars pass in the query string since it isn't in the</p>

<p>```ruby <a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions">Rack Does the Parsing</a>
Rack::Utils.parse_query "name=fred&amp;phone=0123456789"</p>

<h1>=> {"name"=>"fred", "phone"=>"0123456789"}</h1>

<p>```</p>

<p><code>ruby This is NOT mass assignment
def create
  @song = Song.new(params[:song].except(:artist_name))
  @song.artist_name = params[:song][:artist_name]
end
</code></p>

<h3>Attribute Accessbile</h3>

<ul>
<li>attr_protected is the opposite of attr_accessbile</li>
<li>attr_protected whitelists everything except the attributes that are explicitly whitelisted</li>
</ul>


<h3>Associations</h3>

<p>If it has a belongs_to -> you know it has a foreign_key that points to the table it belongs_to
If it has_many -> you know that that thing has a foreign_key that points to the parent table</p>

<p>```ruby
Song.all.collect{ |s| s.artist_name}.uniq.each do |a|
  artist = Artist.create(:name => a )
  Song.find_all_by_artist_name(a).each do |s|</p>

<pre><code>s.artist_id = a.id
s.save
</code></pre>

<p>  end
  #TODO: Refactor to use Song.update_all
end
```</p>

<p>expected Artist, but got String</p>

<p><code>ruby Assigning the artist to a song
m = Artist.create(:name =&gt; "Mike Jackson")
s.artist = m
s.save
</code></p>

<p>```ruby Use Build Not New
queen.songs.build
queen.songs.build(:name => "song name")</p>

<h1>to persist you can save queen OR you can save the song.</h1>

<p>mmm_bop.build_artist(:name => "Hanson")
```</p>

<p>has_many(name, options = {}, &amp;extension)
In the documentation the model names are replaced by the word collection. In the docs it shows all the methods that can be called on it. <a href="http://apidock.com/rails/ActiveRecord/Associations/ClassMethods/has_many">For example</a></p>

<ul>
<li>Note: collection is replaced with the symbol passed as the first argument, so has_many :clients would add among others clients.empty?.)</li>
</ul>


<blockquote><p>Build is to new, as create is to create</p></blockquote>

<ul>
<li>There is no Artist.build, but there is an Artist.create</li>
</ul>


<p>?? could you add a macro that ran a migration to add the id for the belongs_to table</p>

<h2>Seed Task</h2>

<p>The push method returns an array of all the objects in the array while the build method just returns that one song that you are building...</p>

<p>From the many it is songs.build and from the belongs it is song.build_artist</p>

<p>You can skip the save on the one to many save...</p>

<p>build is alias to new.</p>

<p>delete is for nullifying associations
destroy is for destroying objects</p>

<p>Look at end of file for clearing artists and songs.</p>

<p>```ruby Seed Task
desc "Create a bunch of seed data for artists and songs"</p>

<p>task :seed_artists_and_songs => [:environment, :clear_artists_and_songs] do
  # Build Song Off Artist
  # Given a Song called R.E.S.P.E.C.T
  # build the Aretha Franklin Artist</p>

<p>  s = Song.create(:name => "R.E.S.P.E.C.T")
  s.build_artist(:name => "Aretha Franklin")
  s.save</p>

<p>  #Create an Artist
  #Build a Song for that Artist
  #Save the Artist
  a = Artist.new
  a.songs.build(:name => "Natural Woman")
  a.save
  #from the many it is songs.build and from the belongs it is song.build_artist</p>

<p>  # Build a Song for that Artist
  # build song Natural Woman</p>

<p>  # Manually Create Artist Kanye West</p>

<p>  # Push a Song Onto an Artist
  # push a song onto Kanye West</p>

<p>  # Create Michael Jackson Artist
  # Make 3 Michael Jackson Songs
  # push all songs by Michael Jackson
  mike = Artist.create(:name => "MJ")
  mike.songs &lt;&lt; [Song.new, Song.new, Song.new]</p>

<p>  # Delete one michael song off of michael
  # Remove a Song from Artist
  mike.songs.delete(mike.songs.first) # this won't destroy the object, it will delete the association</p>

<p>end</p>

<p>task :clear_artists_and_songs => [:environment] do
  puts "Deleting all Artists and Songs...."</p>

<p>  Artist.delete_all
  Song.delete_all
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day18]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/11/01/fis-day18/"/>
    <updated>2012-11-01T13:42:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/11/01/fis-day18</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<ul>
<li><p>Edsgar Dijkstra</p>

<ul>
<li>inventor of structured programming</li>
<li>came up with "for, while, until, case"</li>
<li>computer science is not about machines and equipment management</li>
</ul>
</li>
<li><p>If you use more of a bad tool, it won't fix it.</p>

<blockquote><p>About the use of language; it is impossible to sharpen a pencil with a blunt axe. It is equally vain to try to do it with ten blunt axes instead.</p></blockquote></li>
<li><p>Programming is just about communicating clearly.</p></li>
<li>Once it is teachable it is concrete.</li>
</ul>


<h3>Ruby Tidbit</h3>

<p>```ruby Semi-Colon Deliminates a Line
def create;end</p>

<h1>the semi-colon deliminates the info on two lines</h1>

<p>```</p>

<h2>Rails Lecture</h2>

<p><code>ruby link to unless current
&lt;%= link_to_unless_current %&gt; #this is slick for nav!
</code></p>

<p><strong>Routes</strong>
```ruby Routes File
match '/name' => 'songs#name'</p>

<h1>not as specific and therefore as good as</h1>

<p>get '/name' => 'songs#name'</p>

<p>get 'site/about' #rails will assume that site is the controller and about is the action
```</p>

<p>```ruby Generate a Controller
rails generate controller CreditCard open debit credit close</p>

<h1>this will create a credit_card_controller with 4 actions</h1>

<p>```
??have to delete rm-rf public/index.html</p>

<p>```ruby Rendering Templates
class Sessions Controller &lt; ApplicationController</p>

<p>render :action
render :template</p>

<h1>in practice</h1>

<p>render 'under_construction' #this is the action in the sessions controller
render 'shared/under_construction' #this is a full relative path</p>

<h1>and more instructional of where to find the template</h1>

<p>```</p>

<h3>Private and public methods</h3>

<p>```ruby Private Method e.g.
class Dog
  def bark</p>

<pre><code>case stomach_volume
when :very
  puts "woof woof!"
when :not_at_all
  puts "woof"
end
</code></pre>

<p>  end</p>

<p>private #it would also break if this was protected.</p>

<p>  def stomach_volume</p>

<pre><code>:very
</code></pre>

<p>  end
end</p>

<p>fido = Dog.new
fido.stomach_volume #this is not going to work.
```
private, public, and protected all create keyword scope -> created limited, predicted interfaces</p>

<p>if a method is private it can only be called on an implicit receiver- can't call call on an explicit receiver</p>

<p><strong>protected</strong> -> can only be called on self.</p>

<p>```ruby When Private Methods Become Useful in the Controller
class SomeController</p>

<p>def new
  under_construction
end</p>

<p>def create
  under_constructions
end</p>

<p>private</p>

<p>def under_construction
  render 'shared/under_construction'
end</p>

<p>end
```</p>

<h3>In the migration</h3>

<ul>
<li>def change for when the reverse can be assumed</li>
<li><p>def up and down for things like renaming columns -> because rails wouldn't be able to infer what the reverse would be.</p></li>
<li><p>t.timestamps - is a created at and updated at</p></li>
</ul>


<h3>Signups</h3>

<p>when you login, you are creating a session between you and the website.
when you signup you are creating a user on their system-- that lives in their DB
<code>ruby Routes
get '/signup' =&gt; 'users#new'
post '/signup' =&gt; 'users#create'
</code></p>

<p><strong>Mass assignment => when you assign initialization properties during assingment.</strong></p>

<ul>
<li><p>Migrations</p>

<ul>
<li>define and edit schema</li>
</ul>
</li>
<li><p>Models -ORM</p>

<ul>
<li>insert rows /update</li>
<li>database</li>
</ul>
</li>
<li><p>Routes
maps URLs to actions in the controller</p></li>
<li><p>controllers</p>

<ul>
<li>contains the business logic</li>
</ul>
</li>
<li><p>views</p>

<ul>
<li>the actual interface</li>
</ul>
</li>
</ul>


<p>-> In sinatra the routes are built into controllers.</p>

<p><code>ruby This must be how form_for works
def form_for(obj, &amp;block)
  f = FormBuilder.new(obj)
  yield f
end
</code></p>

<p><em>In your controller helper...</em>
```ruby Rolling My Own Form Builder
&lt;%= form_for(@song, :builder = > SongHelper::SongForm) %></p>

<h1>in the controller helper</h1>

<p>module SongsHelper
  class SongForm &lt; ActionView::Helpers::FormBuilder</p>

<pre><code>def full_name_field
  label(:first_name) + 
  text_field :first_name

  label(:last_name) + 
  text_field :last_name
end
</code></pre>

<p>  end
end
```
Customizing the forms and encapsulate in the controller helpers...</p>

<h3>Test::Unit to RSpec</h3>

<p>change out the libraries
add rspec to the gem file
rip out test folder</p>

<p>rails g install rspec</p>

<p><a href="http://stackoverflow.com/questions/9884033/ruby-on-rails-switch-from-test-unit-to-rspec">changing from minitest to rspec</a> <a href="http://stackoverflow.com/questions/5072662/how-to-remove-unit-test-and-replace-it-with-rspec">or</a></p>

<p>"when i generated the scaffold, it generated the specs for me..."</p>

<h3>Posting Info to an object</h3>

<ol>
<li>instantiate an instance</li>
<li>collect the form data</li>
<li>and you populate the instance attribute with the proper data</li>
</ol>


<p>If I want to use form_for I need an active record instance.</p>

<h3>Read this...</h3>

<p><a href="http://guides.rubyonrails.org/v2.3.11/form_helpers.html#understanding-parameter-naming-conventions">Understand parameter naming conventions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day17andahalf]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/31/fis-day17andahalf/"/>
    <updated>2012-10-31T18:40:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/31/fis-day17andahalf</id>
    <content type="html"><![CDATA[<h3><a href="http://www.rubygeocoder.com/">Geocoder</a></h3>

<p>This gem is amazing. I can calucalate the latitude and longitude of anywhere by an address and so much more. Not surprisingly there is a great <a href="http://railscasts.com/episodes/273-geocoder">railscast</a> on the subject.</p>

<ul>
<li>Ryan Bates also suggested that I look at <a href="https://github.com/apneadiving/Google-Maps-for-Rails">Google-Maps-for-Rails</a></li>
</ul>


<h3>Authentication</h3>

<p>I had broken the authentication system in my <a href="http://gearshare.herokuapp.com/">gearshare app</a>. <a href="http://railscasts.com/episodes/241-simple-omniauth">Ryan Bates</a> to the rescue once again.</p>

<h3>Sessions Issues</h3>

<p>I was having some trouble killing the session. Avi added this code in the sessions_controller.</p>

<p><code>ruby In the sessions controller
def destroy
  session[:user_id] = nil
  reset_session #this was the key....
  redirect_to root_url, :notice =&gt; "Signed out!"
end
</code></p>

<h3>Git Rebase</h3>

<p>I also rebased a branch using the following command...
<code>
$ git rebase master
</code>
This rebased the up-to-date master underneath my branch that was ahead by a few commits, but had a broken authentication system. There is a complete explanation of this and more in the <a href="http://git-scm.com/book/en/Git-Branching-Rebasing">git book</a>.</p>

<h3>Stripe</h3>

<p>Met Richard who walked me through the <a href="https://stripe.com/">stripe</a> that makes payments silly easy. Very exciting to integrate this into the bounty open-source idea...</p>

<h3>Podcast</h3>

<p>I should start listening to this... Peter Cooper and Jason Seifer-- it's got to be pretty solid.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day17]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17/"/>
    <updated>2012-10-26T09:37:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Roy Fielding</p>

<p>HTTP- it's all about representations of data, not the data itself</p>

<p>urls are to represent a resouce. They should be stateless and you should get multiple representations of it (different data types for example).</p>

<p><a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a> is "like knocking on your neighbors' door and ask them to send a message to a guy down the street."</p>

<h3>Blogs</h3>

<p><code>ruby
User.all #=&gt; you want to return an empty array so that you can run an iteration on it.
</code></p>

<p>```ruby Refactor
def assign_artist(artist_name)
  artist = Artist.all.select{|artist| artist.name == artist_name}
  if  artist.length > 0</p>

<pre><code>  artist[0]
</code></pre>

<p>  else</p>

<pre><code>  Artist.new.tap{|artist| artist.name = artist_name}
end
</code></pre>

<p>  end</p>

<h1>can be refactored as</h1>

<p>def assign_artist(artist_name)
  Artist.all.select{|artist| artist.name == artist_name} ||
  Artist.new.tap{|artist| artist.name = artist_name}
end
```</p>

<h2>Spinning Up My First Server</h2>

<p>??swap disk space</p>

<ul>
<li><p><strong>Passenger</strong> knows how to run your app, <strong>nginx</strong> does not</p>

<ul>
<li>nginx sends your request to a Passenger instance

<ul>
<li>nginx is managing the load to Passenger</li>
<li>Passenger is actually running the application ~> managing starting up your app and serving it

<ul>
<li>it could run up to 20 instances of the app on a single server (the default is 5)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>nginx</strong> is the actual webserver. It's a piece of software that speaks HTTP, is very high performance and sits between your application and the internet.</p></li>
<li><p>The tutorial is very detailed</p>

<ul>
<li>Not on the tutorial- <a href="https://help.github.com/articles/generating-ssh-keys">adding the SSH key from the server</a></li>
</ul>
</li>
</ul>


<h3>Lessons Learned From the Server Work</h3>

<ul>
<li>Problem: So I couldn't deploy for hours... I went and reconfigured like 3 times. Renamed the name of the application and going through the nginx config file on the server. It sucked.</li>
<li>Answer: I had my database in my .gitignore file, which meant that it was in the deploy from the github. AHHHH!!! I never would have gotten that one.</li>
</ul>


<h2>Ruby</h2>

<ul>
<li><p>Opposites</p>

<ul>
<li>Enumerable#reject

<ul>
<li>Returns an array for all elements of enum for which block is false (see alsoEnumerable#find_all).</li>
</ul>
</li>
<li>Enumerable#select

<ul>
<li>Returns an array containing all elements of enum for which block is not false (see alsoEnumerable#reject).</li>
</ul>
</li>
</ul>
</li>
<li><p>Equivalent, different order for pipes</p>

<ul>
<li>Enumerable#each_with_object

<ul>
<li>Iterates the given block for each element with an arbitrary object given, and returns the initially given object.

<ul>
<li>[1, 2, 3, 4].each_with_object([]) { |element, result| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Enumerable#inject</p>

<ul>
<li>Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.

<ul>
<li>[1, 2, 3, 4].inject([]) { |result, element| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Rails</h3>

<ul>
<li>link_to is a great example of a polymorphic interface

<ul>
<li>if it receives an object (an instance of active record), it can create the correct link</li>
<li>if it receives a string it can create the correct link out of that</li>
</ul>
</li>
</ul>


<p>```ruby Routes Shortcuts
get '/about/:action' => 'about' # the action would map directly to the action in the about controller</p>

<h1>this is dangerous but only on the controller level so it would need to be controlled for there...</h1>

<p>get '/about/:action(/:company)' # this means that the company part of the url is optional
  :company => "whatever" # this additional means that "whatever" will be default value
```</p>

<p>urls that have parameters in them like songs/:genre ~> you need to pass a paramter so that it can match it ~> songs/:genre/:year needs two parameters</p>

<p><code>ruby In the view
&lt;% link_to 'Avi', avi_path("flombaum", "flatiron", :foo =&gt; "baz") %&gt; #will add parameter
</code></p>

<p>```ruby Mass Assignment
Song.new(:name => "call me maybe")</p>

<h1>intialize the song with this default attribute</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day16]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16/"/>
    <updated>2012-10-25T09:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Linus Torvalds</p>

<h2>Rails</h2>

<p>rails assigns attr_accessors</p>

<p><code>ruby Active Record Queries
song.limit(2).last #=&gt; this is the second to last song
Song.find(1)
Song.find_by_name
Song.find_by_anyattrributename
Song.find_all_by_name #=&gt; sweet
</code></p>

<h3>ORM ~> Object Relational Mapping</h3>

<ul>
<li><strong>A ruby class is to a databse table as instances of that class are to a row in that table</strong>

<ul>
<li>the form field should map to the column name</li>
</ul>
</li>
<li>activerecord's exists to accomplish CRUD</li>
<li>active record pattern <a href="http://books.google.com/books?id=FyWZt5DdvFkC&amp;lpg=PA1&amp;dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&amp;pg=PT187#v=onepage&amp;q=active%20record&amp;f=false">proposed by Martin Fowler</a></li>
</ul>


<p><code>ruby Persistence
new_song = Song.new
new_song.persisted? #=&gt; false
new_song.new_record? #=&gt; true
new_song.save
new_song.persisted? #=&gt; true
new_song.new_record? #=&gt; false
</code>
<code>ruby ORM Awareness
new_song.name = "new"
s.changed? #=&gt; true
s.changes #=&gt; {"name=&gt; ["whatever", "new"]}
s.name_changed? #=&gt; true
s.duration_changed #=&gt; false
</code>
<code>ruby
song.destroy #=&gt; will destroy the record
song.delete #=&gt; don't use this for now
</code></p>

<h3>REST</h3>

<p>Identification of a resource
Individual resources that are identified in the requests, for example using the URIs sin web-based REST systems.</p>

<p>REST- the url address should mirror the http verb and url action</p>

<ul>
<li><em>What do you mean by a representation?</em></li>
<li>these objects have different representations depending on their name</li>
<li>.xml should return the xml and .json and return the json</li>
<li>the objects should be devoid of your form until you ask for them</li>
</ul>


<h3>Routes</h3>

<p>```ruby Routes File syntax
get '/welcome' => 'application#welcome'</p>

<h1>same as ApplcationController.welcome</h1>

<p>=> {controller => 'application', :action => 'welcome'}
resources :songs #is a macro that is calling 7 methods for you
```</p>

<ul>
<li>the routes file are evaluated with lazy evaluation. Which allows you to put the most specific patterns on top and let them trickle down...</li>
<li>7 restful routes: get, create, update, delete, show, etc.</li>
<li><p><em>url endpoint</em>- the very last thing that is executed after a url request- the last application run is the action in the controller</p></li>
<li><p><strong>URL request cascade through a rails app:</strong></p>

<ol>
<li>web server gets request</li>
<li>send it through the rack</li>
<li>last stop, routes file</li>
<li>match a  route</li>
<li>request = SongContoller.new</li>
<li>response = request.index</li>
</ol>
</li>
</ul>


<p>Rails was the first to have implicit rendering...
```ruby Implicit Rendering
def index
  @index = Song.all
end</p>

<h1>this will implicitly render the index page</h1>

<h1>could also add ~> render 'artist/index' &lt;~ which will over-write the implicitly render</h1>

<h1>'artist/index' is a method called on self</h1>

<p>```</p>

<p>class variable can inherit down the inheritance tree
a class instance var is private to the class</p>

<p>```ruby
def initialize</p>

<pre><code>@songs = []
@genres = []
Artist.all &lt;&lt; self??
</code></pre>

<p>  end
```</p>

<p>VPS- Virtual Private server</p>

<p>Linux distribution - ubuntu
server - nginx
unicorn
DB- postgres</p>

<h3>Visualization</h3>

<ul>
<li>how does a partition actually work?

<ul>
<li>2 cores or 4 cores?? i don't know what a core is.</li>
</ul>
</li>
<li>hardware usually out-paces software

<ul>
<li>we have had <em>multi-core processors</em> before we had software to take advantage of it.</li>
</ul>
</li>
<li><p>vocab:</p>

<ul>
<li>slice, a box, a vps, are pretty much synonymous</li>
</ul>
</li>
<li><p>dediserve is the server we are using</p></li>
<li>RAM has fast access.</li>
<li><a href="http://vimeo.com/15882917">capistrano</a></li>
</ul>


<p>```
ssh root@96.8ipaddress</p>

<h1>will get an error saying that you can't connect</h1>

<h1>say yes</h1>

<h1>next insert your password:</h1>

<h1>create a new user instead of root</h1>

<p>useradd #to get access to instructons
man useradd
useradd -m -s /bin/bash -G sudo ajonas</p>

<h1>sudo says anyone in sudo group can use sudo adam</h1>

<h1>userdel will delete a user</h1>

<p>passwd ajonas</p>

<h1>enter password:</h1>

<p>ssh root@96.8ipaddress will get you in</p>

<p>sudo apt-get update #for updating indexes and downloading packages, like homebrew
sudo apt-get upgrade
build-apt-install build-essential</p>

<h1>install your packages with apt-get</h1>

<p>```</p>

<h3>Capistrano</h3>

<ul>
<li><p>handles your <a href="http://en.wikipedia.org/wiki/Release_management">release management</a> throw the entire code base on your server every time you deploy. Copy code off of Github or server and apply it. This will maintain revisions, roll back easily, compile the CSS in your assets. It can't happen manually.
<code>
cap deploy
</code>
will do this for you. It's script-able and automatic.</p></li>
<li><p>This is run locally.</p></li>
<li>cap is what you use to interact with capistrano from the outside (like rails new from outside a rails project)</li>
<li>capify is how you interact with the gem (like rails generate inside the project folder)</li>
</ul>


<h3>Web Servers</h3>

<ul>
<li>apache was the market leader for best of breed of web server</li>
<li><p>ngenx - can handle lots of requests and tries to stay really small</p>

<ul>
<li>has much smaller memory footprint</li>
<li>has some features that are better suited for rails</li>
<li>ngenx is also a really good load balancer</li>
<li>config file is much easier to understand than ngenx</li>
</ul>
</li>
<li><p>Four functions in the config/deploy.rb DSL</p>

<ul>
<li>set: capistrano variables</li>
<li>role:</li>
</ul>
</li>
</ul>


<h3>Further reading</h3>

<ul>
<li>backups</li>
<li>log rotations - when your log gets too big, it is going to zip it up and send it to some long term storage. The first thing hackers will do is go through the logs.</li>
</ul>


<h3>Reading in prep:</h3>

<ul>
<li>Capistrano reads its instructions from a capfile.</li>
<li>many server clusters are hidden behind NATs (Network address translation) and firewalls, to prevent direct access.

<ul>
<li>NATs - the process of modifying IP address information in IP packet headers while in transit across a traffic routing device.</li>
</ul>
</li>
<li>Tasks are the foundation of a Capistrano setup; collections of tasks are typically called Recipes.</li>
<li><p>Daemons are special system applications which typically execute continuously in the background and await requests for the functions they provide from other applications.</p></li>
<li><p><em>From lowest to highest, the layers of the internet protocol suite are:</em></p></li>
<li>The link layer (commonly Ethernet) contains communication technologies for a local network.</li>
<li>The internet layer (IP) connects local networks, thus establishing internetworking.</li>
<li>The transport layer (TCP) handles host-to-host communication.</li>
<li><p>The application layer (for example HTTP) contains all protocols for specific data communications services on a process-to-process level (for example how a web browser communicates with a web server).</p></li>
<li><p>Stateless firewalls require less memory, and can be faster for simple filters that require less time to filter than to look up a session.</p></li>
<li><p>Modern firewalls can filter traffic based on many packet attributes like source IP address, source port, destination IP address or port, destination service like WWW or FTP.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

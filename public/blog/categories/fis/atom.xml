<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FIS | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/fis/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-26T16:33:16-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day17]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17/"/>
    <updated>2012-10-26T09:37:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Roy Fielding</p>

<p>HTTP- it's all about representations of data, not the data itself</p>

<p>urls are to represent a resouce. They should be stateless and you should get multiple representations of it (different data types for example).</p>

<p><a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a> is "like knocking on your neighbors' door and ask them to send a message to a guy down the street."</p>

<h3>Blogs</h3>

<p><code>ruby
User.all #=&gt; you want to return an empty array so that you can run an iteration on it.
</code></p>

<p>```ruby Refactor
def assign_artist(artist_name)
  artist = Artist.all.select{|artist| artist.name == artist_name}
  if  artist.length > 0</p>

<pre><code>  artist[0]
</code></pre>

<p>  else</p>

<pre><code>  Artist.new.tap{|artist| artist.name = artist_name}
end
</code></pre>

<p>  end</p>

<h1>can be refactored as</h1>

<p>def assign_artist(artist_name)
  Artist.all.select{|artist| artist.name == artist_name} ||
  Artist.new.tap{|artist| artist.name = artist_name}
end
```</p>

<h2>Spinning Up My First Server</h2>

<p>??swap disk space</p>

<ul>
<li><p><strong>Passenger</strong> knows how to run your app, <strong>nginx</strong> does not</p>

<ul>
<li>nginx sends your request to a Passenger instance

<ul>
<li>nginx is managing the load to Passenger</li>
<li>Passenger is actually running the application ~> managing starting up your app and serving it

<ul>
<li>it could run up to 20 instances of the app on a single server (the default is 5)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>nginx</strong> is the actual webserver. It's a piece of software that speaks HTTP, is very high performance and sits between your application and the internet.</p></li>
<li><p>The tutorial is very detailed</p>

<ul>
<li>Not on the tutorial- <a href="https://help.github.com/articles/generating-ssh-keys">adding the SSH key from the server</a></li>
</ul>
</li>
</ul>


<h3>Lessons Learned From the Server Work</h3>

<ul>
<li>Problem: So I couldn't deploy for hours... I went and reconfigured like 3 times. Renamed the name of the application and going through the nginx config file on the server. It sucked.</li>
<li>Answer: I had my database in my .gitignore file, which meant that it was in the deploy from the github. AHHHH!!! I never would have gotten that one.</li>
</ul>


<h2>Ruby</h2>

<ul>
<li><p>Opposites</p>

<ul>
<li>Enumerable#reject

<ul>
<li>Returns an array for all elements of enum for which block is false (see alsoEnumerable#find_all).</li>
</ul>
</li>
<li>Enumerable#select

<ul>
<li>Returns an array containing all elements of enum for which block is not false (see alsoEnumerable#reject).</li>
</ul>
</li>
</ul>
</li>
<li><p>Equivalent, different order for pipes</p>

<ul>
<li>Enumerable#each_with_object

<ul>
<li>Iterates the given block for each element with an arbitrary object given, and returns the initially given object.

<ul>
<li>[1, 2, 3, 4].each_with_object([]) { |element, result| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Enumerable#inject</p>

<ul>
<li>Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.

<ul>
<li>[1, 2, 3, 4].inject([]) { |result, element| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Rails</h3>

<ul>
<li>link_to is a great example of a polymorphic interface

<ul>
<li>if it receives an object (an instance of active record), it can create the correct link</li>
<li>if it receives a string it can create the correct link out of that</li>
</ul>
</li>
</ul>


<p>```ruby Routes Shortcuts
get '/about/:action' => 'about' # the action would map directly to the action in the about controller</p>

<h1>this is dangerous but only on the controller level so it would need to be controlled for there...</h1>

<p>get '/about/:action(/:company)' # this means that the company part of the url is optional
  :company => "whatever" # this additional means that "whatever" will be default value
```</p>

<p>urls that have parameters in them like songs/:genre ~> you need to pass a paramter so that it can match it ~> songs/:genre/:year needs two parameters</p>

<p><code>ruby In the view
&lt;% link_to 'Avi', avi_path("flombaum", "flatiron", :foo =&gt; "baz") %&gt; #will add parameter
</code></p>

<p>```ruby Mass Assignment
Song.new(:name => "call me maybe")</p>

<h1>intialize the song with this default attribute</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day16]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16/"/>
    <updated>2012-10-25T09:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Linus Torvalds</p>

<h2>Rails</h2>

<p>rails assigns attr_accessors</p>

<p><code>ruby Active Record Queries
song.limit(2).last #=&gt; this is the second to last song
Song.find(1)
Song.find_by_name
Song.find_by_anyattrributename
Song.find_all_by_name #=&gt; sweet
</code></p>

<h3>ORM ~> Object Relational Mapping</h3>

<ul>
<li><strong>A ruby class is to a databse table as instances of that class are to a row in that table</strong>

<ul>
<li>the form field should map to the column name</li>
</ul>
</li>
<li>activerecord's exists to accomplish CRUD</li>
<li>active record pattern <a href="http://books.google.com/books?id=FyWZt5DdvFkC&amp;lpg=PA1&amp;dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&amp;pg=PT187#v=onepage&amp;q=active%20record&amp;f=false">proposed by Martin Fowler</a></li>
</ul>


<p><code>ruby Persistence
new_song = Song.new
new_song.persisted? #=&gt; false
new_song.new_record? #=&gt; true
new_song.save
new_song.persisted? #=&gt; true
new_song.new_record? #=&gt; false
</code>
<code>ruby ORM Awareness
new_song.name = "new"
s.changed? #=&gt; true
s.changes #=&gt; {"name=&gt; ["whatever", "new"]}
s.name_changed? #=&gt; true
s.duration_changed #=&gt; false
</code>
<code>ruby
song.destroy #=&gt; will destroy the record
song.delete #=&gt; don't use this for now
</code></p>

<h3>REST</h3>

<p>Identification of a resource
Individual resources that are identified in the requests, for example using the URIs sin web-based REST systems.</p>

<p>REST- the url address should mirror the http verb and url action</p>

<ul>
<li><em>What do you mean by a representation?</em></li>
<li>these objects have different representations depending on their name</li>
<li>.xml should return the xml and .json and return the json</li>
<li>the objects should be devoid of your form until you ask for them</li>
</ul>


<h3>Routes</h3>

<p>```ruby Routes File syntax
get '/welcome' => 'application#welcome'</p>

<h1>same as ApplcationController.welcome</h1>

<p>=> {controller => 'application', :action => 'welcome'}
resources :songs #is a macro that is calling 7 methods for you
```</p>

<ul>
<li>the routes file are evaluated with lazy evaluation. Which allows you to put the most specific patterns on top and let them trickle down...</li>
<li>7 restful routes: get, create, update, delete, show, etc.</li>
<li><p><em>url endpoint</em>- the very last thing that is executed after a url request- the last application run is the action in the controller</p></li>
<li><p><strong>URL request cascade through a rails app:</strong></p>

<ol>
<li>web server gets request</li>
<li>send it through the rack</li>
<li>last stop, routes file</li>
<li>match a  route</li>
<li>request = SongContoller.new</li>
<li>response = request.index</li>
</ol>
</li>
</ul>


<p>Rails was the first to have implicit rendering...
```ruby Implicit Rendering
def index
  @index = Song.all
end</p>

<h1>this will implicitly render the index page</h1>

<h1>could also add ~> render 'artist/index' &lt;~ which will over-write the implicitly render</h1>

<h1>'artist/index' is a method called on self</h1>

<p>```</p>

<p>class variable can inherit down the inheritance tree
a class instance var is private to the class</p>

<p>```ruby
def initialize</p>

<pre><code>@songs = []
@genres = []
Artist.all &lt;&lt; self??
</code></pre>

<p>  end
```</p>

<p>VPS- Virtual Private server</p>

<p>Linux distribution - ubuntu
server - nginx
unicorn
DB- postgres</p>

<h3>Visualization</h3>

<ul>
<li>how does a partition actually work?

<ul>
<li>2 cores or 4 cores?? i don't know what a core is.</li>
</ul>
</li>
<li>hardware usually out-paces software

<ul>
<li>we have had <em>multi-core processors</em> before we had software to take advantage of it.</li>
</ul>
</li>
<li><p>vocab:</p>

<ul>
<li>slice, a box, a vps, are pretty much synonymous</li>
</ul>
</li>
<li><p>dediserve is the server we are using</p></li>
<li>RAM has fast access.</li>
<li><a href="http://vimeo.com/15882917">capistrano</a></li>
</ul>


<p>```
ssh root@96.8ipaddress</p>

<h1>will get an error saying that you can't connect</h1>

<h1>say yes</h1>

<h1>next insert your password:</h1>

<h1>create a new user instead of root</h1>

<p>useradd #to get access to instructons
man useradd
useradd -m -s /bin/bash -G sudo ajonas</p>

<h1>sudo says anyone in sudo group can use sudo adam</h1>

<h1>userdel will delete a user</h1>

<p>passwd ajonas</p>

<h1>enter password:</h1>

<p>ssh root@96.8ipaddress will get you in</p>

<p>sudo apt-get update #for updating indexes and downloading packages, like homebrew
sudo apt-get upgrade
build-apt-install build-essential</p>

<h1>install your packages with apt-get</h1>

<p>```</p>

<h3>Capistrano</h3>

<ul>
<li><p>handles your <a href="http://en.wikipedia.org/wiki/Release_management">release management</a> throw the entire code base on your server every time you deploy. Copy code off of Github or server and apply it. This will maintain revisions, roll back easily, compile the CSS in your assets. It can't happen manually.
<code>
cap deploy
</code>
will do this for you. It's script-able and automatic.</p></li>
<li><p>This is run locally.</p></li>
<li>cap is what you use to interact with capistrano from the outside (like rails new from outside a rails project)</li>
<li>capify is how you interact with the gem (like rails generate inside the project folder)</li>
</ul>


<h3>Web Servers</h3>

<ul>
<li>apache was the market leader for best of breed of web server</li>
<li><p>ngenx - can handle lots of requests and tries to stay really small</p>

<ul>
<li>has much smaller memory footprint</li>
<li>has some features that are better suited for rails</li>
<li>ngenx is also a really good load balancer</li>
<li>config file is much easier to understand than ngenx</li>
</ul>
</li>
<li><p>Four functions in the config/deploy.rb DSL</p>

<ul>
<li>set: capistrano variables</li>
<li>role:</li>
</ul>
</li>
</ul>


<h3>Further reading</h3>

<ul>
<li>backups</li>
<li>log rotations - when your log gets too big, it is going to zip it up and send it to some long term storage. The first thing hackers will do is go through the logs.</li>
</ul>


<h3>Reading in prep:</h3>

<ul>
<li>Capistrano reads its instructions from a capfile.</li>
<li>many server clusters are hidden behind NATs (Network address translation) and firewalls, to prevent direct access.

<ul>
<li>NATs - the process of modifying IP address information in IP packet headers while in transit across a traffic routing device.</li>
</ul>
</li>
<li>Tasks are the foundation of a Capistrano setup; collections of tasks are typically called Recipes.</li>
<li><p>Daemons are special system applications which typically execute continuously in the background and await requests for the functions they provide from other applications.</p></li>
<li><p><em>From lowest to highest, the layers of the internet protocol suite are:</em></p></li>
<li>The link layer (commonly Ethernet) contains communication technologies for a local network.</li>
<li>The internet layer (IP) connects local networks, thus establishing internetworking.</li>
<li>The transport layer (TCP) handles host-to-host communication.</li>
<li><p>The application layer (for example HTTP) contains all protocols for specific data communications services on a process-to-process level (for example how a web browser communicates with a web server).</p></li>
<li><p>Stateless firewalls require less memory, and can be faster for simple filters that require less time to filter than to look up a session.</p></li>
<li><p>Modern firewalls can filter traffic based on many packet attributes like source IP address, source port, destination IP address or port, destination service like WWW or FTP.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day15]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/fis-day15/"/>
    <updated>2012-10-24T09:41:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/fis-day15</id>
    <content type="html"><![CDATA[<p>Refactoring ruby by Jay Fields</p>

<h3>POTD</h3>

<p>Apache - most popular web server that powers 57% of the internet
68% of the top 100 sites use apache</p>

<p>LAMP - linux, apache, mysql, php</p>

<p><a href="http://en.wikipedia.org/wiki/User:Hobart/Robert_McCool">Rob McCool</a></p>

<p>Named after Apache Native American tribe and also "A patchy server"</p>

<p><a href="http://code.google.com/p/codeswarm/">code_swarm</a></p>

<h3>Code Review</h3>

<p>CLI-
The only thing that should be rescued are exceptional errors...
- rescuing a non-exceptional search item.
<code>ruby
begin
  # runs the code
rescue
  #resuces an error
end
</code></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Defensive_programming">defensive programming</a></li>
<li><a href="http://eimers.blogspot.com/2008/02/reflection-vs-introspection.html">introspection</a> - look in the DB and see what attributes I have</li>
<li>when something changes, you just need to trickle that change to a bunch of different places.</li>
</ul>


<p>```
PRAMA table_info(students);</p>

<h1>returns the headers of the table</h1>

<p>```</p>

<h3>Debugger</h3>

<p>gives you debugger prompt- type irb which will allow you to drop into IRB with the objects all ready loaded</p>

<h3>Methods</h3>

<ul>
<li><p>??inject() do |incrementer, another param|</p>

<ul>
<li>it is the result of the block that keeps getting passed along.

<ul>
<li><h1>needs review</h1></li>
</ul>
</li>
</ul>
</li>
<li><p>??each_with_object</p>

<ul>
<li>This needs review, passes in the object as the second argument, inject is the first. There is little diff other than that.</li>
</ul>
</li>
<li><p>send(string_or_a_symbol, data[i])</p></li>
</ul>


<h3>Code Review</h3>

<p><a href="http://masonry.desandro.com/">jquery masonry</a></p>

<p>dynamic dispatching</p>

<p><strong>use the database to find stuff for you, not ruby</strong></p>

<p>raw_results</p>

<p>```ruby Send method example
def self.new_from_db(raw_results)
  Programmer.new.tap do |p|</p>

<pre><code>raw_results.each_with_index do |a,i|
  p.send("#{a}=", a[i]) #name of the attribute, value of the attribute
end
</code></pre>

<p>  end
end
```
<strong>program with the initialize method or better yet, build on top of the new object</strong></p>

<ul>
<li><p>drop db or just drop table? USE: database cleaner gem- drop the data (truncate it)</p></li>
<li><p>the .included method at the bottom of the module is like a callback or hook</p></li>
</ul>


<h2>Rails Lecture</h2>

<ul>
<li><p>the rails command inside the the rails app folder is very different than outside the folder...</p></li>
<li><p>bundler - we call it a bundle, because it is a bundle of dependencies</p></li>
<li><p>all ruby web applications will respond to a rack application...</p></li>
<li>ActiveRecord is for relational databases (not MongoDB for example)</li>
</ul>


<h3>MVC</h3>

<p>Models are our objects the CRUD
<strong>Models are always SINGULAR</strong></p>

<p>Controller are about ferrying data from one place to another-> just business logic</p>

<p>Views are display logic -> present data</p>

<h3>Other Files</h3>

<p>lib dir:</p>

<ul>
<li>for any modules that made my classes autocompletable for all songs and users</li>
<li> anything that isn't part of the request cycle</li>
</ul>


<p>Public dir:</p>

<ul>
<li>whatever you put in the public dir will automatically be served (that is why it worked in sinatra)</li>
</ul>


<h3>Resources</h3>

<p>a resource means that you have a model, controller, and a view</p>

<h3>Migrations</h3>

<p>apply any migrations all changes that have not been previously been uncommitted
<code>
rake db:migrate
</code>
rake is included in the standard library</p>

<h3>TDD</h3>

<p><a href="/blog/2012-10-24-test-driven-development">see</a></p>

<h3>Ruby</h3>

<p>```ruby Hash.new
@item = Hash.new(0)</p>

<h1>when something is instantiated its value will be 0</h1>

<p>@item = {0}
```</p>

<p>"anytime you see a private method you see a new class yearning to be born"</p>

<p><code>ruby Ruby Magic
[1,2,3] &amp; [3,4,5] #=&gt; [3]
[1,2,3] | [3,4,5] #=&gt; [1,2,3,4,5]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 reasons to quit your job and learn to code]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/3-reasons-to-quit-your-stupid-job-and-learn-to-code/"/>
    <updated>2012-10-23T13:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/3-reasons-to-quit-your-stupid-job-and-learn-to-code</id>
    <content type="html"><![CDATA[<p>In the first five minutes of my first programming class I knew I was in trouble. I didn't know what a method was. I didn't know what an array was. My teacher babbled on about controllers and TCP packets as I nervously glanced around wondering if I was the only with that terrible pit in my stomach.</p>

<p>After class, I went up to <a href="http://flatironschool.com/#people">Avi</a> and told him of my situation. He offered two choices: a refund <strong><em>or</em></strong> I could push through and take the class as many times as needed. At this point, I don't think I'll be getting my money back...</p>

<p><a href="http://www.flickr.com/photos/adambindslev/4804939869/sizes/m/in/photostream/"><img class="right" src="/images/bored.jpg" width="250" title="Don't be Boring" ></a></p>

<h2>Why you should consider a change</h2>

<p><strong>1. You probably aren't very happy with your job.</strong>
There are lots of people who are perfectly happy with their jobs. The chances are, you aren't one of them. I can't believe how many of the people in my life complain about something they spend a minimum of 8 hours a day doing. Few take action to make a change. Don't let your future be defined by inaction.</p>

<p><strong>2. Tech is about as close to a meritocracy as you are going to find.</strong>
Unless you are the beneficiary of exceptional privilege, you probably wish that people would judge you on your merits rather than your: race, origin, sexual orientation, gender, hairstyle, or the color of your socks. In tech, people actually care about your skills. One's pedigree means little in the absence of substance. It is how life should be. The best teacher <em>should</em> get paid the most. The best actors <em>should</em> get the leading roles. The best candidate <em>should</em> get the job. In tech, this <em>actually</em> happens.</p>

<p><strong>3. You don't have to be a leecher anymore...</strong>
Since my Dad first popped in that AOL floppy disk around 1995, I have been a consumer of the internet. I've sucked down untold hours of <a href="http://mlb.com">baseball news</a> and <a href="http://gawker.com/5952338/had-a-ruff-day-this-dog-video-is-guaranteed-to-improve-your-mood">dog videos</a>. <a href="http://www.flickr.com/photos/alanchan/"><img class="right" src="/images/aoldisk.jpg" width="250" title="AOL Floppy" ></a> I've used web applications to communicate with my family, conduct business, and plan my social life. I've logged onto the internet nearly every day of the second-half of my life. I decided last year that I was done being a suck on the system. <a href="http://mldraft.com">Mldraft</a> was my first attempt to contribute something and it wasn't great. The experience did, however, fundamentally change my perspective on being a consumer. I'll be a leecher no more and neither should you.</p>

<blockquote><p>"The time for ideas is over."  - <a href="https://twitter.com/dhh">Joseph Devenuta, Flatiron School '12</a></p></blockquote>

<p>There are so many resources to get started. There are limitless <a href="/blog/2012/10/10/code-school-vs-treehouse-vs-code-academy/">online tutorials</a> and <a href="http://www.meetup.com/nyc-on-rails/">Meetups</a>. You don't need to be a math whiz or a hermit to be a programmer. If you have ever learned a foreign language; if you have ever spent hours at a time mastering a song on guitar; if you have ever spent a full afternoon improving your free-throw you can learn to code. <a href="http://www.youtube.com/watch?v=4npR4QZp_5M">Do it.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day13]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13/"/>
    <updated>2012-10-21T19:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13</id>
    <content type="html"><![CDATA[<blockquote><p>"It is much easier to optimize correct code than it is to correct optimized code."</p></blockquote>

<h3>POTD Uncle Bob</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Robert_Cecil_Martin">Wikipedia</a></li>
<li><a href="http://agilemanifesto.org/">Agile manifesto</a></li>
</ul>


<h3>Nate Westheimer</h3>

<ul>
<li>? What kind of startups would you like to work at?</li>
<li>? Since we are starting with a blank slate, what would you spend your time learning? Mobile? What skills will ensure you will be valuable for the next few years?</li>
<li>? why choose mysql over other db options, how do you make other architectural decisions since you may not have a bird's eye view?</li>
<li>? controlling feature creep - where i live based on the photos-- necessary? A: intuition</li>
</ul>


<p><strong>Mentions:</strong></p>

<ul>
<li><a href="http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html">comparing pictures</a></li>
<li>imagemagick- gem for manipulating photos</li>
<li><a href="http://stu.mp/2004/06/a-quick-bitmask-howto-for-programmers.html">bit mask</a></li>
<li>vertical color palette is spits out top 5 colors out my <a href="http://www.imagemagick.org/script/index.php">imagemagick</a></li>
<li><a href="http://www.merbivore.com/">merb</a>- a product people love because it's simple</li>
<li><a href="http://digital-photography-school.com/using-exif-data">exif</a> data in the photos</li>
<li><a href="http://www.amazon.com/iWoz-Computer-Invented-Personal-Co-Founded/dp/0393330435/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1350920465&amp;sr=1-1&amp;keywords=iwoz">IWOZ</a> by Steve Wozniak</li>
<li><a href="http://www.amazon.com/Soul-New-Machine-Tracy-Kidder/dp/0316491977">soul of the new machine</a></li>
</ul>


<h3>TDD</h3>

<p>Setup and tear down methods come with every test suite.</p>

<ul>
<li>CLI application for the dynamic</li>
<li>test the job board classes, using SQL joins-- class called job and a class called company</li>
<li>test the student class in the dynamic site</li>
<li>focus on Sinatra- put a front end on the job board</li>
<li>find what they scraped and build an end all be all of job scrapers.</li>
</ul>

]]></content>
  </entry>
  
</feed>

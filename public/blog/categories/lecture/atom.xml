<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lecture | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/lecture/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-07-23T09:27:57-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lecture 5- Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails/"/>
    <updated>2012-07-22T14:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails</id>
    <content type="html"><![CDATA[<p>Rails Lecture 4- July 22</p>

<p>In the migration:
``` ruby In the migration
def change
  add_column :songs, :album_id, :integer</p>

<h1>should probably make the below code in the rake tasks (in seed/tasks)</h1>

<p>  songs = Song.all</p>

<p>  songs.each do |s|</p>

<pre><code>album= Album.find_or_create_by_name(s.album_name.string)
#update those songs to relate to that album
puts "UPdating song #{s.id} to album #{album.id}..."
s.album= album
s.save
</code></pre>

<p>  end
  remove_column :songs, :album_name
 end
end
```</p>

<p>Some other methods:</p>

<p>find_each method: look it up in guides <a href="http://guides.rubyonrails.org/active_record_querying.html">here</a>.
find_each yields each individual object one at a time
find_in_batches it yields songs</p>

<p>in the seeds file:
``` ruby Examples
aretha = Song.create :name => "Aretha Franklin"
respect = aretha.songs.build :name => "Respect"
aretha.save</p>

<h1>many to one, the reverse of above</h1>

<p>monster = Song.create :name => "Monster"
monster.build_artist name => "Kanye West"
monster.save</p>

<p>aretha.songs &lt;&lt; Song.new(:name => "Natural Woman")</p>

<h1>unintentional performance issue here because it loads the full array</h1>

<h1>in order to push one song into it</h1>

<p>kanye = Artist.find_by_name => "Kanye West"
kanye.songs &lt;&lt; Song.new(:name => "Home")</p>

<p>michael = Artist.create :name => "Michael Jackson"</p>

<p>michael.songs &lt;&lt; ("Black and white", "Thriller", "beat it").collect do |song_name|</p>

<h1>need collect instead of each method b/c need the return</h1>

<p>  song.create :name => song_name
end</p>

<p>michael.songs.delete(Song.find_by_name("Black and white", "Thriller", "beat it"))
end
```</p>

<p>This will output the log output of the rake tasks:
<code>
tail -f log/development.log
</code></p>

<p>update the forms in the application (2:50)</p>

<p>Shortcut: cmd D shortcut to highlight similar words to edit</p>

<p>errors:
when you get a stack trace and it's part of rails you can ignore it because you created the file NOT rails.</p>

<h3>has_many :through### (2:58)</h3>

<p>artists have many albums through their songs
- a many to many association</p>

<p>if a model has 2 :belongs_to associations means that it is a join table
even though it is a join model is has all the same behaviors as a has_many assoc</p>

<p>INNER JOIN is SQL:
The INNER JOIN keyword return rows when there is at least one match in both tables.</p>

<h3>Foreign Key/ belongs_to RULE</h3>

<p>if it belongs_to xyz it is a foreign key. if it is a foreign key than it belongs_to xyz.</p>

<p>``` ruby Seeds File from the lab
  avi = User.create :name => "Avi"
  favorites = Mixtape.create :name => "Avi's favs"</p>

<p>  avi.mixtapes &lt;&lt; favorites</p>

<p>  black_and_white = michael.songs.first
  black_and_white.genres.build #when it's a many it is genres.build
  #singular is build_genre
  black_and_white.save</p>

<p>  favorites.songs &lt;&lt; black_and_white
  favorites.mixtape_songs.build :song => Song.find_by_name("Thriller")
  #(4:34)
  #if you understand :belongs_to and has_many it doesn't matter if it's a :through</p>

<p>  UserMixtape.create(</p>

<pre><code>:user =&gt; User.create(:name =&gt; "Roland"),
:mixtape =&gt; favorites
)
</code></pre>

<p>```</p>

<h3>Forms</h3>

<p><strong>How do we build forms that give users the same abilities we have through forms?</strong>
If a field name end in an [], it will allow multiple fields and rails will treat it as unique values and glob them together in a params array (4:46)
- If you want to have multiple fields anem it with an empty array</p>

<p>in the mixtapes_controller
``` ruby
@mixtape.songs &lt;&lt; Song.find(params[:song_ids])</p>

<h1>this would also work</h1>

<p>params[:song_ids].each do |song_id|
  @mixtape.mixtape_songs.build :song => song_id
end</p>

<p>Next level of abstraction up... (4:55)
in the html we want to pass in:
mixtape[song_ids][]</p>

<p>Mass assignment is this accordian of
a writer method implies an attribute of a model
<strong>Main goal as a programmer</strong> name your data so that it is easily accessbile in params</p>

<p>TODO (5:03)
HTML:
scope, attribute, attribute kind</p>

<h3>form_tag helper</h3>

<p>NEXT: <em>A rails implementation: form_tag helper</em>, a low level rails helper
all these methods do is generate html for you. not all that railsy.
<code>
&lt;%= form_tag mixtapes_path do %&gt;
</code>
At least we aren't writing HTML here now... this level of implementation gives you lots of flexibility and control but at the expense of maintainability and explicitness.</p>

<h3>form helper builders</h3>

<p><em>html, form_tag helpers family, form helpers in order of low level of abstraction to higher</em>
want to bind the active record object to the form element
e.g. text_field, label
(5:17)
<code>ruby
&lt;%= label :mixtape, :name %&gt; #:mixtape represents @mixtape, but rails doesn't support @mixtape
&lt;%= text_field :mixtape, :name %&gt;
</code></p>

<h3>form_for</h3>

<p>We want to bind the instance var to the form itself
- the problem with text_field is that hte form is still built without any knowledge of the active record instance behind the form --> it should be an extension of the object
- these are the way our scaffolds normally work</p>

<p>form_for method yields a form builderthat knows the model the form is about</p>

<p>mixtape_form.object would return the mixtape object because it has knowledge of the form object</p>

<p>you also get access to <em>fields_for</em> -
<code>ruby
mixtape_form.fields_for :mixtape_songs, @mixtape.mixtape_songs.build, :index =&gt; 0 do
|mixtape_songs_field| #index option will increment them automatically
  mixtape_songs_fields_for.label :song_id
  mixtape_songs_fields_for.text_field :song_id
 end
</code>
Does your model implement a method called "mixtape_songs_attributes="
``` ruby
accepts_nested_attributes_for :mixtape_songs</p>

<h1>builds this method:</h1>

<p> def mixtape_songs_attributes=(attributes)
   attributes.each do |attribute_has|
   MixtapeSong.build.attribute_has
 end</p>

<h1>this assigns the attributes of the mixtape_songs</h1>

<h1>this is the same as</h1>

<p>def mixtape_songs_attributes=(attributes)
   attributes.each do |index, mixtape_song_attributes|</p>

<pre><code> MixtapeSong.new :song_id = mixtape_song_attributes[:song_id]
</code></pre>

<p>   end
end
```</p>

<p><a href="http://masonoise.wordpress.com/2010/07/23/rails-and-forms-using-accepts_nested_attributes_for/">Read</a>
<a href="http://railscasts.com/episodes/196-nested-model-form-part-1">railscast</a>
<a href="http://asciicasts.com/episodes/196-nested-model-form-part-1">ascii casts</a></p>

<p><strong>an attribute has a getter and setter method called the name of the attribute</strong></p>

<p>Rails Casts on this subject:
<a href="http://railscasts.com/episodes/47-two-many-to-many/">Many to Many</a></p>

<p><a href="http://railscasts.com/episodes/73-complex-forms-part-1/">Complex Forms - 1</a></p>

<p><a href="http://railscasts.com/episodes/74-complex-forms-part-2/">Complex Forms - 2</a></p>

<p><a href="http://railscasts.com/episodes/75-complex-forms-part-3">Complex Forms - 3</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested models 1</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-revised">Nested Models- revised</a></p>

<p>http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Lecture 4]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/18/ruby-lecture-4/"/>
    <updated>2012-07-18T19:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/18/ruby-lecture-4</id>
    <content type="html"><![CDATA[<p>Programmer of the day:
Alan Kay</p>

<h3>Object Orientation</h3>

<p>once you have a user class, you can send it a message
once you have a class you can teach the class how to do things like authenticate a user</p>

<h3>Review</h3>

<p>iteration: going through many things one at a time
we refer to that character one at a time, as the iterator or yield</p>

<p>.inspect allows you to look at an object that</p>

<p>common to have nested iteration-- iterate through them, by looping through enumerables within a loop</p>

<p>Iterating a hash you get yielded two variables at once, the key first and the value second</p>

<p>``` ruby
alphabet = {:a => 1, :b => 2}</p>

<p>alphabet.each do |key, value|
  puts "#{key} is the #{value} letter"
end
```</p>

<p>.compact will get rid of any nil values
.uniq will get rid of duplicates</p>

<p>! methods will change the data set forever...</p>

<p>.flatten will remove nesting from an array-- will flatten all elements in array
.reverse elements in the array</p>

<p>side note: python believes there is one way to do something. Ruby believes there should be many ways to do it so that you can be more expressive.</p>

<p><code>ruby ordinalize is a integer method
1.ordinalize     # =&gt; "1st"
2.ordinalize     # =&gt; "2nd"
1002.ordinalize  # =&gt; "1002nd"
</code></p>

<p>``` ruby multiple_of?(number)</p>

<h1>Check whether the integer is evenly divisible by the argument.</h1>

<p>0.multiple_of?(0)  #=> true
6.multiple_of?(5)  #=> false
10.multiple_of?(2) #=> true
```</p>

<p>Lab solution (8PM)</p>

<p>hash structure with root or without root TODO</p>

<p>.detect, .select and .reject methods are all useful array elements</p>

<p>class CONSTANTS are really good for storing data about the class</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby lecture 3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/17/ruby-lecture-3-july-16/"/>
    <updated>2012-07-17T22:50:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/17/ruby-lecture-3-july-16</id>
    <content type="html"><![CDATA[<p>Programmer of the day:
Kent Beck</p>

<p>FizzBuzz
solutions on ?ruberque?</p>

<p>TDD: able to write the code that you wish you had</p>

<h3>Array Review:</h3>

<p><code>ruby
empty[0] = "filled" #=&gt; can assign slots one at a time
easy_as[1, 5] #=&gt; can slice elements off, have elastic arrays --&gt; can add elements to an array without doing anything else
</code></p>

<h3>Lecture:</h3>

<p>Object orientation- we send object methods
important to identify who the receiver is and what the method is
part of dot notation: every method returns an object, so you can chain another method on it
it's the return of the previous method that is the receiver for the following method</p>

<p>the strip method is part of the family of normalization</p>

<p>gsub = global substitution
sub will only replace the first occurrence it encounters</p>

<p>== is the same as eql method</p>

<p>methods that end with question marks --> the ? is part of the method name that indicates it returns a boolean value</p>

<p>strings like arrays can be sliced</p>

<p>match accepts a pattern of REGEX
  -the string literal for patterns are /a/e/i/o/u
  -check <a href="http://rubluar.com">http://rubluar.com</a></p>

<p><strong>Iteration</strong> is a fancy word for looping</p>

<p>anything that can iterated upon is described as an <em>enumerable</em>
strings and arrays are enumerables</p>

<p><strong>Scope</strong></p>

<p>scope gates -- every time you see a 'do', 'end', 'def' keyword your scope changed.</p>

<p>blocks have an exclusive scope. If it is defined in that block and only in that block it is accessible for the outside.
method scopes are even stricter. cannot access method outside of that particular method.
parameters are how you pass in values into a method.</p>

<p>2nd program- (8:25- 8:35)
artist, album, song sorting</p>

<p><em>first step in a program is usually to set up state</em></p>

<p><strong>More Data Types</strong>
<em>Hashes</em> a lot like an array in that it is a collection object. An array is only indexed, so you can only refer to the objects within the array by its position</p>

<p><em>Literal Constructors:</em></p>

<p>"" - strings</p>

<p>/ - REGEX</p>

<p>[] - array</p>

<p>{} - hashes</p>

<p>: - symbols</p>

<p>Hashes are valuable when you care about the meta data</p>

<p>every time you create a new string, it creates a new object in memory
a symbol is an immutable object
``` ruby
vending machine {</p>

<pre><code>a: =&gt; ["snickers", "twix", "kit kat"]
</code></pre>

<p>}
puts vending_machine[:a][0] #=> this accesses the :a key and the 0th position of the array which is the value
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 3- July 15]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15/"/>
    <updated>2012-07-16T16:06:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15</id>
    <content type="html"><![CDATA[<p><strong><em>Rails Lecture 3- July 15</em></strong></p>

<p>why use 'get' instead of 'match' in the routes file?
-bc want to use http verbs to be more specific
-match is more vague, you should generally use specific verbs</p>

<p><code>
rake routes CONTROLLER=SESSIONS
</code>
will narrow output</p>

<p>```
render :action => 'under_construction' #=> relative to the current controller
render :template => 'shared/under_construction' #=> doesn't assume it is in the current views folder</p>

<h1>under the class name</h1>

<p>render 'shared/under_construction' #=> these 3 work the same now
```</p>

<p><strong>Private Methods</strong>(2:40)
- about what object the receiver is on the method called-- private methods can only be called on implicit receivers
- a way to control scope
- anything that is not an action, that isn't an endpoint of a route should be private</p>

<p>routes: bridge between the browser, specifcially URLs, and the app</p>

<p>Polymorphic Interface(2:50)
The link_to method--> accepts two parameters. the first is the name of the link as a string, the second is the string that it just uses it as a href
-> if I send it an instance of active record, it's behavior will change ==> it will become intelligent and it will understand that it is an instance of active record</p>

<p><strong>Lecture</strong> (2:55)</p>

<p>anything that starts with an underscore '_form.erb.html' for example is a snippet of code that is reused on multiple templates</p>

<p>form_for(@song) --> knows whether the song is new or should be updated... obviously different verbs are required for those diff actions</p>

<p><code>ruby Form Helpers (3:09)
form_for(@song)
f.textfield :artist_name #=&gt; this will break if there is not a artist_name method for the song class in the controller
</code></p>

<p>``` ruby
def create</p>

<pre><code>@song = Song.new(param[:song]) 
# this line instantiates a New Song
# collects the data
#assigning the data to the correct attribute
</code></pre>

<p> #the params[:song] lines does the last two steps
end
```</p>

<p><strong>Params</strong> (3:20)
params looks and behaves like a hash
its a nested hash</p>

<p>``` ruby Assigning a name
@song.name = params[:song][:name] #but this happens during the following line of code:</p>

<p>@song = Song.new(param[:song]) # this happens using mass assignment!
```</p>

<p><code>ruby Manually Assigning the Name
input type ="text" name="song[name]" #this looks like the key of the params hash ==&gt; params[:song][:name]
</code></p>

<p>(3:50) Nested hash testing</p>

<p><code>ruby Query string (3:57)
mldraft.com?person[name]=adam&amp;person[email]=adam@mldraft.com
</code>
Can access the params hash in the same way as the form. So params[:person][:name] will equal adam</p>

<p>Mass Assignment Vulnability (4:05)
- attr_accessible is a whitelist approach versus attr_protected which is a black list approach
- this has nothing to do with the attr_accessor, reader, or writer</p>

<p>Virtual attributes don't persist to the database</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 2 Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/08/lecture-2-rails/"/>
    <updated>2012-07-08T14:21:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/08/lecture-2-rails</id>
    <content type="html"><![CDATA[<p><strong><em>Lecture 2</em></strong></p>

<p>BASH
<code>
cd .. # change to up a directory
cd . # change to current directory
ls # list
cd ~ #home directory
</code></p>

<p><strong><em>Resources</em></strong>
- the thing you want to let users manipulate
<code>
rails generate resource Mixtape nae:string
</code></p>

<p>Rake-
a ruby language for running scripts</p>

<p>Models-
main component of your application, they represent the resources of your application
every model is just a ruby class definition located in the model</p>

<p>so the mixtape model defines a class Mixtape that is the object that will allow our app to CRUD mixtapes</p>

<p>If we a Users model we have a users table</p>

<p>Goal for today is to understand the request cycle</p>

<p><strong><em>Routes</em></strong></p>

<p><strong><em>DSL- Domain Specific Language</em></strong> (3:08PM)
``` ruby
match '/foo' => 'songs#foo' # this needs to be sent to a controller</p>

<h1>a songs controller with the foo action</h1>

<p>```
we need to find something that can handle the route--> we want to send it to a waiter, like ordering an A7 at a chinese resturant</p>

<p><strong>an ACTION is just a method defined in the class!!</strong>
a Controller is just a class --> a grouping that relates to songs</p>

<p>if it can't find a page it is 404</p>

<p>every action in the app needs to be defined</p>

<p>5 keywords available...
MATCH
GET
POST
PUT
DELETE</p>

<p>cmd T --> opens a window for you to access files</p>

<p><strong><em>rake routes:</em></strong>
first column is the request
second is http verb
third is url or pattern
fourth is the contoller#action</p>

<p>resources macro- defines all the restful actions for the resource</p>

<p>?? so what was the main problem with the post request?</p>

<p><strong><em>Controllers &amp; #actions </em></strong></p>

<p>``` ruby e.g. of actions in the Songs controller
def name
  render :template => 'songs/name' #explicit template rendering
end</p>

<h1>exactly the same as this...</h1>

<p>def name
end
```</p>

<p><code>ruby Renders
render :action =&gt; "name" # in the views folder named after the controller
render :template =&gt; 'songs/name' # need to specify the full path
render :xml
render :json
</code></p>

<p>Video 2 starts 4PM
diff between &lt;% and =&lt;%
&lt;% will get executed, but will not show in the html
&lt;%= will get executed and will also show in the html</p>

<p><strong><em> Instance variables </em></strong>
Instance variables are the only thing passed from the controller to the views
??? do class variables get passed as well?</p>

<p><strong>link_to</strong>
<code>ruby
&lt;%= link_to 'Search', 'http://google.com' %&gt;
</code>
we have two methods <em>path and </em>url</p>

<p><code>ruby e.g. of link_to
&lt;%= link_to 'Show', 'song' %&gt; #polymorphic interface
</code></p>

<p>3 pars of rails (4:10 PM)
ORM- active record
Action controller
Action view</p>

<p>LEARN MORE: there are lots of polymorphic interfaces play nicely with active record</p>

<p><code>ruby automatic routing with namespacing with_options
with_options :controller =&gt; 'site' do |s|
  s.get 'about'
  s.get 'home'
end
</code></p>
]]></content>
  </entry>
  
</feed>

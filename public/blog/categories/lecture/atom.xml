<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lecture | Documenting all this...]]></title>
  <link href="http://ajonas.heroku.com/blog/categories/lecture/atom.xml" rel="self"/>
  <link href="http://ajonas.heroku.com/"/>
  <updated>2012-07-16T16:50:43-04:00</updated>
  <id>http://ajonas.heroku.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lecture 3- July 15]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/16/lecture-3-july-15/"/>
    <updated>2012-07-16T16:06:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/16/lecture-3-july-15</id>
    <content type="html"><![CDATA[<p><strong><em>Rails Lecture 3- July 15</em></strong></p>

<p>why you 'get' instead of 'match' in the routes file?
-bc want to use http verbs to be more specific
-match is more vague, you should generally use specific verbs</p>

<p><code>
rake routes CONTROLLER=SESSIONS
</code>
will narrow output</p>

<p>```
render :action => 'under_construction' #=> relative to the current controller
render :template => 'shared/under_construction' #=> doesn't assume it is in the current views folder</p>

<h1>under the class name</h1>

<p>render 'shared/under_construction' #=> these 3 work the same now
```</p>

<p><strong>Private Methods</strong>(2:40)
- about what object the receiver is on the method called-- private methods can only be called on implicit receivers
- a way to control scope
- anything that is not an action, that isn't an endpoint of a route should be private</p>

<p>routes: bridge between the browser, specifcially URLs, and the app</p>

<p>Polymorphic Interface(2:50)
The link_to method--> accepts two parameters. the first is the name of the link as a string, the second is the string that it just uses it as a href
-> if I send it an instance of active record, it's behavior will change ==> it will become intelligent and it will understand that it is an instance of active record</p>

<p><strong>Lecture</strong> (2:55)</p>

<p>anything that starts with an underscore '_form.erb.html' for example is a snippet of code that is reused on multiple templates</p>

<p>form_for(@song) --> knows whether the song is new or should be updated... obviously different verbs are required for those diff actions</p>

<p><code>ruby Form Helpers (3:09)
form_for(@song)
f.textfield :artist_name #=&gt; this will break if there is not a artist_name method for the song class in the controller
</code></p>

<p>``` ruby
def create</p>

<pre><code>@song = Song.new(param[:song]) 
# this line instantiates a New Song
# collects the data
#assigning the data to the correct attribute
</code></pre>

<p> #the params[:song] lines does the last two steps
end
```</p>

<p><strong>Params</strong> (3:20)
params looks and behaves like a hash
its a nested hash</p>

<p>``` ruby Assigning a name
@song.name = params[:song][:name] #but this happens during the following line of code:</p>

<p>@song = Song.new(param[:song]) # this happens using mass assignment!
```</p>

<p><code>ruby Manually Assigning the Name
input type ="text" name="song[name]" #this looks like the key of the params hash ==&gt; params[:song][:name]
</code></p>

<p>(3:50) Nested hash testing</p>

<p><code>ruby Query string (3:57)
mldraft.com?person[name]=adam&amp;person[email]=adam@mldraft.com
</code>
Can access the params hash in the same way as the form. So params[:person][:name] will equal adam</p>

<p>Mass Assignment Vulnability (4:05)
- attr_accessible is a whitelist approach versus attr_protected which is a black list approach
- this has nothing to do with the attr_accessor, reader, or writer</p>

<p>Virtual attributes don't persist to the database</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 2 Rails]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/08/lecture-2-rails/"/>
    <updated>2012-07-08T14:21:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/08/lecture-2-rails</id>
    <content type="html"><![CDATA[<p><strong><em>Lecture 2</em></strong></p>

<p>BASH
<code>
cd .. # change to up a directory
cd . # change to current directory
ls # list
cd ~ #home directory
</code></p>

<p><strong><em>Resources</em></strong>
- the thing you want to let users manipulate
<code>
rails generate resource Mixtape nae:string
</code></p>

<p>Rake-
a ruby language for running scripts</p>

<p>Models-
main component of your application, they represent the resources of your application
every model is just a ruby class definition located in the model</p>

<p>so the mixtape model defines a class Mixtape that is the object that will allow our app to CRUD mixtapes</p>

<p>If we a Users model we have a users table</p>

<p>Goal for today is to understand the request cycle</p>

<p><strong><em>Routes</em></strong></p>

<p><strong><em>DSL- Domain Specific Language</em></strong> (3:08PM)
``` ruby
match '/foo' => 'songs#foo' # this needs to be sent to a controller</p>

<h1>a songs controller with the foo action</h1>

<p>```
we need to find something that can handle the route--> we want to send it to a waiter, like ordering an A7 at a chinese resturant</p>

<p><strong>an ACTION is just a method defined in the class!!</strong>
a Controller is just a class --> a grouping that relates to songs</p>

<p>if it can't find a page it is 404</p>

<p>every action in the app needs to be defined</p>

<p>5 keywords available...
MATCH
GET
POST
PUT
DELETE</p>

<p>cmd T --> opens a window for you to access files</p>

<p><strong><em>rake routes:</em></strong>
first column is the request
second is http verb
third is url or pattern
fourth is the contoller#action</p>

<p>resources macro- defines all the restful actions for the resource</p>

<p>?? so what was the main problem with the post request?</p>

<p><strong><em>Controllers &amp; #actions </em></strong></p>

<p>``` ruby e.g. of actions in the Songs controller
def name
  render :template => 'songs/name' #explicit template rendering
end</p>

<h1>exactly the same as this...</h1>

<p>def name
end
```</p>

<p><code>ruby Renders
render :action =&gt; "name" # in the views folder named after the controller
render :template =&gt; 'songs/name' # need to specify the full path
render :xml
render :json
</code></p>

<p>Video 2 starts 4PM
diff between &lt;% and =&lt;%
&lt;% will get executed, but will not show in the html
&lt;%= will get executed and will also show in the html</p>

<p><strong><em> Instance variables </em></strong>
Instance variables are the only thing passed from the controller to the views
??? do class variables get passed as well?</p>

<p><strong>link_to</strong>
<code>ruby
&lt;%= link_to 'Search', 'http://google.com' %&gt;
</code>
we have two methods <em>path and </em>url</p>

<p><code>ruby e.g. of link_to
&lt;%= link_to 'Show', 'song' %&gt; #polymorphic interface
</code></p>

<p>3 pars of rails (4:10 PM)
ORM- active record
Action controller
Action view</p>

<p>LEARN MORE: there are lots of polymorphic interfaces play nicely with active record</p>

<p><code>ruby automatic routing with namespacing with_options
with_options :controller =&gt; 'site' do |s|
  s.get 'about'
  s.get 'home'
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 1st Lecture]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/02/rails-1st-lecture/"/>
    <updated>2012-07-02T10:53:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/02/rails-1st-lecture</id>
    <content type="html"><![CDATA[<p>Rails Lecture I - July 2</p>

<p><strong><em>How the web works:</em></strong>
-the requests we send to other servers have headers with info about the request
-you get the response with a header and the body
-the body is just text and data with HTML
-the communication happens over TCP/IP, namely HTTP
- the browser renders the HTML by making it pretty
-we use GET, POST, PUT, and DELETE -</p>

<p>4 imporotant HTTP Verbs-->
GET- retrieve representation of content
POST- Submits data
PUT- Update
Delete- Deletes a specific resource</p>

<p>Convention over configuration
-we wants defaults</p>

<p>There are naming schemes such as:
all tables pl
all models are sigular
controller songs_controller.rb
views songs/</p>

<p><strong><em>Gems:</em></strong>
pre-packaged piece of software that ruby uses</p>

<p>Config Folder--> where the configuration of our app lives
-Database.yaml- this is how we communicate the database</p>

<p>App Folder: spend most of our time in the app directory</p>

<p><strong><em>MVC:</em></strong> (7:42 pm)
Models: define how data is created, retrieved, updated and deleted--> the only code that defined these 4 actions are in the model</p>

<p>Controllers: where to send the data to
business logic</p>

<p>Views: display logic</p>

<p>Helpers: helper functions for your views
db: stores your database and all the instructions for your database</p>

<p>lib: code that you app needs but isn't part of the request cycle
-tasks- background tasks</p>

<p>public dir:
any code that doesn't require the rails stack to run</p>

<p>vendor: any 3rd party library that you didn't write
-- similar to the lib directory that you didn't write</p>

<p><strong><em>REST:</em></strong>
-Representational State Transfer
-URL: unifeied resources locators
- there should be a unified way to expose resources to the world
-1st concept: the things we get online are resources-- what the server is going to respond with is a representation of the real thing (since it can't deliver the real thing)
-there should be consistency and predictability-</p>

<p>rails generate resource song title:string duration:integer #always singular
rails generate scaffold song title:string #in the beginning the first few resources are created by scaffolds</p>

<p><strong><em>MIGRATIONS:</em></strong> defines a db strcuture
every resource has it's own table</p>

<p><strong><em>SQL:</em></strong> server query language or standard query language</p>

<p><strong><em>SCHEMA-</em></strong> describes the structure of the DB</p>

<p><strong><em>RAKE:</em></strong> a ruby library to run background tasks
<code>
rake stats-- gives me stats on the app
rake about--&gt; outputs info about the environment, etc
rake -T --&gt; outputs provides commands
</code></p>

<p>VIDEO 2...</p>

<p>migrations are iterative by nature
every migration should one and only one thing</p>

<p>rake db:migrae runs the migration
rake db:rollback rolls back the migration</p>

<p><strong><em>OBJECT ORIENTATION</em></strong>
-what to create metaphors in our code to representations of the real world
<code>ruby
Song.find(2) #=&gt; finds the object of id 2
Song.all #=&gt; returns all the instances of the class
</code>
<strong><em>ORM: object relational mappers</em></strong>
- a class is to a table : an instance of a class is to a row of a table
-every instance is going to wrap a row of a table
-one to one relationship between an instance and a row
-the library, the ORM, allows you to relate to the objects with knowing how the objects are related</p>

<p>Programming is just codifying procedural knowledge</p>

<p><strong><em>DOCUMENTATION:</em></strong>
Rails Guides: more like how-tos
Rails API: the more technical version</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Collections and Enumerators – David Black]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/06/26/ruby-collections-and-enumerators-david-black/"/>
    <updated>2012-06-26T10:49:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/06/26/ruby-collections-and-enumerators-david-black</id>
    <content type="html"><![CDATA[<p>Ruby Collections and Enumerators
David Black
June 26, 2012</p>

<p>Enumerators
- what is an enum?
- an instance of class Enum
-external iterator
-iterates via a specific method on an underlying object</p>

<p>??next method- walk through the iteration and give you the next value</p>

<p>the default bound is the each method
%w --> converst to enum</p>

<p>loop resuces the stop Iteration error
??each_cons method
if you run each on enum = array.map # => it behaves like map
same with array.select and array.each_cons</p>

<p>Can also chain enumerators:</p>

<p>array.each.with_index #=> will yield the index
array.map.with_index</p>

<p>String Enumerables
-bytes (aka each_byte)
-chars (aka each_char)
-lines (aka each_line)</p>

<p>count takes a block (how many is this true for...)</p>

<p>?? diff between take and select
``` ruby Some Enum methods
.extend(Enumerable) #=> extends the Enum functionality if operating on a single object</p>

<p>each_slice # doesn't overlap like each_cons</p>

<p>require 'prime' #there is a Prime class</p>

<p>array.any? # --> is there anything True in this array?
array.none?
array.one? # (just one-- will exit after it's first hit)
array.all?</p>

<p>array = [a,3,2,4,5,6,7]
array.partition {block that calls the even method} #=> wtih divide the result into two arrays a true an other
array.slice_before #=> [[1,3], [2], [4,5,7], [6]]
chunk discards results for which the block evaluates to nil #=> not useful- obscure method
array.take
array.drop</p>

<p>take_while #=> e.g. while true execute below
drop_while</p>

<p>array = [1,2,3]
array.permutation.to_a # => yields all the permuatations of the array [[1,2,3], [1,3,2], [2,1,3]]
array.combination(2).to_a #=> yields the combinations (in this case 2 at a time [1,2], [1,3], [2,3])</p>

<p>array.sample #=> pulls a random sample from the array
array.shuffle # => will randomize the sample
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 6 Ruby- Class Methods]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/06/25/lecture-6-ruby-class-methods/"/>
    <updated>2012-06-25T10:48:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/06/25/lecture-6-ruby-class-methods</id>
    <content type="html"><![CDATA[<p>Strategy...</p>

<p>-->look for nouns to start
url- unified resource locator
map and collect --> returns the results of the operation--> so it uts it into a new array</p>

<p>select when you are trying to match something, cannot collect things conditionally
(#) => library.songs.select{|s| s.name ==song_name}</p>

<p>is_a? --> is this an array, this is a validator</p>

<p><strong><em>HOW TO BUILD CLASS METHODS</em></strong>
methods that don't apply to the instance of the class but the class itself
you can tell if it's a class method if self is the receiver</p>

<p>``` ruby
class Artist
puts self</p>

<p>def self.top_5
end</p>

<p>end</p>

<p>def self.top_5
  self.all.sort_by{|a| a.rank}
end
end</p>

<h1>Another way...</h1>

<p>class Artist
@@all = []
attr_accessor :name, :songs, :artists</p>

<p>def initialize
  @@all &lt;&lt; self
  @songs = []
  @artists = []
end</p>

<h1>important pattern of observing intialization and making classes intelligent</h1>

<p>def songs
  artists.collect{|artist| artist.song}
end</p>

<p>def self.all
  @@all #return all the artists ever created
end
```</p>

<p>3:30 PM
<strong><em>MODULES</em></strong> - for creating all sort of shared behavior
- modules don't have instances--> the difference between modules and classes</p>

<p>two keywords to include behavior--> include and extend
diff between include and extend --> trying to describe the scope of the module behavior</p>

<p>extending- makes it a class methods
include --> methods in that module are instance methods
?? how does require fit into this??</p>

<p>3:38
?? order of attr_accessor and @@all? does it matter?</p>

<p><strong><em>INHERITANCE</em></strong> -- a pattern that we don't like as much as modules
we'd rather think of things in the builder pattern using include and extend</p>

<p>2nd HALF</p>

<p><strong><em>File Systems:</em></strong>
Dir documentation (4:10)
foreach and Dir.entries</p>

<p><strong><em>ERB templates</em></strong> (4:23):
we care about the result method for templating</p>

<p><strong><em>PRIVATE AND PUBLIC METHODS</em></strong> (4:41)
->a private method cannot be called with an explicit receiever, only implicit receivers-- means they can only be called in the class</p>

<p><strong><em>GEMS:</em></strong>
-a pre-built package or functionality
<a href="http://ruby-toolbox.com">See the Ruby Toolbox</a></p>

<p><strong><em>SINATRA</em></strong> (4:44):
-based on rack (the first )
RACK - create a class that responds to a method called 'call'
- the response must return 3 three things- a status code, the header, the body of the response
<code>
ruby -rubygems sinatra.rb
</code>
<strong><em>SCRAPERS:</em></strong>
nokogiri gem will
xpath-- path to an element or you can use an CSS adjustment
nokogiri comes with a method called content
rails cast on nokogiri: http://railscasts.com/episodes/190-screen-scraping-with-nokogiri/</p>

<p>httparty-
<a href="http://railstips.org/blog/archives/2008/07/29/it-s-an-httparty-and-everyone-is-invited/">some reading on httparty</a>
<a href="http://www.ioncannon.net/programming/91/using-ruby-and-httparty-to-consume-web-services-the-easy-way/">there is more reading here</a></p>

<p>open data:
<a href="freebase.com">freebase</a></p>
]]></content>
  </entry>
  
</feed>

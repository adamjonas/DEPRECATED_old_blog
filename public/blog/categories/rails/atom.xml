<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-24T09:30:58-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Asset Pipeline]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/10/asset-pipeline/"/>
    <updated>2012-09-10T14:31:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/10/asset-pipeline</id>
    <content type="html"><![CDATA[<p>Manifest - tells the app what to include</p>

<p>in an app, it tells the app what .js and .css files to include</p>

<p>The slowest thing about any connection is the opening
The browser limits a domain to 4 paralell connections at a time.</p>

<p>flash of unstyled content (fouc)
Asset hosting. distribute your assets to multiple</p>

<p>CDN-
we don't connect directly to a server. We make hops.</p>

<p>DHCP- distribute IDs to all the computers on the local network</p>

<p>everything is a proc and lambda in js. they are all anonymous functions.</p>

<p>Speed:
perceived speed.</p>

<p>The bulk is what is slow is in the front end.</p>

<p>In production we will have just one file of assets.</p>

<p>sprockets-- opens the assets in the application.js file.
<a href="https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/directive_processor.rb">https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/directive_processor.rb</a>
require_tree-</p>

<p>once somethign is required once, spockets will recognize it and not require it again. The order implicitly is in alphabetical order. If this is done <em>explicitly</em> then you are in control.</p>

<p>your app takes precedence over the vendor path</p>

<p>One style sheet and one js and you let rails handle the rest</p>

<p>Gemify a js file
takes the current assets file
go into the manifest file and add the jquery token or add it itself.</p>

<p>Gem
has it's own asset pipeline and add it's own asset pipeline</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 7 -Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails/"/>
    <updated>2012-07-29T14:20:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails</id>
    <content type="html"><![CDATA[<p>``` ruby Song class
def genre_name
  self.genres.collect{|g| g.name.join(",")}
end</p>

<p>def genre_name=(str)
  str.split(",").collect{|s| s.downcase.strip}.</p>

<pre><code>SongGenre.new(:genre =&gt; Genre.find_or_create_by_name(genre_name))
</code></pre>

<p>  end
end
```</p>

<p>an album has many songs... which means the accepts nested attributes for will be a good fit</p>

<h3>Nested Resource</h3>

<p>begins with the routes</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested Model Form Rails Cast</a></p>

<p><a href="http://blog.aviflombaum.com/blog/2012/07/dont-use-accepts-nested-attributes-for-with-belongs-to/"><strong><em>Dont' use nested attributes for a belongs_to association</em></strong></a></p>

<p>mass assignment and the .build(params[:user_name])</p>

<p>Form_for (2:40)</p>

<h3>Layouts and Sub-layouts</h3>

<p><code>ruby On the Index Page
&lt;% content_for :sub_nav do %&gt;
  &lt;%= link_to "New Song", new_song_path %&gt;
 &lt;% end %&gt;
 # this could also be on the show page so they would share this sub_nav
 &lt;nav class="sub_nav"&gt;
  &lt;%= yield :sub_nav %&gt;
 &lt;% end %&gt;
 # this works because you create another yield in the app besides the body
</code>
you can open up a sublayout as many times as you want to add links...</p>

<p><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current">link_to_unless_current</a>- it just creates the title, not the link to its own page... useful for nav bars</p>

<p>polymorphic interfaces: depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:
<code>ruby
mixtape_path(@mixtape) #=&gt; '/mixtapes/1'
</code>
real life e.g.s
subway slot can accept a metrocard and a credit card-- depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</p>

<p>render is another flexible polymorphic object-
``` ruby Rending Partials in a Collection- very important
&lt;%= render @mixtape.songs %></p>

<h1>Down a level of abstraction since it reveals the collection and partial:</h1>

<p>&lt;%= render :collection => @mixtape.songs, :partial => songs/song_li', :as => :song %>
```</p>

<p><code>ruby Cast Variables
&lt;%= render 'songs/fields', :f =&gt; song_form %&gt;
</code>
If skip album name is true, then
(3:40)
``` ruby
&lt;% if include_album_name %>
  <div class="field"></p>

<pre><code>&lt;% f.label :album %&gt; &lt;br /&gt;#more code....
</code></pre>

<p>```</p>

<p><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#asset-tag-helpers">Passing Local Variables into Partials</a>... need to scroll down a little</p>

<p>write_attribute</p>

<p><a href="http://www.davidverhasselt.com/2011/06/28/5-ways-to-set-attributes-in-activerecord/">5 ways to set attributes in ActiveRecord</a></p>

<p>Could use callbacks and lifecycle hooks to normalize as well...
```ruby
before_validate :normalize_name</p>

<p>def normalize_name
  self.name = self.name.downcase.strip
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 6- Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/23/lecture-6-rails/"/>
    <updated>2012-07-23T19:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/23/lecture-6-rails</id>
    <content type="html"><![CDATA[<p>if it has a belongs_to it has a foreign key...
e.g. songs belong to an artist, so it must have an artist_id</p>

<p>``` ruby</p>

<h1>the return value of this is all the songs</h1>

<p>aretha.song &lt;&lt; Song.new(:name => "Natural Woman")</p>

<h1>this is just one song</h1>

<p>respect = aretha.songs.build(:name => "Respect")
```</p>

<p>7:27
``` ruby
favorites.mixtape_songs.build :song => Song.find_by_name("Thriller")</p>

<h1>these accomplish the same thing, but above is more expressive</h1>

<p>favorites.songs &lt;&lt; Song.first
```</p>

<p>the first level of keys in the params hash is usually scope.</p>

<p>what is params?
- user passes in data through forms
- rails takes that data and makes it easy to access through forms</p>

<p>so <em>accepts_nested_attributes</em> is a way for you to specify that this model should accept data for its associations</p>

<p>field_for
f.fields_for :song_genres
is accessing params[:song][:song_genres]</p>

<h3>Select Boxes</h3>

<p>select(method, choices, options = {}, html_options = {})
<code>ruby
&lt;%= song_genre.select :genre_id, [
  ["Rap", 1]
  ["Pop", 2]
  ["Whatever", 3]
  ] %&gt;
</code>
<strong>Text Boxes</strong>:
adding functionalty</p>

<p><strong><em>classes are data and behavior</em></strong>
we have added behavior to the song_genre model because this is the only place the genre_id is being stored.</p>

<p><em>LookUp</em> Ruby try method</p>

<p>``` ruby Delegate
delegate :name, :to => :genre, :prefix => true, :allow_nils => true</p>

<h1>the above macro is the same as the method below method.</h1>

<p>def genre_name
  genre.name if genre
end
```</p>

<h3>Normalization</h3>

<p>the incision point for normalization are easy to do on writer. but if you are using a vanilla writer, then don't write a normalizer just to normalize. Use a gem or something.</p>

<p><code>
:uniq
If true, duplicates will be omitted from the collection. Useful in conjunction with :through.
</code>
in general this goes on the through model... which doesn't make all that much sense, but that's how it goes on many to many relationships
This isn't preventing the creation of duplicates, it's just treating duplicates as singular-- total crap</p>

<p>8:15
Allow destroy
with a checkbox</p>

<h3>Validations</h3>

<p>```</p>

<h1>following valdiation rule is a constraint on the following attribute</h1>

<p>validates :name, :length => {:minimum => 2, :maximum => 12}
validates :name, :uniqueness => { :scope => :song_id}
```
<a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">See rails guides validations</a>
<a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#uniqueness">specifically uniqueness</a></p>

<h3>Technical Debt</h3>

<p>Technical debt (also known as design debt or code debt) is a neologistic metaphor referring to the eventual consequences of poor or evolving software architecture and software development within a codebase. The debt can be thought of as work that needs to be done before a particular job can be considered complete.</p>

<p>in console can call .valid? to debug and see if an object is valid.</p>

<h3>When debugging...</h3>

<p>try to reduce abstraction
-actually need to debug the problem at hand</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 5- Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails/"/>
    <updated>2012-07-22T14:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails</id>
    <content type="html"><![CDATA[<p>HOMEWORK:</p>

<p>In the migration:
``` ruby In the migration
def change
  add_column :songs, :album_id, :integer</p>

<h1>should probably make the below code in the rake tasks (in seed/tasks)</h1>

<p>  songs = Song.all</p>

<p>  songs.each do |s|</p>

<pre><code>album= Album.find_or_create_by_name(s.album_name.string)
#update those songs to relate to that album
puts "UPdating song #{s.id} to album #{album.id}..."
s.album= album
s.save
</code></pre>

<p>  end
  remove_column :songs, :album_name
 end
end
```</p>

<p>Some other methods:</p>

<p>find_each method: look it up in guides <a href="http://guides.rubyonrails.org/active_record_querying.html">here</a>.
find_each yields each individual object one at a time
find_in_batches it yields songs</p>

<p>in the seeds file:
``` ruby Examples
aretha = Song.create :name => "Aretha Franklin"
respect = aretha.songs.build :name => "Respect"
aretha.save</p>

<h1>many to one, the reverse of above</h1>

<p>monster = Song.create :name => "Monster"
monster.build_artist name => "Kanye West"
monster.save</p>

<p>aretha.songs &lt;&lt; Song.new(:name => "Natural Woman")</p>

<h1>unintentional performance issue here because it loads the full array</h1>

<h1>in order to push one song into it</h1>

<p>kanye = Artist.find_by_name => "Kanye West"
kanye.songs &lt;&lt; Song.new(:name => "Home")</p>

<p>michael = Artist.create :name => "Michael Jackson"</p>

<p>michael.songs &lt;&lt; ("Black and white", "Thriller", "beat it").collect do |song_name|</p>

<h1>need collect instead of each method b/c need the return</h1>

<p>  song.create :name => song_name
end</p>

<p>michael.songs.delete(Song.find_by_name("Black and white", "Thriller", "beat it"))
end
```</p>

<p>This will output the log output of the rake tasks:
<code>
tail -f log/development.log
</code></p>

<p>update the forms in the application (2:50)</p>

<p>Shortcut: cmd D shortcut to highlight similar words to edit</p>

<p>errors:
when you get a stack trace and it's part of rails you can ignore it because you created the file NOT rails.</p>

<h3>has_many :through</h3>

<p>(2:58)
artists have many albums through their songs
- a many to many association</p>

<p>if a model has 2 :belongs_to associations means that it is a join table
even though it is a join model is has all the same behaviors as a has_many assoc</p>

<p>INNER JOIN is SQL:
The INNER JOIN keyword return rows when there is at least one match in both tables.</p>

<h3>Foreign Key/ belongs_to RULE</h3>

<p>if it belongs_to xyz it is a foreign key. if it is a foreign key than it belongs_to xyz.</p>

<p>``` ruby Seeds File from the lab
  avi = User.create :name => "Avi"
  favorites = Mixtape.create :name => "Avi's favs"</p>

<p>  avi.mixtapes &lt;&lt; favorites</p>

<p>  black_and_white = michael.songs.first
  black_and_white.genres.build #when it's a many it is genres.build
  #singular is build_genre
  black_and_white.save</p>

<p>  favorites.songs &lt;&lt; black_and_white
  favorites.mixtape_songs.build :song => Song.find_by_name("Thriller")
  #(4:34)
  #if you understand :belongs_to and has_many it doesn't matter if it's a :through</p>

<p>  UserMixtape.create(</p>

<pre><code>:user =&gt; User.create(:name =&gt; "Roland"),
:mixtape =&gt; favorites
)
</code></pre>

<p>```</p>

<h3>Forms</h3>

<p><strong>How do we build forms that give users the same abilities we have through forms?</strong>
If a field name end in an [], it will allow multiple fields and rails will treat it as unique values and glob them together in a params array (4:46)
- If you want to have multiple fields anem it with an empty array</p>

<p>in the mixtapes_controller
``` ruby
@mixtape.songs &lt;&lt; Song.find(params[:song_ids])</p>

<h1>this would also work</h1>

<p>params[:song_ids].each do |song_id|
  @mixtape.mixtape_songs.build :song => song_id
end
```</p>

<p>Next level of abstraction up... (4:55)
in the html we want to pass in:
mixtape[song_ids][]</p>

<p>??Mass assignment is this accordian of ____
a writer method implies an attribute of a model
<strong>Main goal as a programmer</strong> name your data so that it is easily accessbile in params</p>

<p>TODO (5:03)
HTML:
scope, attribute, attribute kind</p>

<h3>form_tag helper</h3>

<p>NEXT: <em>A rails implementation: form_tag helper</em>, a low level rails helper
all these methods do is generate html for you. not all that railsy.
<code>
&lt;%= form_tag mixtapes_path do %&gt;
</code>
At least we aren't writing HTML here now... this level of implementation gives you lots of flexibility and control but at the expense of maintainability and explicitness.</p>

<h3>form helper builders</h3>

<p><em>html, form_tag helpers family, form helpers in order of low level of abstraction to higher</em>
want to bind the active record object to the form element
e.g. text_field, label
(5:17)
<code>ruby
&lt;%= label :mixtape, :name %&gt; #:mixtape represents @mixtape, but rails doesn't support @mixtape
&lt;%= text_field :mixtape, :name %&gt;
</code></p>

<h3>form_for</h3>

<p>We want to bind the instance var to the form itself
- the problem with text_field is that hte form is still built without any knowledge of the active record instance behind the form --> it should be an extension of the object
- these are the way our scaffolds normally work</p>

<p>form_for method yields a form builderthat knows the model the form is about</p>

<p>mixtape_form.object would return the mixtape object because it has knowledge of the form object</p>

<p>you also get access to <em>fields_for</em> -
<code>ruby
mixtape_form.fields_for :mixtape_songs, @mixtape.mixtape_songs.build, :index =&gt; 0 do
|mixtape_songs_field| #index option will increment them automatically
  mixtape_songs_fields_for.label :song_id
  mixtape_songs_fields_for.text_field :song_id
 end
</code>
Does your model implement a method called "mixtape_songs_attributes="
``` ruby
accepts_nested_attributes_for :mixtape_songs</p>

<h1>builds this method:</h1>

<p> def mixtape_songs_attributes=(attributes)
   attributes.each do |attribute_has|
   MixtapeSong.build.attribute_has
 end</p>

<h1>this assigns the attributes of the mixtape_songs</h1>

<h1>this is the same as</h1>

<p>def mixtape_songs_attributes=(attributes)
   attributes.each do |index, mixtape_song_attributes|</p>

<pre><code> MixtapeSong.new :song_id = mixtape_song_attributes[:song_id]
</code></pre>

<p>   end
end
```</p>

<p><a href="http://masonoise.wordpress.com/2010/07/23/rails-and-forms-using-accepts_nested_attributes_for/">Read</a>
<a href="http://railscasts.com/episodes/196-nested-model-form-part-1">railscast</a>
<a href="http://asciicasts.com/episodes/196-nested-model-form-part-1">ascii casts</a></p>

<p><strong>an attribute has a getter and setter method called the name of the attribute</strong></p>

<p>Rails Casts on this subject:
<a href="http://railscasts.com/episodes/47-two-many-to-many/">Many to Many</a></p>

<p><a href="http://railscasts.com/episodes/73-complex-forms-part-1/">Complex Forms - 1</a></p>

<p><a href="http://railscasts.com/episodes/74-complex-forms-part-2/">Complex Forms - 2</a></p>

<p><a href="http://railscasts.com/episodes/75-complex-forms-part-3">Complex Forms - 3</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested models 1</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-revised">Nested Models- revised</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html">API reading</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Site Request Forgery]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery/"/>
    <updated>2012-07-21T13:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery</id>
    <content type="html"><![CDATA[<h3>Cross Site Request Forgery</h3>

<p>Description Summary
:  The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</p>

<p>Extended Description
:  When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</p>

<p>Ensures that information submitted through forms have a specific tag that identifies it as information submitted through the form I created. (Read more about csrf <a href="http://stackoverflow.com/questions/941594/understand-rails-authenticity-token">here</a> and <a href="http://stackoverflow.com/questions/9996665/rails-how-does-csrf-meta-tag-work">here.</a>)</p>

<p>This is the out of context code I have from class...
<code>
csrf metatabs
</code></p>

<p>NOTE: We went over this in lecture 6 of ROR spring</p>
]]></content>
  </entry>
  
</feed>

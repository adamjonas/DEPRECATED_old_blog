<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-07-19T11:35:00-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails helpers]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/18/rails-helpers/"/>
    <updated>2012-07-18T16:58:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/18/rails-helpers</id>
    <content type="html"><![CDATA[<p>'Helpers are methods in modules that you keep mostly hidden out of the way. The idea is to keep as much Ruby code out of the views, so helpers are mainly for use in that context. Helpers are the only methods you can access, other than instance methods for an instance you have access to.' <a href="http://strugglingwithruby.blogspot.com/2008/10/view-part-2-scope-helpers-and-partials.html">except from</a></p>

<p><a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">why this is important?</a>
and <a href="/blog/2012/07/18/solid-principles/">my own write up of Dependency Inversion Principle</a></p>

<p>Declare a controller method as a helper. For example, the following makes the current_user controller method available to the view. You
``` ruby
class ApplicationController &lt; ActionController::Base
  helper_method :current_user, :logged_in?</p>

<p>  def current_user</p>

<pre><code>@current_user ||= User.find_by_id(session[:user])
</code></pre>

<p>  end</p>

<p>   def logged_in?</p>

<pre><code> current_user != nil
</code></pre>

<p>   end
end
<code>
In a view:
</code> ruby
&lt;% if logged_in? -%>Welcome, &lt;%= current_user.name %>&lt;% end -%>
```
Parameters
method[, method] - A name or names of a method on the controller to be made available on the view.</p>

<p>A solid beginner's break-down (it's a little old though) is <a href="http://strugglingwithruby.blogspot.com/2008/10/view-part-2-scope-helpers-and-partials.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the clues errors provide]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/18/the-clues-errors-provide/"/>
    <updated>2012-07-18T16:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/18/the-clues-errors-provide</id>
    <content type="html"><![CDATA[<p>``` ruby Here's the code in the sessions controller
def create</p>

<pre><code>user = User.find_by_email_address(params[:email_address])
if user &amp;&amp; user.authenticate(params[:password])
 #blah blah blah
</code></pre>

<p>  end
<code>
</code> ruby The Error
undefined method `authenticate' for nil:NilClass
```
This means that the method was called on a receiver that is nil. Meaning that it's not the right object...</p>

<p>``` ruby Here's the code in the sessions controller
def create</p>

<pre><code>user = User.find_by_email_address(params[:email_address])
if user &amp;&amp; user.magic(params[:password])
#blah blah blah
</code></pre>

<p>end
```</p>

<p><code>ruby The Error
undefined method `magic' for #&lt;User:0x007fa35e3e2fe8&gt;
</code>
This means that the method magic doesn't exist for that object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[has_secured_password]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/18/has-secured-password/"/>
    <updated>2012-07-18T15:23:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/18/has-secured-password</id>
    <content type="html"><![CDATA[<p><a href="http://railscasts.com/episodes/270-authentication-in-rails-3-1">Rails Cast on Authentication Rails 3.1</a>
also want to check out <a href="http://railscasts.com/episodes/250-authentication-from-scratch">Rails cast on Authentication from Scratch</a></p>

<p>The user model rails allows you to call
<code>ruby has_secure_password
class User &lt; ActiveRecord::Base
  attr_accessible :email, :password, :password_confirmation
  has_secure_password
  validates_presence_of :password, :on =&gt; :create
end
</code>
You will likely want to add validation for the email address as well, but that's outside the scope of this...</p>

<p>The has_secure_password setting automatically adds validation for mismatched password between the password and password confirmation fields.</p>

<h3>Helper Methods: specifically :current_user</h3>

<p>See the <a href="/blog/2012/07/18/rails-helpers/">post on this</a>.</p>

<h3>SSL</h3>

<p>can also add options for ssl with the simple line in the ApplicationController:
<code>ruby
protect_from_forgery
force_ssl
</code>
This will only be reflected in production and test environments NOT development...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 3- July 15]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15/"/>
    <updated>2012-07-16T16:06:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15</id>
    <content type="html"><![CDATA[<p><strong><em>Rails Lecture 3- July 15</em></strong></p>

<p>why use 'get' instead of 'match' in the routes file?
-bc want to use http verbs to be more specific
-match is more vague, you should generally use specific verbs</p>

<p><code>
rake routes CONTROLLER=SESSIONS
</code>
will narrow output</p>

<p>```
render :action => 'under_construction' #=> relative to the current controller
render :template => 'shared/under_construction' #=> doesn't assume it is in the current views folder</p>

<h1>under the class name</h1>

<p>render 'shared/under_construction' #=> these 3 work the same now
```</p>

<p><strong>Private Methods</strong>(2:40)
- about what object the receiver is on the method called-- private methods can only be called on implicit receivers
- a way to control scope
- anything that is not an action, that isn't an endpoint of a route should be private</p>

<p>routes: bridge between the browser, specifcially URLs, and the app</p>

<p>Polymorphic Interface(2:50)
The link_to method--> accepts two parameters. the first is the name of the link as a string, the second is the string that it just uses it as a href
-> if I send it an instance of active record, it's behavior will change ==> it will become intelligent and it will understand that it is an instance of active record</p>

<p><strong>Lecture</strong> (2:55)</p>

<p>anything that starts with an underscore '_form.erb.html' for example is a snippet of code that is reused on multiple templates</p>

<p>form_for(@song) --> knows whether the song is new or should be updated... obviously different verbs are required for those diff actions</p>

<p><code>ruby Form Helpers (3:09)
form_for(@song)
f.textfield :artist_name #=&gt; this will break if there is not a artist_name method for the song class in the controller
</code></p>

<p>``` ruby
def create</p>

<pre><code>@song = Song.new(param[:song]) 
# this line instantiates a New Song
# collects the data
#assigning the data to the correct attribute
</code></pre>

<p> #the params[:song] lines does the last two steps
end
```</p>

<p><strong>Params</strong> (3:20)
params looks and behaves like a hash
its a nested hash</p>

<p>``` ruby Assigning a name
@song.name = params[:song][:name] #but this happens during the following line of code:</p>

<p>@song = Song.new(param[:song]) # this happens using mass assignment!
```</p>

<p><code>ruby Manually Assigning the Name
input type ="text" name="song[name]" #this looks like the key of the params hash ==&gt; params[:song][:name]
</code></p>

<p>(3:50) Nested hash testing</p>

<p><code>ruby Query string (3:57)
mldraft.com?person[name]=adam&amp;person[email]=adam@mldraft.com
</code>
Can access the params hash in the same way as the form. So params[:person][:name] will equal adam</p>

<p>Mass Assignment Vulnability (4:05)
- attr_accessible is a whitelist approach versus attr_protected which is a black list approach
- this has nothing to do with the attr_accessor, reader, or writer</p>

<p>Virtual attributes don't persist to the database</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diaspora- Day 2]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/11/diaspora2/"/>
    <updated>2012-07-11T10:06:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/11/diaspora2</id>
    <content type="html"><![CDATA[<p><strong>Postgresql Gem</strong> is killing me. It's listed in the Gemfile. It's listed in the Gemlock file. I've tried to...</p>

<p>ok so after 2 hours of running around google I tried commenting out the mysql and sqlite gems:
```</p>

<h1>database</h1>

<p>gem "activerecord-import", "~> 0.2.9"
gem 'foreigner', '~> 1.1.0'</p>

<h1>gem 'mysql2', '0.3.11' if ENV['DB'].nil? || ENV['DB'] == 'all' || ENV['DB'] == 'mysql'</h1>

<p>gem 'pg' #if ENV['DB'] == 'all' || ENV['DB'] == 'postgres'</p>

<h1>gem 'sqlite3' if ENV['DB'] == 'all' || ENV['DB'] == 'sqlite'</h1>

<p>```
bingo.</p>

<p>I finally got this running by downloading mysql and setting the db to mysql... victory.</p>
]]></content>
  </entry>
  
</feed>

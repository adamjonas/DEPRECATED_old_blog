<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2013-08-08T13:40:08-04:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day26]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day26/"/>
    <updated>2012-11-12T10:13:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day26</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<ul>
<li>Jeffery Zeldman</li>
<li>Dan Benjamin</li>
<li>Jason Santa Maria</li>
<li>Simplebits.com</li>
</ul>


<h3>Gitbo</h3>

<ul>
<li>Popularity index</li>
<li><a href="http://railscasts.com/episodes/366-sidekiq">sidekiq</a></li>
<li>nested issues in repos</li>
<li>slugs wiht friendly_id</li>
</ul>


<h3>Rails Lecture</h3>

<ul>
<li>sub-yields or sub-layouts</li>
</ul>


<p>```ruby</p>

<h1>in layouts/application.html.erb</h1>

<p>&lt;% content_for :page-navigation %></p>

<h1>at the top of the pages that need it</h1>

<p>&lt;%= yield :page-navigation %>
```</p>

<ul>
<li>Applicaiton level layout</li>
<li>controller level layout</li>
<li>action level layout</li>
</ul>


<p><code>ruby  Action Level Layout
respond_to do |format|
  format.html {render :layout =&gt; 'application'}
</code></p>

<ul>
<li>content for will allow you to append to the outter layer</li>
</ul>


<h3>Application.css</h3>

<ul>
<li>The manifest file

<ul>
<li>require tree . -> require all files at the same level of this file (dot means current dir, .. means dir above)</li>
<li><a href="https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/directive_processor.rb">sprocket directives</a> tells the app what to include and maintain</li>
<li>files are loaded in order</li>
<li>in production, all the assets will be packed</li>
</ul>
</li>
</ul>


<h3>Compiling</h3>

<ul>
<li><p>rake assets:precompile</p></li>
<li><p>rails s --environment=production</p>

<ul>
<li>shortcut

<ul>
<li>rails s -e production</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pre-processors</h3>

<ul>
<li>css: doesn't allow css variables

<ul>
<li><a href="http://sass-lang.com/">scss and sass</a>

<ul>
<li>scss is backwards compatible with css</li>
</ul>
</li>
<li>sass adds lots of css like variables</li>
</ul>
</li>
<li>coffeescript

<ul>
<li>makes the syntax nicer than javascript</li>
<li>not backwards compatible with javascript</li>
</ul>
</li>
<li>less

<ul>
<li>dynamic stylesheet</li>
</ul>
</li>
<li>HAML

<ul>
<li>HMTL preprocessor</li>
</ul>
</li>
</ul>


<h3>locales/application.rb</h3>

<ul>
<li>want to be sure that all finger prints are new -> config.assets.version = '1.1'</li>
<li>config.assets.compile = false /true -> will precompile assets on the first request</li>
</ul>


<h3>Pictures in asset pipeline</h3>

<ul>
<li>Need image-url to trigger the asset pipeline</li>
</ul>


<p>```
h1.logo{
  url: image-url('/whatever.png');
}</p>

<h1>NOT</h1>

<p>h1.logo{
  url: url('/assets/whatever.png');
}
```
In order to use image-url, it needs to be a scss file</p>

<h3>Managing Version Asset files</h3>

<ul>
<li>can manage versions with bundler</li>
<li>declare jquery rails engine means that the app's asset path will be loaded autmatically

<ul>
<li>jquery-rails has a vendor dir, so that it adds it when I compile by vendor dir</li>
</ul>
</li>
</ul>


<h3>Bootstrap</h3>

<ul>
<li>rails generate bookstrap:install</li>
<li>tell manifest file to actually include the js</li>
<li>in app.css

<ul>
<li>require bootstrap_and_overides</li>
</ul>
</li>
<li><p>rails g bootstrap:layouts</p></li>
<li><p><a href="http://wrapbootstrap.com">http://wrapbootstrap.com</a></p></li>
<li><a href="http://bootsnipp.com/">http://bootsnipp.com/</a></li>
<li><a href="http://dresssed.com/">http://dresssed.com/</a></li>
</ul>


<h3>Friendly URLs</h3>

<p>Sweet <a href="http://railscasts.com/episodes/314-pretty-urls-with-friendlyid?autoplay=true">rails cast</a> on beautiful slugs and slugifying ids</p>

<h3>What's left</h3>

<ul>
<li>AR Callbacks</li>
<li>Controller Filters</li>
<li>Application Controller Helpers</li>
<li>Authentication</li>
<li>Sessions / Cookies</li>
<li>Authorization</li>
<li>Rendering Collections</li>
<li>AREL / Includes and Joins</li>
<li>Scopes / Class Methods</li>
<li>Formatted Responses</li>
<li>ActionView Helpers -> cycle, truncate, except</li>
<li>Asset Pipeline</li>
<li>SASS</li>
<li>CoffeeScript</li>
<li>Javascript Events

<ul>
<li>jQuery</li>
<li>AJAX</li>
</ul>
</li>
<li>Route Options</li>
<li>Securing Rails</li>
<li>Optimization</li>
<li>Caching / Memcached</li>
<li>Observers</li>
<li>Association Options -> dependent destroy, class</li>
<li><p>Polymorphic Models</p></li>
<li><p>Common Gems</p>

<ul>
<li>Pagination</li>
<li>OmniAuth</li>
<li>CanCan</li>
<li>Uploads</li>
<li>ActionMailer</li>
<li>Subdomains</li>
<li>Background Jobs</li>
<li><a href="http://www.intridea.com/blog/2011/5/13/rails3-gems">http://www.intridea.com/blog/2011/5/13/rails3-gems</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day18]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day18/"/>
    <updated>2012-11-01T13:42:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day18</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<ul>
<li><p>Edsgar Dijkstra</p>

<ul>
<li>inventor of structured programming</li>
<li>came up with "for, while, until, case"</li>
<li>computer science is not about machines and equipment management</li>
</ul>
</li>
<li><p>If you use more of a bad tool, it won't fix it.</p>

<blockquote><p>About the use of language; it is impossible to sharpen a pencil with a blunt axe. It is equally vain to try to do it with ten blunt axes instead.</p></blockquote></li>
<li><p>Programming is just about communicating clearly.</p></li>
<li>Once it is teachable it is concrete.</li>
</ul>


<h3>Ruby Tidbit</h3>

<p>```ruby Semi-Colon Deliminates a Line
def create;end</p>

<h1>the semi-colon deliminates the info on two lines</h1>

<p>```</p>

<h2>Rails Lecture</h2>

<p><code>ruby link to unless current
&lt;%= link_to_unless_current %&gt; #this is slick for nav!
</code></p>

<p><strong>Routes</strong>
```ruby Routes File
match '/name' => 'songs#name'</p>

<h1>not as specific and therefore as good as</h1>

<p>get '/name' => 'songs#name'</p>

<p>get 'site/about' #rails will assume that site is the controller and about is the action
```</p>

<p>```ruby Generate a Controller
rails generate controller CreditCard open debit credit close</p>

<h1>this will create a credit_card_controller with 4 actions</h1>

<p>```
??have to delete rm-rf public/index.html</p>

<p>```ruby Rendering Templates
class Sessions Controller &lt; ApplicationController</p>

<p>render :action
render :template</p>

<h1>in practice</h1>

<p>render 'under_construction' #this is the action in the sessions controller
render 'shared/under_construction' #this is a full relative path</p>

<h1>and more instructional of where to find the template</h1>

<p>```</p>

<h3>Private and public methods</h3>

<p>```ruby Private Method e.g.
class Dog
  def bark</p>

<pre><code>case stomach_volume
when :very
  puts "woof woof!"
when :not_at_all
  puts "woof"
end
</code></pre>

<p>  end</p>

<p>private #it would also break if this was protected.</p>

<p>  def stomach_volume</p>

<pre><code>:very
</code></pre>

<p>  end
end</p>

<p>fido = Dog.new
fido.stomach_volume #this is not going to work.
```
private, public, and protected all create keyword scope -> created limited, predicted interfaces</p>

<p>if a method is private it can only be called on an implicit receiver- can't call call on an explicit receiver</p>

<p><strong>protected</strong> -> can only be called on self.</p>

<p>```ruby When Private Methods Become Useful in the Controller
class SomeController</p>

<p>def new
  under_construction
end</p>

<p>def create
  under_constructions
end</p>

<p>private</p>

<p>def under_construction
  render 'shared/under_construction'
end</p>

<p>end
```</p>

<h3>In the migration</h3>

<ul>
<li>def change for when the reverse can be assumed</li>
<li><p>def up and down for things like renaming columns -> because rails wouldn't be able to infer what the reverse would be.</p></li>
<li><p>t.timestamps - is a created at and updated at</p></li>
</ul>


<h3>Signups</h3>

<p>when you login, you are creating a session between you and the website.
when you signup you are creating a user on their system-- that lives in their DB
<code>ruby Routes
get '/signup' =&gt; 'users#new'
post '/signup' =&gt; 'users#create'
</code></p>

<p><strong>Mass assignment => when you assign initialization properties during assingment.</strong></p>

<ul>
<li><p>Migrations</p>

<ul>
<li>define and edit schema</li>
</ul>
</li>
<li><p>Models -ORM</p>

<ul>
<li>insert rows /update</li>
<li>database</li>
</ul>
</li>
<li><p>Routes
maps URLs to actions in the controller</p></li>
<li><p>controllers</p>

<ul>
<li>contains the business logic</li>
</ul>
</li>
<li><p>views</p>

<ul>
<li>the actual interface</li>
</ul>
</li>
</ul>


<p>-> In sinatra the routes are built into controllers.</p>

<p><code>ruby This must be how form_for works
def form_for(obj, &amp;block)
  f = FormBuilder.new(obj)
  yield f
end
</code></p>

<p><em>In your controller helper...</em>
```ruby Rolling My Own Form Builder
&lt;%= form_for(@song, :builder = > SongHelper::SongForm) %></p>

<h1>in the controller helper</h1>

<p>module SongsHelper
  class SongForm &lt; ActionView::Helpers::FormBuilder</p>

<pre><code>def full_name_field
  label(:first_name) + 
  text_field :first_name

  label(:last_name) + 
  text_field :last_name
end
</code></pre>

<p>  end
end
```
Customizing the forms and encapsulate in the controller helpers...</p>

<h3>Test::Unit to RSpec</h3>

<p>change out the libraries
add rspec to the gem file
rip out test folder</p>

<p>rails g install rspec</p>

<p><a href="http://stackoverflow.com/questions/9884033/ruby-on-rails-switch-from-test-unit-to-rspec">changing from minitest to rspec</a> <a href="http://stackoverflow.com/questions/5072662/how-to-remove-unit-test-and-replace-it-with-rspec">or</a></p>

<p>"when i generated the scaffold, it generated the specs for me..."</p>

<h3>Posting Info to an object</h3>

<ol>
<li>instantiate an instance</li>
<li>collect the form data</li>
<li>and you populate the instance attribute with the proper data</li>
</ol>


<p>If I want to use form_for I need an active record instance.</p>

<h3>Read this...</h3>

<p><a href="http://guides.rubyonrails.org/v2.3.11/form_helpers.html#understanding-parameter-naming-conventions">Understand parameter naming conventions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accepts Nested Attributes For]]></title>
    <link href="http://www.adamjonas.com/blog/accepts-nested-attributes-for/"/>
    <updated>2012-10-31T16:14:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/accepts-nested-attributes-for</id>
    <content type="html"><![CDATA[<p>So accepts nested attributes is really about writing to an attribute of a class.</p>

<p>In my case a location belongs_to a user. I was then trying to set the location.street1 through the user, but it wouldn't write. This is because it needs the accepts_nested_attributes method in the model.</p>

<p><code>ruby If I want to manage questions through my surveys forms...
class Survey &lt; ActiveRecord::Base
  has_many :questions, :dependent =&gt; :destroy
  accepts_nested_attributes_for :questions, allow_destroy: true
end
</code>
<a href="http://railscasts.com/episodes/196-nested-model-form-revised">Railscast</a>
  - min 6 javascript</p>

<p>destroy -> allow_destroy: true</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Web Development with Rails]]></title>
    <link href="http://www.adamjonas.com/blog/agile-web-development-with-rails/"/>
    <updated>2012-10-30T10:33:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/agile-web-development-with-rails</id>
    <content type="html"><![CDATA[<ul>
<li>ORM libraries map database tables to classes, rows to objects, and columns to attributes of those objects.</li>
<li>Class methods are used to perform table-level operations</li>
<li>Instance methods are used to perform operations on individual rows.</li>
<li>Modules server two purposes

<ul>
<li>namespace: letting you define methods whose names will not clash with those defined elsewhere</li>
<li>And they allow you to share functionality between classes</li>
</ul>
</li>
<li>a ||= b
```ruby a operation= b is the same as a = a operation b
count += 1

<h1>same as</h1>

<p>count = count + 1</p></li>
</ul>


<p>price *= discount</p>

<h1>same as</h1>

<p>price = price * discount</p>

<p>count ||= 0</p>

<h1>same as</h1>

<p>count = count || 0
```
- lambda
- numericality
- catalog display is really just a glorified product listing.
- every time a request comes in, we can recover the identity from the session and use it to find the cart in the database
- dependent: :destroy -> indicates that the existence of line items is dependent on the existence of the cart
- if a table has foreign keys, the corresponding model should have a belongs_to for each.
- the default HTTP method for a link is a get, the default HTTP method for a button is a post.
- @cart.line_items.build -> this causes a new line item relationship to be built between the @cart object and the product. You can build the relationship from either end.
- Rails matches on is add_XXX_to_TABLE and remove_XXX_from_TABLE where the value XXX is ignored; what matters is the list of the column names and the types that appear after the migration name.
- link_to_unless_current
- if @person is just an empty object structure, form_form will work on the assumption that this is to create a new object. If @person actually contains data, however, form_for will assume that its form is editing that object and create a different looking form element, a hidden field to enable Rails' REST capabilities.
- helpers are simply modules containing methods that assist a view.
- link_to and link_to_if take a condition parameter
- a flash is a bucket (actually closer to a hash) in which you can store stuff as you process a request.
- you can pass parameters to a partial, so that the partial can render different results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day16]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day16/"/>
    <updated>2012-10-25T09:39:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day16</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Linus Torvalds</p>

<h2>Rails</h2>

<p>rails assigns attr_accessors</p>

<p><code>ruby Active Record Queries
song.limit(2).last #=&gt; this is the second to last song
Song.find(1)
Song.find_by_name
Song.find_by_anyattrributename
Song.find_all_by_name #=&gt; sweet
</code></p>

<h3>ORM ~> Object Relational Mapping</h3>

<ul>
<li><strong>A ruby class is to a databse table as instances of that class are to a row in that table</strong>

<ul>
<li>the form field should map to the column name</li>
</ul>
</li>
<li>activerecord's exists to accomplish CRUD</li>
<li>active record pattern <a href="http://books.google.com/books?id=FyWZt5DdvFkC&amp;lpg=PA1&amp;dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&amp;pg=PT187#v=onepage&amp;q=active%20record&amp;f=false">proposed by Martin Fowler</a></li>
</ul>


<p><code>ruby Persistence
new_song = Song.new
new_song.persisted? #=&gt; false
new_song.new_record? #=&gt; true
new_song.save
new_song.persisted? #=&gt; true
new_song.new_record? #=&gt; false
</code>
<code>ruby ORM Awareness
new_song.name = "new"
s.changed? #=&gt; true
s.changes #=&gt; {"name=&gt; ["whatever", "new"]}
s.name_changed? #=&gt; true
s.duration_changed #=&gt; false
</code>
<code>ruby
song.destroy #=&gt; will destroy the record
song.delete #=&gt; don't use this for now
</code></p>

<h3>REST</h3>

<p>Identification of a resource
Individual resources that are identified in the requests, for example using the URIs sin web-based REST systems.</p>

<p>REST- the url address should mirror the http verb and url action</p>

<ul>
<li><em>What do you mean by a representation?</em></li>
<li>these objects have different representations depending on their name</li>
<li>.xml should return the xml and .json and return the json</li>
<li>the objects should be devoid of your form until you ask for them</li>
</ul>


<h3>Routes</h3>

<p>```ruby Routes File syntax
get '/welcome' => 'application#welcome'</p>

<h1>same as ApplcationController.welcome</h1>

<p>=> {controller => 'application', :action => 'welcome'}
resources :songs #is a macro that is calling 7 methods for you
```</p>

<ul>
<li>the routes file are evaluated with lazy evaluation. Which allows you to put the most specific patterns on top and let them trickle down...</li>
<li>7 restful routes: get, create, update, delete, show, etc.</li>
<li><p><em>url endpoint</em>- the very last thing that is executed after a url request- the last application run is the action in the controller</p></li>
<li><p><strong>URL request cascade through a rails app:</strong></p>

<ol>
<li>web server gets request</li>
<li>send it through the rack</li>
<li>last stop, routes file</li>
<li>match a  route</li>
<li>request = SongContoller.new</li>
<li>response = request.index</li>
</ol>
</li>
</ul>


<p>Rails was the first to have implicit rendering...
```ruby Implicit Rendering
def index
  @index = Song.all
end</p>

<h1>this will implicitly render the index page</h1>

<h1>could also add ~> render 'artist/index' &lt;~ which will over-write the implicitly render</h1>

<h1>'artist/index' is a method called on self</h1>

<p>```</p>

<p>class variable can inherit down the inheritance tree
a class instance var is private to the class</p>

<p>```ruby
def initialize</p>

<pre><code>@songs = []
@genres = []
Artist.all &lt;&lt; self??
</code></pre>

<p>  end
```</p>

<p>VPS- Virtual Private server</p>

<p>Linux distribution - ubuntu
server - nginx
unicorn
DB- postgres</p>

<h3>Visualization</h3>

<ul>
<li>how does a partition actually work?

<ul>
<li>2 cores or 4 cores?? i don't know what a core is.</li>
</ul>
</li>
<li>hardware usually out-paces software

<ul>
<li>we have had <em>multi-core processors</em> before we had software to take advantage of it.</li>
</ul>
</li>
<li><p>vocab:</p>

<ul>
<li>slice, a box, a vps, are pretty much synonymous</li>
</ul>
</li>
<li><p>dediserve is the server we are using</p></li>
<li>RAM has fast access.</li>
<li><a href="http://vimeo.com/15882917">capistrano</a></li>
</ul>


<p>```
ssh root@96.8ipaddress</p>

<h1>will get an error saying that you can't connect</h1>

<h1>say yes</h1>

<h1>next insert your password:</h1>

<h1>create a new user instead of root</h1>

<p>useradd #to get access to instructons
man useradd
useradd -m -s /bin/bash -G sudo ajonas</p>

<h1>sudo says anyone in sudo group can use sudo adam</h1>

<h1>userdel will delete a user</h1>

<p>passwd ajonas</p>

<h1>enter password:</h1>

<p>ssh root@96.8ipaddress will get you in</p>

<p>sudo apt-get update #for updating indexes and downloading packages, like homebrew
sudo apt-get upgrade
build-apt-install build-essential</p>

<h1>install your packages with apt-get</h1>

<p>```</p>

<h3>Capistrano</h3>

<ul>
<li><p>handles your <a href="http://en.wikipedia.org/wiki/Release_management">release management</a> throw the entire code base on your server every time you deploy. Copy code off of Github or server and apply it. This will maintain revisions, roll back easily, compile the CSS in your assets. It can't happen manually.
<code>
cap deploy
</code>
will do this for you. It's script-able and automatic.</p></li>
<li><p>This is run locally.</p></li>
<li>cap is what you use to interact with capistrano from the outside (like rails new from outside a rails project)</li>
<li>capify is how you interact with the gem (like rails generate inside the project folder)</li>
</ul>


<h3>Web Servers</h3>

<ul>
<li>apache was the market leader for best of breed of web server</li>
<li><p>ngenx - can handle lots of requests and tries to stay really small</p>

<ul>
<li>has much smaller memory footprint</li>
<li>has some features that are better suited for rails</li>
<li>ngenx is also a really good load balancer</li>
<li>config file is much easier to understand than ngenx</li>
</ul>
</li>
<li><p>Four functions in the config/deploy.rb DSL</p>

<ul>
<li>set: capistrano variables</li>
<li>role:</li>
</ul>
</li>
</ul>


<h3>Further reading</h3>

<ul>
<li>backups</li>
<li>log rotations - when your log gets too big, it is going to zip it up and send it to some long term storage. The first thing hackers will do is go through the logs.</li>
</ul>


<h3>Reading in prep:</h3>

<ul>
<li>Capistrano reads its instructions from a capfile.</li>
<li>many server clusters are hidden behind NATs (Network address translation) and firewalls, to prevent direct access.

<ul>
<li>NATs - the process of modifying IP address information in IP packet headers while in transit across a traffic routing device.</li>
</ul>
</li>
<li>Tasks are the foundation of a Capistrano setup; collections of tasks are typically called Recipes.</li>
<li><p>Daemons are special system applications which typically execute continuously in the background and await requests for the functions they provide from other applications.</p></li>
<li><p><em>From lowest to highest, the layers of the internet protocol suite are:</em></p></li>
<li>The link layer (commonly Ethernet) contains communication technologies for a local network.</li>
<li>The internet layer (IP) connects local networks, thus establishing internetworking.</li>
<li>The transport layer (TCP) handles host-to-host communication.</li>
<li><p>The application layer (for example HTTP) contains all protocols for specific data communications services on a process-to-process level (for example how a web browser communicates with a web server).</p></li>
<li><p>Stateless firewalls require less memory, and can be faster for simple filters that require less time to filter than to look up a session.</p></li>
<li><p>Modern firewalls can filter traffic based on many packet attributes like source IP address, source port, destination IP address or port, destination service like WWW or FTP.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

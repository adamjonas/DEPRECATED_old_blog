<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-08-03T18:14:36-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lecture 7 -Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails/"/>
    <updated>2012-07-29T14:20:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails</id>
    <content type="html"><![CDATA[<p>``` ruby Song class
def genre_name
  self.genres.collect{|g| g.name.join(",")}
end</p>

<p>def genre_name=(str)
  str.split(",").collect{|s| s.downcase.strip}.</p>

<pre><code>SongGenre.new(:genre =&gt; Genre.find_or_create_by_name(genre_name))
</code></pre>

<p>  end
end
```</p>

<p>an album has many songs... which means the accepts nested attributes for will be a good fit</p>

<h3>Nested Resource</h3>

<p>begins with the routes</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested Model Form Rails Cast</a></p>

<p><a href="http://blog.aviflombaum.com/blog/2012/07/dont-use-accepts-nested-attributes-for-with-belongs-to/"><strong><em>Dont' use nested attributes for a belongs_to association</em></strong></a></p>

<p>mass assignment and the .build(params[:user_name])</p>

<p>Form_for (2:40)</p>

<h3>Layouts and Sub-layouts</h3>

<p><code>ruby On the Index Page
&lt;% content_for :sub_nav do %&gt;
  &lt;%= link_to "New Song", new_song_path %&gt;
 &lt;% end %&gt;
 # this could also be on the show page so they would share this sub_nav
 &lt;nav class="sub_nav"&gt;
  &lt;%= yield :sub_nav %&gt;
 &lt;% end %&gt;
 # this works because you create another yield in the app besides the body
</code>
you can open up a sublayout as many times as you want to add links...</p>

<p><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current">link_to_unless_current</a>- it just creates the title, not the link to its own page... useful for nav bars</p>

<p>polymorphic interfaces: depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:
<code>ruby
mixtape_path(@mixtape) #=&gt; '/mixtapes/1'
</code>
real life e.g.s
subway slot can accept a metrocard and a credit card-- depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</p>

<p>render is another flexible polymorphic object-
``` ruby Rending Partials in a Collection- very important
&lt;%= render @mixtape.songs %></p>

<h1>Down a level of abstraction since it reveals the collection and partial:</h1>

<p>&lt;%= render :collection => @mixtape.songs, :partial => songs/song_li', :as => :song %>
```</p>

<p><code>ruby Cast Variables
&lt;%= render 'songs/fields', :f =&gt; song_form %&gt;
</code>
If skip album name is true, then
(3:40)
``` ruby
&lt;% if include_album_name %>
  <div class="field"></p>

<pre><code>&lt;% f.label :album %&gt; &lt;br /&gt;#more code....
</code></pre>

<p>```</p>

<p><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#asset-tag-helpers">Passing Local Variables into Partials</a>... need to scroll down a little</p>

<p>write_attribute</p>

<p><a href="http://www.davidverhasselt.com/2011/06/28/5-ways-to-set-attributes-in-activerecord/">5 ways to set attributes in ActiveRecord</a></p>

<p>Could use callbacks and lifecycle hooks to normalize as well...
```ruby
before_validate :normalize_name</p>

<p>def normalize_name
  self.name = self.name.downcase.strip
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 6- Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/23/lecture-6-rails/"/>
    <updated>2012-07-23T19:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/23/lecture-6-rails</id>
    <content type="html"><![CDATA[<p>if it has a belongs_to it has a foreign key...
e.g. songs belong to an artist, so it must have an artist_id</p>

<p>``` ruby</p>

<h1>the return value of this is all the songs</h1>

<p>aretha.song &lt;&lt; Song.new(:name => "Natural Woman")</p>

<h1>this is just one song</h1>

<p>respect = aretha.songs.build(:name => "Respect")
```</p>

<p>7:27
``` ruby
favorites.mixtape_songs.build :song => Song.find_by_name("Thriller")</p>

<h1>these accomplish the same thing, but above is more expressive</h1>

<p>favorites.songs &lt;&lt; Song.first
```</p>

<p>the first level of keys in the params hash is usually scope.</p>

<p>what is params?
- user passes in data through forms
- rails takes that data and makes it easy to access through forms</p>

<p>so <em>accepts_nested_attributes</em> is a way for you to specify that this model should accept data for its associations</p>

<p>field_for
f.fields_for :song_genres
is accessing params[:song][:song_genres]</p>

<h3>Select Boxes</h3>

<p>select(method, choices, options = {}, html_options = {})
<code>ruby
&lt;%= song_genre.select :genre_id, [
  ["Rap", 1]
  ["Pop", 2]
  ["Whatever", 3]
  ] %&gt;
</code>
<strong>Text Boxes</strong>:
adding functionalty</p>

<p><strong><em>classes are data and behavior</em></strong>
we have added behavior to the song_genre model because this is the only place the genre_id is being stored.</p>

<p><em>LookUp</em> Ruby try method</p>

<p>``` ruby Delegate
delegate :name, :to => :genre, :prefix => true, :allow_nils => true</p>

<h1>the above macro is the same as the method below method.</h1>

<p>def genre_name
  genre.name if genre
end
```</p>

<h3>Normalization</h3>

<p>the incision point for normalization are easy to do on writer. but if you are using a vanilla writer, then don't write a normalizer just to normalize. Use a gem or something.</p>

<p><code>
:uniq
If true, duplicates will be omitted from the collection. Useful in conjunction with :through.
</code>
in general this goes on the through model... which doesn't make all that much sense, but that's how it goes on many to many relationships
This isn't preventing the creation of duplicates, it's just treating duplicates as singular-- total crap</p>

<p>8:15
Allow destroy
with a checkbox</p>

<h3>Validations</h3>

<p>```</p>

<h1>following valdiation rule is a constraint on the following attribute</h1>

<p>validates :name, :length => {:minimum => 2, :maximum => 12}
validates :name, :uniqueness => { :scope => :song_id}
```
<a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">See rails guides validations</a>
<a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#uniqueness">specifically uniqueness</a></p>

<h3>Technical Debt</h3>

<p>Technical debt (also known as design debt or code debt) is a neologistic metaphor referring to the eventual consequences of poor or evolving software architecture and software development within a codebase. The debt can be thought of as work that needs to be done before a particular job can be considered complete.</p>

<p>in console can call .valid? to debug and see if an object is valid.</p>

<h3>When debugging...</h3>

<p>try to reduce abstraction
-actually need to debug the problem at hand</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 5- Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails/"/>
    <updated>2012-07-22T14:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails</id>
    <content type="html"><![CDATA[<p>HOMEWORK:</p>

<p>In the migration:
``` ruby In the migration
def change
  add_column :songs, :album_id, :integer</p>

<h1>should probably make the below code in the rake tasks (in seed/tasks)</h1>

<p>  songs = Song.all</p>

<p>  songs.each do |s|</p>

<pre><code>album= Album.find_or_create_by_name(s.album_name.string)
#update those songs to relate to that album
puts "UPdating song #{s.id} to album #{album.id}..."
s.album= album
s.save
</code></pre>

<p>  end
  remove_column :songs, :album_name
 end
end
```</p>

<p>Some other methods:</p>

<p>find_each method: look it up in guides <a href="http://guides.rubyonrails.org/active_record_querying.html">here</a>.
find_each yields each individual object one at a time
find_in_batches it yields songs</p>

<p>in the seeds file:
``` ruby Examples
aretha = Song.create :name => "Aretha Franklin"
respect = aretha.songs.build :name => "Respect"
aretha.save</p>

<h1>many to one, the reverse of above</h1>

<p>monster = Song.create :name => "Monster"
monster.build_artist name => "Kanye West"
monster.save</p>

<p>aretha.songs &lt;&lt; Song.new(:name => "Natural Woman")</p>

<h1>unintentional performance issue here because it loads the full array</h1>

<h1>in order to push one song into it</h1>

<p>kanye = Artist.find_by_name => "Kanye West"
kanye.songs &lt;&lt; Song.new(:name => "Home")</p>

<p>michael = Artist.create :name => "Michael Jackson"</p>

<p>michael.songs &lt;&lt; ("Black and white", "Thriller", "beat it").collect do |song_name|</p>

<h1>need collect instead of each method b/c need the return</h1>

<p>  song.create :name => song_name
end</p>

<p>michael.songs.delete(Song.find_by_name("Black and white", "Thriller", "beat it"))
end
```</p>

<p>This will output the log output of the rake tasks:
<code>
tail -f log/development.log
</code></p>

<p>update the forms in the application (2:50)</p>

<p>Shortcut: cmd D shortcut to highlight similar words to edit</p>

<p>errors:
when you get a stack trace and it's part of rails you can ignore it because you created the file NOT rails.</p>

<h3>has_many :through</h3>

<p>(2:58)
artists have many albums through their songs
- a many to many association</p>

<p>if a model has 2 :belongs_to associations means that it is a join table
even though it is a join model is has all the same behaviors as a has_many assoc</p>

<p>INNER JOIN is SQL:
The INNER JOIN keyword return rows when there is at least one match in both tables.</p>

<h3>Foreign Key/ belongs_to RULE</h3>

<p>if it belongs_to xyz it is a foreign key. if it is a foreign key than it belongs_to xyz.</p>

<p>``` ruby Seeds File from the lab
  avi = User.create :name => "Avi"
  favorites = Mixtape.create :name => "Avi's favs"</p>

<p>  avi.mixtapes &lt;&lt; favorites</p>

<p>  black_and_white = michael.songs.first
  black_and_white.genres.build #when it's a many it is genres.build
  #singular is build_genre
  black_and_white.save</p>

<p>  favorites.songs &lt;&lt; black_and_white
  favorites.mixtape_songs.build :song => Song.find_by_name("Thriller")
  #(4:34)
  #if you understand :belongs_to and has_many it doesn't matter if it's a :through</p>

<p>  UserMixtape.create(</p>

<pre><code>:user =&gt; User.create(:name =&gt; "Roland"),
:mixtape =&gt; favorites
)
</code></pre>

<p>```</p>

<h3>Forms</h3>

<p><strong>How do we build forms that give users the same abilities we have through forms?</strong>
If a field name end in an [], it will allow multiple fields and rails will treat it as unique values and glob them together in a params array (4:46)
- If you want to have multiple fields anem it with an empty array</p>

<p>in the mixtapes_controller
``` ruby
@mixtape.songs &lt;&lt; Song.find(params[:song_ids])</p>

<h1>this would also work</h1>

<p>params[:song_ids].each do |song_id|
  @mixtape.mixtape_songs.build :song => song_id
end
```</p>

<p>Next level of abstraction up... (4:55)
in the html we want to pass in:
mixtape[song_ids][]</p>

<p>??Mass assignment is this accordian of ____
a writer method implies an attribute of a model
<strong>Main goal as a programmer</strong> name your data so that it is easily accessbile in params</p>

<p>TODO (5:03)
HTML:
scope, attribute, attribute kind</p>

<h3>form_tag helper</h3>

<p>NEXT: <em>A rails implementation: form_tag helper</em>, a low level rails helper
all these methods do is generate html for you. not all that railsy.
<code>
&lt;%= form_tag mixtapes_path do %&gt;
</code>
At least we aren't writing HTML here now... this level of implementation gives you lots of flexibility and control but at the expense of maintainability and explicitness.</p>

<h3>form helper builders</h3>

<p><em>html, form_tag helpers family, form helpers in order of low level of abstraction to higher</em>
want to bind the active record object to the form element
e.g. text_field, label
(5:17)
<code>ruby
&lt;%= label :mixtape, :name %&gt; #:mixtape represents @mixtape, but rails doesn't support @mixtape
&lt;%= text_field :mixtape, :name %&gt;
</code></p>

<h3>form_for</h3>

<p>We want to bind the instance var to the form itself
- the problem with text_field is that hte form is still built without any knowledge of the active record instance behind the form --> it should be an extension of the object
- these are the way our scaffolds normally work</p>

<p>form_for method yields a form builderthat knows the model the form is about</p>

<p>mixtape_form.object would return the mixtape object because it has knowledge of the form object</p>

<p>you also get access to <em>fields_for</em> -
<code>ruby
mixtape_form.fields_for :mixtape_songs, @mixtape.mixtape_songs.build, :index =&gt; 0 do
|mixtape_songs_field| #index option will increment them automatically
  mixtape_songs_fields_for.label :song_id
  mixtape_songs_fields_for.text_field :song_id
 end
</code>
Does your model implement a method called "mixtape_songs_attributes="
``` ruby
accepts_nested_attributes_for :mixtape_songs</p>

<h1>builds this method:</h1>

<p> def mixtape_songs_attributes=(attributes)
   attributes.each do |attribute_has|
   MixtapeSong.build.attribute_has
 end</p>

<h1>this assigns the attributes of the mixtape_songs</h1>

<h1>this is the same as</h1>

<p>def mixtape_songs_attributes=(attributes)
   attributes.each do |index, mixtape_song_attributes|</p>

<pre><code> MixtapeSong.new :song_id = mixtape_song_attributes[:song_id]
</code></pre>

<p>   end
end
```</p>

<p><a href="http://masonoise.wordpress.com/2010/07/23/rails-and-forms-using-accepts_nested_attributes_for/">Read</a>
<a href="http://railscasts.com/episodes/196-nested-model-form-part-1">railscast</a>
<a href="http://asciicasts.com/episodes/196-nested-model-form-part-1">ascii casts</a></p>

<p><strong>an attribute has a getter and setter method called the name of the attribute</strong></p>

<p>Rails Casts on this subject:
<a href="http://railscasts.com/episodes/47-two-many-to-many/">Many to Many</a></p>

<p><a href="http://railscasts.com/episodes/73-complex-forms-part-1/">Complex Forms - 1</a></p>

<p><a href="http://railscasts.com/episodes/74-complex-forms-part-2/">Complex Forms - 2</a></p>

<p><a href="http://railscasts.com/episodes/75-complex-forms-part-3">Complex Forms - 3</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested models 1</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-revised">Nested Models- revised</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html">API reading</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Site Request Forgery]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery/"/>
    <updated>2012-07-21T13:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery</id>
    <content type="html"><![CDATA[<h3>Cross Site Request Forgery</h3>

<p>Description Summary
:  The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</p>

<p>Extended Description
:  When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</p>

<p>Ensures that information submitted through forms have a specific tag that identifies it as information submitted through the form I created. (Read more about csrf <a href="http://stackoverflow.com/questions/941594/understand-rails-authenticity-token">here</a> and <a href="http://stackoverflow.com/questions/9996665/rails-how-does-csrf-meta-tag-work">here.</a>)</p>

<p>This is the out of context code I have from class...
<code>
csrf metatabs
</code></p>

<p>NOTE: We went over this in lecture 6 of ROR spring</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buzz Word Alert: Polymorphic]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/20/buzz-word-alert-polymorphic/"/>
    <updated>2012-07-20T17:57:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/20/buzz-word-alert-polymorphic</id>
    <content type="html"><![CDATA[<h3>Polymorphism</h3>

<ul>
<li>“is the ability of objects belonging to different types to respond to method calls of the same name, each one according to an appropriate type-specific behaviour.” (wikipedia)
-is a language feature that allows the same function call to be associated with different definitions during the same execution, by delaying the binding of the call to run-time. <a href="http://cs.calvin.edu/curriculum/cs/214/adams/labs/10/">here</a></li>
</ul>


<h3>Some Real Life Examples</h3>

<ul>
<li>depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:
<code>ruby
mixtape_path(@mixtape) #=&gt; '/mixtapes/1'
</code>
real life e.g.s
subway slot can accept a metrocard and a credit card-- depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</li>
</ul>


<h3>Polymorphic Associations</h3>

<ul>
<li>in the <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">guides</a> it states: "With polymorphic associations, a model can belong to more than one other model, on a single association."</li>
<li>You can think of a polymorphic belongs_to declaration as setting up an interface that any other model can use.</li>
</ul>


<p>As usual Ryan Bates to the rescue-- <a href="http://railscasts.com/episodes/154-polymorphic-association?view=comments">polymorphic association rails cast.</a></p>

<p>Imagine an event website. We want to add a comments section. How would be do this because comments would belong to either the photo, article, or event.
Without polymorphic associations we would probably try to create a model for each instance-- a photo comment, an article comment and an event comment. That's 3 models with the same data and behavior so we want to combine these into one generic comment model that can belong_to any of these other models.</p>

<p><code>ruby
rails generate scaffold comment content:text commentable_id:integer commentable_type:string
</code></p>

<p>A <em>polymorphic association</em> is an association that can belong_to many different models...</p>

<p><code>ruby Polymorphic Association
class Comment &lt; ActiveRecord::Base
  belongs_to :commentable, :polymorphic =&gt; true
end
</code>
The rails docs refer to the :as keyword parameter to has_one and has_many as specifying a “polymorphic interface.”</p>

<p>At the database level, the Comment table will have two columns for the association: commentable_type and commentable_id. <em>A composite foreign key.</em></p>

<p>To set up the other side of the association:
``` ruby
class Article &lt; ActiveRecord::Base
  has_many :comments, :as => :commentable #the :as => :commentable indicates the PolyMorph assoc
end</p>

<h1>similar code would be repeated for all of the associations-- in this case event &amp; photo</h1>

<p>```
So the polymorphic bit means that the type of thing you’re going to get back when you ask a Comment for its commentable data is unknown... it could be an article or it could be an event or it could be a photo. In dynamic Ruby land, Ruby terms, this means I don’t care what I sort of model I get when I ask a comment for its commentable data, as long as it goes quack I can treat it like it’s a duck.</p>

<p>Enter <em>interfaces</em>. Interfaces specify what I want the returned object to behave like, it could be a duck, or it could be a spaceship or maybe, just maybe, it could be commentable. In fact if you read though the ActiveRecord docs on polymorphic associations, you will find that “interface” is exactly what they call the parameter passed in the :as key of the params hash, and the first parameter to a polymorphic belongs_to association, and even the xxx_type and xxx_id columns in the database. This threw me quite a bit when I first looked at polymorphic associations, you have to declare that the association uses the commentable interface, but you don’t have a commentable model, or a commentable table, or a commentable anything for that matter. To my mind, "commentable" is the name of the interface that the comments all have to implement. It could specify that all of them must have a “next_comment” method, which will give me (surprise surprise) the next comment they produce. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">(Read more on this)</a></p>

<p>My comment model does not need to be changed when I add another commentable type. This is important. Very important! As soon as anyone with even a mild case of featuritus gets near your code they are going to want to add stuff, and more often that not, that will mean adding new classes. If adding new classes means adding new branches to all your conditional logic, you are in trouble. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">See here again</a></p>

<p>Once the associations are wired, how can we use this in the controller and views?
- For the most part, this can be treated like any other has_many association. e.g. can call article.comments to list all the comments of the article.
- A lot of confusion can arise if you are doing nested resources</p>

<p>Need to change the routes:
``` ruby
map.resources :articles, :has_many => :comments
map.resources :photos, :has_many => :comments
map.resources :events, :has_many => :comments</p>

<h1>i realize this isn't Rails 3.2 code...</h1>

<p>```</p>

<p>At the end of the comment controller, Ryan adds the find_commentable method:
``` ruby
private</p>

<p>def find_commentable
  params.each do |name, value|</p>

<pre><code>if name =~ /(.+)_id$/
  return $1.classify.constantize.find(value)
end
</code></pre>

<p>  end
  nil
end
```</p>

<h3>Beyond the rails cast</h3>

<p><a href="http://teachmetocode.com/articles/ruby-on-rails-what-are-polymorphic-associations/">Charles Max Wood's explanation</a></p>

<p>Polymorphic associations allow us to associate a single attribute of the class to any number of specified classes.
Charles suggest that you <a href="http://teachmetocode.com/articles/ruby-on-rails-polymorphic-associations-with-mixin-modules/">put your polymorphic associations and related functionality into mixin modules</a>.
<a href="http://www.youtube.com/watch?v=9NiCx1Lu-DY">Youtube Video</a>-
Polymorphic means that it can take different forms. A comment can belong_to a page or a post. Most devs name this ___able. e.g. for a comment it would be commentable. This just a convention.</p>

<p>On the has_many side this becomes a little muddy: if commentable can be a page or a post then a comment, it's going to go looking for a page ID on the comments table and it's not going to find it. So the solution is:
``` ruby
has_many :comments, :as => :commentable</p>

<h1>saying: i have many comments and the comments refer to me as commentable</h1>

<p>```
 If you have a belongs_to :commentable on your comment, you are going to expect it to have a commentable_id on the comments table (which it does!). But is that _id a post.id page.id? This is answers by having a commentable type column as well on the comments table-- it's a string column that stores the class name for whatever is associated there (i.e. post or page). So when you invoke joins or includes it has to go looking for the type column of commentable type.</p>

<p>Note: many to many polymorphic associations don't seem to work very well
There is a video on this <a href="http://www.youtube.com/watch?v=vEo6hmHTvS4">here</a>.</p>

<p><a href="http://robots.thoughtbot.com/post/159809241/whats-the-deal-with-rails-polymorphic-associations">The beginning of this is worth a read</a>... even if it's from 2006.</p>
]]></content>
  </entry>
  
</feed>

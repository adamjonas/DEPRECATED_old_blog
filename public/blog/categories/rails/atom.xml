<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Hack hack hack...]]></title>
  <link href="http://www.blog.adamjonas.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.blog.adamjonas.com/"/>
  <updated>2012-11-08T09:54:26-05:00</updated>
  <id>http://www.blog.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day22]]></title>
    <link href="http://www.blog.adamjonas.com/blog/fis-day22/"/>
    <updated>2012-11-07T10:10:00-05:00</updated>
    <id>http://www.blog.adamjonas.com/blog/fis-day22</id>
    <content type="html"><![CDATA[<h3>HTTParty</h3>

<ul>
<li><a href="https://github.com/jnunemaker/httparty">On github</a></li>
<li><a href="http://blog.teamtreehouse.com/its-time-to-httparty">Treehouse blog post</a></li>
</ul>


<h3>Rant</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Conway%27s_law">Conway's law</a>

<ul>
<li>organizational communication will be reflected in the product</li>
</ul>
</li>
</ul>


<p>seagull architect -</p>

<blockquote><p>comes in, shits all over your code and then leaves</p></blockquote>

<p><a href="https://speakerdeck.com/sarahmei/the-insufficiency-of-good-design">Insufficiency of good design</a></p>

<p>Open source: def up and down in migration.rb in rails can be refactored</p>

<h3>POTD</h3>

<p><a href="http://en.wikipedia.org/wiki/Joseph_Weizenbaum">Joseph Weizenbaum</a></p>

<h2>Rails Lecture</h2>

<p>```ruby Controller Test Continued from Day21...
require 'spec_helper'</p>

<p>describe SongsController do
  describe 'POST /songs' do</p>

<pre><code>it 'should create a song with a name' do
  post :create, {:song =&gt; {:name =&gt; "Thriller"}}

  assigns(:song).name.should == "Thriller"
end

it 'should create a song with an artist name' do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :artist_name =&gt; "Michael Jackson"}}

  assigns(:song).artist_name.should == "Michael Jackson"
end

it "should create a song with a genre string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; "Pop"}}

  assigns(:song).genre_names.should include("Pop")
end


it "should create a song with a genres from a CSV string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; "Pop, Techno"}}

  assigns(:song).genre_names.should include("Pop")
end

it "should create a song with a genre array containing CSV string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; ["Pop, Techno", "Rap"]}}

  assigns(:song).genre_names.should include("Pop")
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby song_spec.rb Unit Test
require 'spec_helper'</p>

<p>describe Song do
  let(:song){Song.new(:name => "Thriller")}</p>

<p>  context 'with genres' do</p>

<pre><code>let(:genre){Genre.create(:name =&gt; "Pop")}

context '.genre_names' do
  it "should return an array of genre names" do
    song.genres &lt;&lt; genre
    song.save


    song.genre_names.should be_an_instance_of(Array)
    song.genre_names.should include("Pop")
  end

  it "should accept a genre name and add that genre" do
    song.genre_names = "Techno"
    song.save

    song.genre_names.should include("Techno")
  end

  it "should accept a comma delimited list of genre names" do
    song.genre_names = "Techno, Pop"
    song.save

    song.genre_names.should include("Techno", "Pop")
  end

  it "should accept an array containing comma delimited list of genre names" do
    song.genre_names = ["Techno, Pop", "Rap"]
    song.save

    song.genre_names.should include("Techno", "Pop", "Rap")
  end

  it "should only add unique genres" do
    song.genre_names = ["Pop", "Pop"]
    song.save

    song.genre_names.count.should == 1
  end

end
</code></pre>

<p>```
rake spec:models</p>

<p><code>ruby gem file
group [:development, :test] do
  gem 'debugger'
end
</code></p>

<ul>
<li>detect returns nil if there is not match</li>
<li>select returns an empty array when no match</li>
</ul>


<p><a href="http://guides.rubyonrails.org/active_support_core_extensions.html#array-conversions"><strong>to_sentence method in rails</strong></a></p>

<h3>HTML &lt; form_tag lower &lt; form_for</h3>

<p><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag">form_tag</a></p>

<p>```
<form action="/songs" id="new_song" class="new_song"> <form></p>

<p>&lt;%= form_tag(songs_path, :id => "new song") do %>
  &lt;%= text_field_tag "song[name]", @song.name, :id => "song_name"] %>
  &lt;%= text_field_tag "song[artist_name]", @song.artist_name, :id => "song_artist_name"] %>
  &lt;%= submit_tag "Create Song", :id => "create_song" %>
&lt;% end %></p>

<p>&lt;%= form_for(@song) do |f| %>
  &lt;%= f.text_field :name %>
  &lt;%= f.text_field :artist_name %>
  &lt;%= f.submit %>
&lt;% end %>
```
<a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag">text_field_tag docs</a></p>

<h3>Integration test / Acceptance Test</h3>

<ul>
<li><p><a href="http://railscasts.com/episodes/187-testing-exceptions">Railscast 187</a></p></li>
<li><p><a href="http://railscasts.com/episodes/257-request-specs-and-capybara">Railscast 257</a></p></li>
<li><a href="https://github.com/copiousfreetime/launchy">launchy gem</a> to see that page that capybara filled out - useful for creating fixtures</li>
<li><p>post_via_redirect</p>

<ul>
<li>get => response</li>
<li>visit => page</li>
</ul>
</li>
</ul>


<h3>Continuous Integration / Testing</h3>

<ul>
<li>autotest</li>
<li>guard

<ul>
<li><a href="https://github.com/guard/guard">gem guard-rspec</a></li>
</ul>
</li>
<li>rb-fsevent -> rb-FileSaveEvent -> gem that pings guard (or anything else) when a file is saved</li>
<li>growl extension or terminal notifier on the <a href="https://github.com/guard/guard#terminal-notifier">guard gem page</a></li>
<li><a href="https://github.com/jnicklas/capybara">capybara</a></li>
</ul>


<p><strong>receiver.try(:method) -> if the receiver is nil then try will not call the method, otherwise it will</strong></p>

<h3>Pull down the other app</h3>

<p>git merge upstream/master</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day21]]></title>
    <link href="http://www.blog.adamjonas.com/blog/fis-day21/"/>
    <updated>2012-11-06T13:57:00-05:00</updated>
    <id>http://www.blog.adamjonas.com/blog/fis-day21</id>
    <content type="html"><![CDATA[<p><strong><em>Generate a model that is singular-- ALWAYS</em></strong></p>

<p>'self' means the receiver of this method call</p>

<p><a href="http://blog.aviflombaum.com/blog/2012/07/dont-use-accepts-nested-attributes-for-with-belongs-to/"><strong>never ever have a nested attributes for belongs_to ONLY has has_many</strong>
</a></p>

<p>```ruby song.rb Model
Class Song</p>

<p>  def add_genre(genre)</p>

<pre><code>genre = Genre.find_or_create_by_name(genre) if genre.is_a?(String) 
self.song_genres.create(:genre =&gt; genre).genre
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>```ruby song_spec.rb Unit Test
require 'spec_helper'</p>

<p>describe Song do
  context '.add_genre' do</p>

<pre><code>before(:each) do
  let(:song){Song.create(:name =&gt; "Thriller")} 
  let(:genre){Genre.create(:name =&gt; "Pop")} #this creates the genre method that executes the block that follows it.

  it "should add the genre" do
    song.add_genre(genre)

    song.genres.should include(genre)
  end

  it "should return the newly added genre" do
    song.add_genre(genre) should == genre #this means it won't return a full array like a push method return
  end

  it 'should accept an existing genre name do'
    genre = Genre.create(:name =&gt; "Techno")
    song.add_genre("Techno").should == genre
  end

  it 'should accept a genre name' do
    song.add_genre("Pop").should == genre
  end

  it "should add only unique genres" do
    #if I add the same genre twice, it should still 
    song.add_genre(genre)
    song.add_genre(genre)

    song.genres.count.should == 1
  end
</code></pre>

<p>  end
end
```
Rspec runs its tests in isolation, by running each test in a transaction. After each test, it rollbacks all the writes.</p>

<p>LOGS:
<code>
tail -f #open the end of the file and keep it open.
</code></p>

<p>If you are building associated data outside of your model, then you haven't encapsulated enough.</p>

<ul>
<li>Tests Hierarchy in ascending levels of abstraction

<ul>
<li>unit tests</li>
<li>controller tests</li>
<li>integration tests</li>
</ul>
</li>
</ul>


<p>```ruby Controller Test
require 'spec_helper'</p>

<p>describe SongsController do
  describe 'POST /songs' do</p>

<pre><code>it 'should create a song with a name do'
  post :create, {:song =&gt; {:name =&gt; "Thriller"}}
  #create action in the song controller with post or request parameters that you 
  #want to send along with it

 # Song.find_by_name("Thriller").should be_true
 assigns(:song).name.should == "Thriller"
end

it 'should create a song with an artist name'
  post :create, {:song =&gt; {:name =&gt; "Thriller", :artist_name =&gt; "Michael Jackson"}}}
  #this makes artist_name a first class citizen in the params hash.

  #we killed this because we are assigning a string, not an artist object--&gt; post :create, {:song =&gt; {:name =&gt; "Thriller", :artist =&gt; {:name =&gt; "Michael Jackson"}}} 

  #create action in the song controller with post or request parameters that you 
  #want to send along with it

  #Song.find_by_name("Thriller").should be_true
  assigns(:song).artist.name.should == "Michael Jackson"
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby song_spec.rb
context '.artist_name' do
  it "should have an artist_name method" do</p>

<pre><code>song.should respond_to(:artist_name)
</code></pre>

<p>  end</p>

<p>  it 'should return a songs artist' do</p>

<pre><code>song.artist = Artist.create(:name =&gt; "Michael Jackson")
song.artst_name.should == "Michael Jackson"
</code></pre>

<p>  end
end</p>

<p>  context '.artist_name=' do</p>

<pre><code>it "should assign the artist via the name" do
  song.artist_name = "Michael Jackson"
  song.artist.should be_a(Artist)
  song.artist_name.should == "Michael Jackson"
end
</code></pre>

<p>  end
```</p>

<p>```ruby Song.rb Model
  def artist_name</p>

<pre><code>self.artist.name if self.artist
</code></pre>

<p>  end</p>

<p>  def artist_name=(string)</p>

<pre><code>self.artist = Artist.find_or_create_by_name(string)
</code></pre>

<p>  end
```</p>

<h3>SOLID</h3>

<p>Procedural code- solutions for very specific problems</p>

<p>dependencies will kill your code, but design will save it</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accepts Nested Attributes For]]></title>
    <link href="http://www.blog.adamjonas.com/blog/accepts-nested-attributes-for/"/>
    <updated>2012-10-31T16:14:00-04:00</updated>
    <id>http://www.blog.adamjonas.com/blog/accepts-nested-attributes-for</id>
    <content type="html"><![CDATA[<p>So accepts nested attributes is really about writing to an attribute of a class.</p>

<p>In my case a location belongs_to a user. I was then trying to set the location.street1 through the user, but it wouldn't write. This is because it needs the accepts_nested_attributes method in the model.</p>

<p><code>ruby If I want to manage questions through my surveys forms...
class Survey &lt; ActiveRecord::Base
  has_many :questions, :dependent =&gt; :destroy
  accepts_nested_attributes_for :questions, allow_destroy: true
end
</code>
<a href="http://railscasts.com/episodes/196-nested-model-form-revised">Railscast</a>
  - min 6 javascript</p>

<p>destroy -> allow_destroy: true</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day16]]></title>
    <link href="http://www.blog.adamjonas.com/blog/fis-day16/"/>
    <updated>2012-10-25T09:39:00-04:00</updated>
    <id>http://www.blog.adamjonas.com/blog/fis-day16</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Linus Torvalds</p>

<h2>Rails</h2>

<p>rails assigns attr_accessors</p>

<p><code>ruby Active Record Queries
song.limit(2).last #=&gt; this is the second to last song
Song.find(1)
Song.find_by_name
Song.find_by_anyattrributename
Song.find_all_by_name #=&gt; sweet
</code></p>

<h3>ORM ~> Object Relational Mapping</h3>

<ul>
<li><strong>A ruby class is to a databse table as instances of that class are to a row in that table</strong>

<ul>
<li>the form field should map to the column name</li>
</ul>
</li>
<li>activerecord's exists to accomplish CRUD</li>
<li>active record pattern <a href="http://books.google.com/books?id=FyWZt5DdvFkC&amp;lpg=PA1&amp;dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&amp;pg=PT187#v=onepage&amp;q=active%20record&amp;f=false">proposed by Martin Fowler</a></li>
</ul>


<p><code>ruby Persistence
new_song = Song.new
new_song.persisted? #=&gt; false
new_song.new_record? #=&gt; true
new_song.save
new_song.persisted? #=&gt; true
new_song.new_record? #=&gt; false
</code>
<code>ruby ORM Awareness
new_song.name = "new"
s.changed? #=&gt; true
s.changes #=&gt; {"name=&gt; ["whatever", "new"]}
s.name_changed? #=&gt; true
s.duration_changed #=&gt; false
</code>
<code>ruby
song.destroy #=&gt; will destroy the record
song.delete #=&gt; don't use this for now
</code></p>

<h3>REST</h3>

<p>Identification of a resource
Individual resources that are identified in the requests, for example using the URIs sin web-based REST systems.</p>

<p>REST- the url address should mirror the http verb and url action</p>

<ul>
<li><em>What do you mean by a representation?</em></li>
<li>these objects have different representations depending on their name</li>
<li>.xml should return the xml and .json and return the json</li>
<li>the objects should be devoid of your form until you ask for them</li>
</ul>


<h3>Routes</h3>

<p>```ruby Routes File syntax
get '/welcome' => 'application#welcome'</p>

<h1>same as ApplcationController.welcome</h1>

<p>=> {controller => 'application', :action => 'welcome'}
resources :songs #is a macro that is calling 7 methods for you
```</p>

<ul>
<li>the routes file are evaluated with lazy evaluation. Which allows you to put the most specific patterns on top and let them trickle down...</li>
<li>7 restful routes: get, create, update, delete, show, etc.</li>
<li><p><em>url endpoint</em>- the very last thing that is executed after a url request- the last application run is the action in the controller</p></li>
<li><p><strong>URL request cascade through a rails app:</strong></p>

<ol>
<li>web server gets request</li>
<li>send it through the rack</li>
<li>last stop, routes file</li>
<li>match a  route</li>
<li>request = SongContoller.new</li>
<li>response = request.index</li>
</ol>
</li>
</ul>


<p>Rails was the first to have implicit rendering...
```ruby Implicit Rendering
def index
  @index = Song.all
end</p>

<h1>this will implicitly render the index page</h1>

<h1>could also add ~> render 'artist/index' &lt;~ which will over-write the implicitly render</h1>

<h1>'artist/index' is a method called on self</h1>

<p>```</p>

<p>class variable can inherit down the inheritance tree
a class instance var is private to the class</p>

<p>```ruby
def initialize</p>

<pre><code>@songs = []
@genres = []
Artist.all &lt;&lt; self??
</code></pre>

<p>  end
```</p>

<p>VPS- Virtual Private server</p>

<p>Linux distribution - ubuntu
server - nginx
unicorn
DB- postgres</p>

<h3>Visualization</h3>

<ul>
<li>how does a partition actually work?

<ul>
<li>2 cores or 4 cores?? i don't know what a core is.</li>
</ul>
</li>
<li>hardware usually out-paces software

<ul>
<li>we have had <em>multi-core processors</em> before we had software to take advantage of it.</li>
</ul>
</li>
<li><p>vocab:</p>

<ul>
<li>slice, a box, a vps, are pretty much synonymous</li>
</ul>
</li>
<li><p>dediserve is the server we are using</p></li>
<li>RAM has fast access.</li>
<li><a href="http://vimeo.com/15882917">capistrano</a></li>
</ul>


<p>```
ssh root@96.8ipaddress</p>

<h1>will get an error saying that you can't connect</h1>

<h1>say yes</h1>

<h1>next insert your password:</h1>

<h1>create a new user instead of root</h1>

<p>useradd #to get access to instructons
man useradd
useradd -m -s /bin/bash -G sudo ajonas</p>

<h1>sudo says anyone in sudo group can use sudo adam</h1>

<h1>userdel will delete a user</h1>

<p>passwd ajonas</p>

<h1>enter password:</h1>

<p>ssh root@96.8ipaddress will get you in</p>

<p>sudo apt-get update #for updating indexes and downloading packages, like homebrew
sudo apt-get upgrade
build-apt-install build-essential</p>

<h1>install your packages with apt-get</h1>

<p>```</p>

<h3>Capistrano</h3>

<ul>
<li><p>handles your <a href="http://en.wikipedia.org/wiki/Release_management">release management</a> throw the entire code base on your server every time you deploy. Copy code off of Github or server and apply it. This will maintain revisions, roll back easily, compile the CSS in your assets. It can't happen manually.
<code>
cap deploy
</code>
will do this for you. It's script-able and automatic.</p></li>
<li><p>This is run locally.</p></li>
<li>cap is what you use to interact with capistrano from the outside (like rails new from outside a rails project)</li>
<li>capify is how you interact with the gem (like rails generate inside the project folder)</li>
</ul>


<h3>Web Servers</h3>

<ul>
<li>apache was the market leader for best of breed of web server</li>
<li><p>ngenx - can handle lots of requests and tries to stay really small</p>

<ul>
<li>has much smaller memory footprint</li>
<li>has some features that are better suited for rails</li>
<li>ngenx is also a really good load balancer</li>
<li>config file is much easier to understand than ngenx</li>
</ul>
</li>
<li><p>Four functions in the config/deploy.rb DSL</p>

<ul>
<li>set: capistrano variables</li>
<li>role:</li>
</ul>
</li>
</ul>


<h3>Further reading</h3>

<ul>
<li>backups</li>
<li>log rotations - when your log gets too big, it is going to zip it up and send it to some long term storage. The first thing hackers will do is go through the logs.</li>
</ul>


<h3>Reading in prep:</h3>

<ul>
<li>Capistrano reads its instructions from a capfile.</li>
<li>many server clusters are hidden behind NATs (Network address translation) and firewalls, to prevent direct access.

<ul>
<li>NATs - the process of modifying IP address information in IP packet headers while in transit across a traffic routing device.</li>
</ul>
</li>
<li>Tasks are the foundation of a Capistrano setup; collections of tasks are typically called Recipes.</li>
<li><p>Daemons are special system applications which typically execute continuously in the background and await requests for the functions they provide from other applications.</p></li>
<li><p><em>From lowest to highest, the layers of the internet protocol suite are:</em></p></li>
<li>The link layer (commonly Ethernet) contains communication technologies for a local network.</li>
<li>The internet layer (IP) connects local networks, thus establishing internetworking.</li>
<li>The transport layer (TCP) handles host-to-host communication.</li>
<li><p>The application layer (for example HTTP) contains all protocols for specific data communications services on a process-to-process level (for example how a web browser communicates with a web server).</p></li>
<li><p>Stateless firewalls require less memory, and can be faster for simple filters that require less time to filter than to look up a session.</p></li>
<li><p>Modern firewalls can filter traffic based on many packet attributes like source IP address, source port, destination IP address or port, destination service like WWW or FTP.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asset Pipeline]]></title>
    <link href="http://www.blog.adamjonas.com/blog/asset-pipeline/"/>
    <updated>2012-09-10T14:31:00-04:00</updated>
    <id>http://www.blog.adamjonas.com/blog/asset-pipeline</id>
    <content type="html"><![CDATA[<p>Manifest - tells the app what to include</p>

<p>in an app, it tells the app what .js and .css files to include</p>

<p>The slowest thing about any connection is the opening
The browser limits a domain to 4 paralell connections at a time.</p>

<p>flash of unstyled content (fouc)
Asset hosting. distribute your assets to multiple</p>

<p>CDN-
we don't connect directly to a server. We make hops.</p>

<p>DHCP- distribute IDs to all the computers on the local network</p>

<p>everything is a proc and lambda in js. they are all anonymous functions.</p>

<p>Speed:
perceived speed.</p>

<p>The bulk is what is slow is in the front end.</p>

<p>In production we will have just one file of assets.</p>

<p>sprockets-- opens the assets in the application.js file.
<a href="https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/directive_processor.rb">https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/directive_processor.rb</a>
require_tree-</p>

<p>once somethign is required once, spockets will recognize it and not require it again. The order implicitly is in alphabetical order. If this is done <em>explicitly</em> then you are in control.</p>

<p>your app takes precedence over the vendor path</p>

<p>One style sheet and one js and you let rails handle the rest</p>

<p>Gemify a js file
takes the current assets file
go into the manifest file and add the jquery token or add it itself.</p>

<p>Gem
has it's own asset pipeline and add it's own asset pipeline</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubymotion | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2013-04-23T10:45:27-04:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion Day 5]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-day-5/"/>
    <updated>2013-01-25T09:54:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-day-5</id>
    <content type="html"><![CDATA[<h3>CA Animation</h3>

<ul>
<li><p>Animation family tree</p>

<ul>
<li>CA Animattion

<ul>
<li>CA Animation Group</li>
<li>CA Property Animation</li>
<li>CA Transition

<ul>
<li>CA basic animation is for linear animation</li>
<li>keyanimattion is for more specific or non-linear animation</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Animated Properties</p>

<ul>
<li>CGColorRef -> shadowColor, borderColor</li>
<li>NSNumber (float) -> opactity, shadowRadius</li>
<li>NSVAlue (CGRect) -> bounds, contentsRect</li>
<li>NSValue (CGPoint) -> anchorPoint (is the center point for rotation), position</li>
<li>NSValue (CATransform3D) -> transform</li>
</ul>
</li>
<li><p>CATransform3d</p>

<ul>
<li>CoreGraphics is just in 2 dimensions</li>
<li>Can add a perspective column in the z column -- (as opposed to just x and y planes (the 3rd column is for perspective) -- to create the illusion that it is tilted back</li>
</ul>
</li>
<li><p>Easing: to control the acceleration or deceleration of the objects in the animation. This is used to simulate real life forces like friction or gravity.</p></li>
</ul>


<h2>Web Services</h2>

<ul>
<li>Synchronous URL Fetch (not recommended) -> <em>if you block the main thread, your application will freeze</em>

<ul>
<li>NSURLConnection -(request)-> NSMutableURLRequest -(URL)-> NSURL

<ul>
<li>NSURLConnection, the class of CocoaTouch to send requests to web services</li>
</ul>
</li>
</ul>
</li>
<li><p>Asynchronous URL Fetch (the one we are going to use)</p></li>
<li><p>we can block the whole app execution until the web service responds OR send the request and forget about it, avoiding blocking the app execution. Once the service responds we process the result.</p>

<ul>
<li>The later option is the right one.</li>
</ul>
</li>
<li>We send and Asynchronous request to the service using a NSOperationQueue. This block of code will be executed in a background Queue defined by the NSOperationQueue.

<ul>
<li>This block receives three parameters:

<ul>
<li>response: An object with an instance of NSURLResponse.</li>
<li>data: The response returned by the service as a NSData object.</li>
<li>error: An NSError with the error, if any, returned by the service.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Core Data</h3>

<ul>
<li>StoreTypes

<ul>
<li>SQlite, binary file, NOT xml formats (only available in OS10)</li>
</ul>
</li>
<li>Predicates</li>
<li>NSManagedObject

<ul>
<li>class capable of storing data for an instance of any entity.</li>
<li>access properties (attributes, relationships) via key-value coding methods (valueForKey:, setValue:forKey)</li>
</ul>
</li>
<li>Relationships

<ul>
<li>delete rule: "if an attempt is made to delete the source object..."

<ul>
<li>nullify (the inverse relationship)</li>
<li>deny (if any destination relationships)</li>
<li>cascade (delete any destination relationships, too) -> <em>very dangeous</em></li>
<li>No action</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
  # In Core Data we can have relationship between objects, so lets add one
  # to the Director Object
  @relationships ||= [</p>

<pre><code># IMPORTANT: In Core Data is required to have a circular relationships between
# the two objects. In these case we are adding a Relationship from Movie to Director
# but also we will need one from Director to Movie, these relationship is called Inverse
# Relationship

# Relationship Name, Relationship Class, Inverse Relationship, Is Optional, Is Indexed,
# Is Ordered, Min Count, Max Count, Delete Rule
['director', 'Director', 'movie', true, false, true, 0, 1, NSNullifyDeleteRule]
</code></pre>

<p>  ]
```</p>

<ul>
<li>The relationships in Core Data are circular, what these means is that if we want to create a relationship from Movie to Director we also need another one from Director to Movie.</li>
</ul>


<h3>Debugger</h3>

<ul>
<li>rake debug=1, backtrace (or bt), fr <number>

<ul>
<li>n to step to the next line in the file</li>
<li>quit to quit.</li>
</ul>
</li>
</ul>


<h3>3rd Party Libs</h3>

<ul>
<li>CorePlot -> to build graphs</li>
</ul>


<h3>Wrappers</h3>

<ul>
<li>[formotion](https://github.com/clayallsopp/formotion -> to easily create complex forms</li>
<li><a href="https://github.com/clayallsopp/formotion">walt</a> -> wrapper of core animation</li>
<li><a href="https://github.com/clayallsopp/formotion">teacup</a> -> pretty much create a stylesheet for the views</li>
<li><a href="https://github.com/clayallsopp/formotion">sugarcube</a> -> redefining methods to be more semantic</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Day 5]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-day-5/"/>
    <updated>2013-01-25T09:54:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-day-5</id>
    <content type="html"><![CDATA[<h3>CA Animation</h3>

<pre><code>- Animation family tree
    - CA Animattion
        - CA Animation Group    
        - CA Property Animation
        - CA Transition
            - CA basic animation is for linear animation
            - keyanimattion is for more specific or non-linear animation


- Animated Properties
    - CGColorRef -&gt; shadowColor, borderColor
    - NSNumber (float) -&gt; opactity, shadowRadius
    - NSVAlue (CGRect) -&gt; bounds, contentsRect
    - NSValue (CGPoint) -&gt; anchorPoint (is the center point for rotation), position
    - NSValue (CATransform3D) -&gt; transform

- CATransform3d
    - CoreGraphics is just in 2 dimensions
    - Can add a perspective column in the z column -- (as opposed to just x and y planes (the 3rd column is for perspective) -- to create the illusion that it is tilted backs
    -  

- Easing
&gt;Easing means to control the acceleration or deceleration of the objects in the animation. This is used to simulate real life forces like friction or gravity.
</code></pre>

<h2>Web Services</h2>

<pre><code>- Synchronous URL Fetch (not recommended) -&gt; *if you block the main thread, your application will freeze*
    - NSURLConnection -(request)-&gt; NSMutableURLRequest -(URL)-&gt; NSURL
        - NSURLConnection, the class of CocoaTouch to send requests to web services
-  Asynchronous URL Fetch (the one we are going to use)

- we can block the whole app execution until the web service responds OR send the request and forget about it, avoiding blocking the app execution. Once the service responds we process the result.
    - The later option is the right one.
- We send and Asynchronous request to the service using a NSOperationQueue. This block of code will be executed in a background Queue defined by the NSOperationQueue.
        - This block receives three parameters:
            - response: An object with an instance of NSURLResponse.
            - data: The response returned by the service as a NSData object.
            - error: An NSError with the error, if any, returned by the service.
</code></pre>

<h3>Core Data</h3>

<pre><code>- StoreTypes
    - SQlite, binary file, NOT xml formats (only available in OS10)
- Predicates
- NSManagedObject
    - class capable of storing data for an instance of any entity.
    - access properties (attributes, relationships) via key-value coding methods (valueForKey:, setValue:forKey)
- Relationships
    - delete rule: "if an attempt is made to delete the source object..."
        - nullify (the inverse relationship)
        - deny (if any destination relationships)
        - cascade (delete any destination relationships, too) -&gt; *very dangeous*
        - No action
</code></pre>

<p>```ruby
  # In Core Data we can have relationship between objects, so lets add one
  # to the Director Object
  @relationships ||= [</p>

<pre><code># IMPORTANT: In Core Data is required to have a circular relationships between
# the two objects. In these case we are adding a Relationship from Movie to Director
# but also we will need one from Director to Movie, these relationship is called Inverse
# Relationship

# Relationship Name, Relationship Class, Inverse Relationship, Is Optional, Is Indexed,
# Is Ordered, Min Count, Max Count, Delete Rule
['director', 'Director', 'movie', true, false, true, 0, 1, NSNullifyDeleteRule]
</code></pre>

<p>  ]
```</p>

<pre><code>- The relationships in Core Data are circular, what these means is that if we want to create a relationship from Movie to Director we also need another one from Director to Movie.
</code></pre>

<h3>Debugger</h3>

<pre><code>- rake debug=1, backtrace (or bt), fr &lt;number&gt;
    - n to step to the next line in the file
    - quit to quit.
</code></pre>

<h3>3rd Party Libs</h3>

<pre><code>- CorePlot -&gt; to build graphs
</code></pre>

<h3>Wrappers</h3>

<pre><code>- [formotion](https://github.com/clayallsopp/formotion -&gt; to easily create complex forms
- [walt](https://github.com/clayallsopp/formotion) -&gt; wrapper of core animation
-   [teacup](https://github.com/clayallsopp/formotion) -&gt; pretty much create a stylesheet for the views
- [sugarcube](https://github.com/clayallsopp/formotion) -&gt; redefining methods to be more semantic
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Day 4]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-day-4/"/>
    <updated>2013-01-24T09:58:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-day-4</id>
    <content type="html"><![CDATA[<h3>Auto-rotation in View Controller</h3>

<h3>Notifications</h3>

<h3>File Structure</h3>

<ul>
<li>the RubyMotion compiler recursively checks all the file directories and adds the files. If I brake out a method it will find it and I don't need to wrap it in a class or anything in the other file.</li>
</ul>


<h3>Variables</h3>

<ul>
<li>always want to use the sdk_version</li>
<li>the deployment_target is the lowest version of the iOS device that you want to run on

<ul>
<li>in the app delegate file I can set the deployment target to <code>app.deployment_target = 5.1</code></li>
<li><code>rake target=5.1</code> launches the device in the specified iOS

<ul>
<li>check the device with <code>UIDevice.currentDevice.systemVersion</code></li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>States</h3>

<ul>
<li><a href="http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/ManagingYourApplicationsFlow/ManagingYourApplicationsFlow.html">Apple Explains States and Multi-tasking</a></li>
</ul>


<h3>CA Layers</h3>

<blockquote><p>The CALayer class manages image-based content and allows you to perform animations on that content <a href="The%20CALayer%20class%20manages%20image-based%20content%20and%20allows%20you%20to%20perform%20animations%20on%20that%20content">See Apple Docs</a></p></blockquote>

<ul>
<li><p>can create a tree structure for CA Layers just like you can create a tree structure for controllers and views</p></li>
<li><p>Using the REPL to play with the layers p. 138</p></li>
<li><p>We are using gradients in Chapter 20 p. 141-42.</p></li>
<li><p><code>addSublayer(grass_layer)</code> is for adding on top of an inserted sublayer</p></li>
</ul>


<h3>Bug with Objective-c array</h3>

<ul>
<li>ran into another instance of when the compiler breaks on an objective-c array. This happened on the first day as well. Need to pay attention to this.

<ul>
<li>the steps to debug are: <code>rake debug=1</code>, then <code>backtrace</code>, lower-case <code>quit</code> to quit the debugger</li>
</ul>
</li>
</ul>


<h3>Deploy to your device</h3>

<ul>
<li><code>rake device</code> will deploy it to the device</li>
<li><code>rake device debug=1</code> will deploy with a debugger</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Day 3]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-day-3/"/>
    <updated>2013-01-23T10:27:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-day-3</id>
    <content type="html"><![CDATA[<h2>UIViewControllers</h2>

<blockquote><p>a view controller manages a set of views that makes up a portion of your app's user interface.</p></blockquote>

<ul>
<li>UIViewController:

<ul>
<li>sends data to NSArray</li>
<li>sends view to UIView</li>
<li>sends a target to UIButton</li>
<li>Receives a delegate from UITextField</li>
</ul>
</li>
</ul>


<h3>UITabBarController</h3>

<ul>
<li>common to use that as the main controller</li>
<li>this controls the display of the main screen</li>
</ul>


<h3>UITabBarItem</h3>

<ul>
<li>displays the tab buttons in the along the top or bottom</li>
</ul>


<h2>TableViews</h2>

<ul>
<li>Very flexible</li>
<li>Uses the delegate pattern

<ul>
<li>UITableViewController is a controller object that manages a table view.

<ul>
<li>when the table view is about to appear the first time it's loaded, it reloads the table view's data</li>
<li>whent he table view has appeared, the controller flashes the tbale view's scroll indicators</li>
</ul>
</li>
</ul>
</li>
<li><p>inherits from the view controller adn dispays the table view cells</p></li>
<li><p>supports different kinds of layouts</p>

<ul>
<li>plain</li>
<li>grouped -> Like the ones you can find in the Settings app of an iPhone.</li>
</ul>
</li>
<li><p>the UITableView has subviews that will contain the cells</p></li>
<li><p>Data sources</p>

<ul>
<li>special type of delegate
used by the tableView in order to get info needed to display

<ul>
<li><h1>of rows, etc</h1></li>
</ul>
</li>
</ul>
</li>
<li><p>like tabs this is set in the app delegate</p></li>
<li><p>when you have data that is more than will fit on the screen, you probably only need to create 9 or so cells and then you can send in the data to fit in those cells. Loading 50 cells will make the interface very slow.</p>

<ul>
<li>We reuse the cells with <em>dequeue</em> like <code>tableView.dequeueReusableCellWithIdentifier(NEWS_CELL_REUSE_ID)</code></li>
<li>Only if the table view can not find a cached cell with that identifier, we build it: <code>UITableViewCell.alloc.initWithStyle(UITableViewCellStyleSubtitle, reuseIdentifier: NEWS_CELL_REUSE_ID)</code></li>
</ul>
</li>
<li><p>System Cell Types</p>

<ul>
<li>four kinds provided by apple</li>
<li>can also create your own cells</li>
</ul>
</li>
<li><p><em>creating custom tableviews is a good example of using when to use Interface Builder.</em></p></li>
<li><p><code>viewWillAppear</code> method will be called every time the view is shown</p></li>
<li><p><code>initWithStyle:</code> This is the initializer method used to create instances of UITableViewController</p></li>
<li><p><code>p.list files</code> are Property list files -> files that store serialized objects</p>

<ul>
<li>Objective-C supports these files natively</li>
</ul>
</li>
<li><p>Animation for adding or deleting a cell with:
```ruby Animation for deleting and inserting</p>

<h1>to delete</h1>

self.tableView.deleteRowsAtIndexPaths([selected_cell_index_path],
withRowAnimation:UITableViewRowAnimationMiddle)

<h1>to insert</h1>

<p>self.tableView.insertRowsAtIndexPaths([index_path],
withRowAnimation:UITableViewRowAnimationRight)
```</p></li>
</ul>


<h3>Custom Cells</h3>

<ul>
<li>Need UITableViewCell as the super class</li>
</ul>


<h2>Navigation Controllers</h2>

<ul>
<li><p>very similar to TabBarControllers, but like a chain of views.</p>

<ul>
<li>when you have a master, detail relationship you should use a Navigation controller

<ul>
<li>you get a back button for free!</li>
</ul>
</li>
</ul>
</li>
<li><p>can use CoreAnimation to create your own animation instead of using the standard transition.</p></li>
<li><p>A Navigation Bar can only have two buttons, one to the left and one to right. T</p></li>
<li>The buttons should be instances of UIBarButtonItem not of UIButton.</li>
</ul>


<h3>Dirty Views</h3>

<ul>
<li>needed to update a view -> <code>@receiver.setNeedsDisplay</code></li>
</ul>


<h2>A ruby aside</h2>

<p>```ruby 'not' examples
  ! me
  not me
  i != you</p>

<h1>in the wild</h1>

<p>  def isFormValid</p>

<pre><code>not @email_textfield.text.empty? and not @password_textfield.text.empty?
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Day 2]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-day-2/"/>
    <updated>2013-01-22T09:41:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-day-2</id>
    <content type="html"><![CDATA[<ul>
<li>Cocoa touch is the high-level Objective C programming API for iOS.</li>
</ul>


<h3>What is a framework</h3>

<ul>
<li>a collection of classes that are intended to be used together. That is, the classes are compiled together into a reusable library of code (static or dynamic).</li>
<li>The framework can define versions</li>
</ul>


<h3>Other Frameworks</h3>

<ul>
<li>CoreData</li>
<li>CoreLocation -> framework that allows you to access the geo location and heading of the device</li>
<li>MapKit -> provides an interface to embed maps into your applications as well as other advanced functionality such as adding custom annotations, reverse-geocoding lookups, etc.</li>
<li>CoreGraphics</li>
<li>GameKit</li>
</ul>


<h3>MVC/MVP</h3>

<ul>
<li>The presenter is more responsible in RubyMotion than in traditional MVC

<ul>
<li>model still a good place to abstract logic from the controller</li>
</ul>
</li>
</ul>


<h2>Callbacks</h2>

<blockquote><p>Callbacks are methods or functions that are invoked when something happens</p>

<pre><code>- Target-action -&gt; send one message to another object
- Delegates -&gt; send more than one message to another object
- Notifications -&gt; many to many. Send a message to 10-15 objects. The most flexible, but also the most dangerous.
</code></pre></blockquote>

<ul>
<li><p>Target-Action</p>

<ul>
<li>NSButton sends a target to TimeZoneController

<ul>
<li>(make sure to include the colon (:) )</li>
</ul>
</li>
</ul>
</li>
<li><p>Delegates</p>

<ul>
<li>NSTableView -> delegate -> MyClass</li>
</ul>
</li>
<li><p>Notifications</p>

<ul>
<li>NSNotifcationCenter is the class we use when we send or receive notifications

<ul>
<li>posting -> send a notification</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>UIApplication and AppDelegate</h3>

<ul>
<li>UIApplicaiton class provides a centralized point of control and coordination for apps running on iOS. Every app must have exactly one instance of UIApplication</li>
<li>app delegate is an object created at app launch time, usually by the UIApplicatioMAin function. Its primary job is to handle state transitions within the app. e.g. this object is responsible for launch-time initialization.</li>
</ul>


<h3>App Delegate</h3>

<ul>
<li>the app delegate class are optional

<ul>
<li>e.g. application:didFinishLaunchingWIthOptions: &amp; applicationDidBecomeActive:</li>
</ul>
</li>
</ul>


<h3>nib files</h3>

<ul>
<li>A nib file is a data archive that essentially contains a set of freeze-dried objects that you want to recreate at runtime. Nib files are used most commonly to store preconfigured windows, views, and other visually oriented objects but they can also store non-visual objects such as controllers.

<ul>
<li>nib files originate from NeXt</li>
</ul>
</li>
</ul>


<h3>Initializers</h3>

<ul>
<li>Objective-C uses init* methods to initialize new instances</li>
<li>A class can have zero or more initializers</li>
<li>One initializer is the "Designated" -> this does all the heavy work and all other will call this one.</li>
<li>All initializers in the same class must call the designated initializer</li>
<li>The designed initializer must call the superclass's designed initializer</li>
</ul>


<h3>Overwriting Initializers</h3>

<ul>
<li>If you override the initializer you need to return self

<ul>
<li>This is very important</li>
</ul>
</li>
</ul>


<h3>Alloc and init</h3>

<ul>
<li>alloc is a static method and init is an instance method</li>
</ul>


<p>```ruby connects the UIButton to our controller</p>

<pre><code>  sign_in_button.addTarget(self, 
                          action:'sign_in:',
                          forControlEvents:UIControlEventTouchUpInside)
</code></pre>

<p>```</p>

<h2>Core Location</h2>

<ul>
<li>CLLocationManager</li>
<li>CLLocation</li>
</ul>


<h3>iOS Location</h3>

<ul>
<li><p>an iOS device can use up to 3 ways to determine its location (from best to worst accuracy):</p>

<ul>
<li>GPS. For devices with that functionality such as iPhones or iPads with GSM/LTE.

<ul>
<li>for navigation or running apps, but high battery consumption</li>
</ul>
</li>
<li>Cell towers triangulation. For devices with GSM/LTE.</li>
<li>WiFi hotspots.</li>
</ul>
</li>
<li><p>KCLLocationAccuracyBest -> Drains the battery</p></li>
<li>KCLLocationAccuracyThreeKilometeres -> doesn't check all that often</li>
</ul>


<h3>MKMapView</h3>

<ul>
<li>MKMapTypeStandard. Displays a street map that shows the position of all roads and some road names.</li>
<li>MKMapTypeSatellite. Displays satellite imagery of the area.</li>
<li>MKMapTypeHybrid. Displays a satellite image of the area with road and road name information layered on top.</li>
</ul>


<h3>MapKit</h3>

<ul>
<li>MapKit uses a special structure called MKCoordinateRegion

<ul>
<li>has a CLLocationCoordinate2D  a structure which latitude and longitude values</li>
<li>and a MKCoordinateSpan, that represents the amount of map to display in the vertical and horizontal space. You can see this Span as the zoom that the map will have.</li>
</ul>
</li>
<li><p>To add a pin Annotations in MapKit you need to add an Annotation in Objective-C by creating a class that explicitly implements the MKAnnotation protocol.</p>

<ul>
<li>In RubyMotion you only need to create a class with the same methods defined in the protocol. These methods are:

<ul>
<li><em>coordinate</em>. Returns a CLLocationCoordinate</li>
<li><em>title.</em> NSString with the main title of the Annotation.</li>
<li><em>subtitle.</em> Optional, returns an NSString with the subtitle of the annotation.</li>
</ul>
</li>
</ul>
</li>
<li><p>MKAnnotion</p>

<ul>
<li>is a protocol</li>
</ul>
</li>
</ul>


<h2>UIVIEWS</h2>

<ul>
<li>responsible for how to draw themselves

<ul>
<li>can use coreGraphics to draw very complicated things</li>
</ul>
</li>
<li>knowing its subviews</li>
<li><p>accepting interaction</p></li>
<li><p>if you don't specify a view, the system will create one for you.</p></li>
</ul>


<h3>Frames and bounds</h3>

<ul>
<li>all the dimensions are in points, not pixals (not affected by the definition of the device)</li>
<li>some APIs need bounds, while others need frames</li>
</ul>


<h3>Lifecycle of a UIView</h3>

<ul>
<li><p><em>life-cycle of UIView:</em> wait for an event -> touch event goes to a view -> event triggers -> custom method, may flag a view for refactoring -> redraw a view ->  render the view or views -></p></li>
<li><p>dirty views -> views that need to be redrawn</p></li>
</ul>


<h3>UIScrollView</h3>

<ul>
<li>provides support for displaying content that is larger than the size of the application's window. It enables users to use swipe gestures, and to zoom in and back from portions of the content by making pinching gestures.</li>
</ul>


<h2>Testing</h2>

<ul>
<li>Bacon</li>
<li>Spec files</li>
<li>spec helpers</li>
<li>context</li>
<li>device events</li>
<li>Finding views</li>
<li><p>UIAutomation</p></li>
<li><p><a href="http://www.rubymotion.com/developer-center/articles/testing/">See the RubyMotion Testing Docs</a></p></li>
<li><p><code>rake spec:device</code> will push the code to the device as well as insert a debugger</p></li>
<li><p>MacBacon, a special flavor of the Ruby tool Bacon prepared to test iOS apps.</p></li>
</ul>


<h3>Playing with the interface builder</h3>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubymotion | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2013-01-22T09:33:19-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion Day 1]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-day-1/"/>
    <updated>2013-01-21T09:45:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-day-1</id>
    <content type="html"><![CDATA[<h3>Course Goals</h3>

<ul>
<li>Objective-c Conventions</li>
<li>Using C Libraries</li>
<li>Platform Idioms</li>
<li>Key concepts: pointers, memory management, objects, messages</li>
<li>Fundamental iOS libraries</li>
<li>Cocoa patterns</li>
<li>Testing</li>
</ul>


<h3>History of why Objective-C</h3>

<ul>
<li>NeXt

<ul>
<li>used objective-c to write the main platform

<ul>
<li>there was a debate on which was better between objective-c and c++, C++ eventually won</li>
</ul>
</li>
<li>If you wanted to write an application on NeXt you needed to use NeXt builder</li>
<li>OSX was built next and there are a lot of things in OSX that were inherited from NeXt</li>
</ul>
</li>
<li>iOS is basically a version of OS10</li>
</ul>


<h3>iOS Overview</h3>

<ul>
<li>The window server and Cocoa send events and messages to each other. It is a two way communication.</li>
<li><p>each application has its own loop of communication. Responsible for send and receiving events from the window server.</p></li>
<li><p>For each object in the nib file</p>

<ul>
<li>Class is sent <code>alloc</code> to create interface</li>
<li>New instance is sent <code>init</code></li>
<li>Instance variables are set</li>
</ul>
</li>
</ul>


<h3>Application States</h3>

<ul>
<li>Two states: foreground and background

<ul>
<li>two states for foreground: inactive and active</li>
<li>in the background: you can do tasks in the background, after it is done it will go to suspended</li>
</ul>
</li>
</ul>


<h3>Cocoa</h3>

<ul>
<li>UIkit is the main library that comes with cocoa and certainly the most important.</li>
</ul>


<h3>App delegate</h3>

<ul>
<li>There are at least two classes. The application class and the application delegate.</li>
</ul>


<h3>Create a new project</h3>

<p><code>motion create &lt;app name&gt;</code></p>

<ul>
<li>fonts, images, assets all go in the resources folder</li>
</ul>


<h3>Rake</h3>

<ul>
<li><code>rake -T</code> gives me a list of all the rake tasks

<ul>
<li>can build for a device or build for the simulator</li>
</ul>
</li>
<li>can create a static library with <code>rake static</code></li>
<li><code>rake config</code> gives you output on the frameworks, delegate_class, etc.

<ul>
<li>CoreGraphics lib is what we use for animation</li>
</ul>
</li>
</ul>


<h3>Deploying the application</h3>

<ul>
<li>need an apple certificate and developer certificate</li>
</ul>


<h3>To see the UI structure</h3>

<p><code>UIApplication.sharedApplication.keyWindow.recursiveDescription</code> -> this will give you the tree structure of what you have created.</p>

<h3>Changing attributes in the console</h3>

<p><code>self.font = UIFont.fontWithName("Noteworthy-Bold",size:18)</code> will change the font of the label that you have highlighted.</p>

<h2>Object C</h2>

<ul>
<li>objective-c is an objected oriented flavor of c</li>
<li>heavily influenced from Smalltalk language</li>
<li><p>all keywords begin with @</p></li>
<li><p>RubyMotion adds named parameters similar to Ruby 2.0</p></li>
<li>Both Ruby and Objective C has the notion of open classes, single inheritance and single message dispatch</li>
</ul>


<p><code>now dateByAddingTimeInterval:1000</code>, structure is the <code>receiver theSelector:argument</code></p>

<ul>
<li>messages always elclose the receiver and the selector insude a pair of square brackets. These brackets can be nested.</li>
<li><p><em>id</em> is a pointer to any object type.</p></li>
<li><p>you can invoke objective-c OR ruby methods against built in classes</p></li>
<li><code>[1,2,3].send(:objectAtIndex, 1)</code> -> you need the colon or it won't find the selector!</li>
<li>helpful to use short methods and callbacks because the method will not be released until it is terminated.</li>
</ul>


<h3>Objective C Classes</h3>

<ul>
<li>NSString (similar to when you freeze something in Ruby) v. NSMutableString</li>
<li>NSSArray v. NSMutableArray</li>
<li>NSSet v. NSMutableSet</li>
<li><p>NSDictionary v. NSMutableDictionary</p></li>
<li><p><code>my_string = "hello"</code> -> this is mutable</p></li>
<li><code>my_stgring = NSString.alloc.init</code> -> this is immutable</li>
</ul>


<h3>NSArray</h3>

<ul>
<li>NSArray is immutable. Once you create one it can't be modified. NSMutableArray is a mutable subclass of NSArray

<ul>
<li>need to terminate a <code>NSArray.arrayWithObjects(foo, bar, baz, nil)</code> with a <code>nil</code> or it will crash.</li>
</ul>
</li>
</ul>


<h3>NSSet</h3>

<ul>
<li>Sets are collections with no order and objects can be present only once (can only be added once).It is useful when dealing with membership issues.</li>
<li><code>.unionSet</code>, <code>.intersectSet</code></li>
</ul>


<h3>NSDictionary</h3>

<ul>
<li>Dictionaries are unordered and associate a key.</li>
</ul>


<h3>Constants</h3>

<ul>
<li>in objective c -> constants usually start with k -> <code>kItemCode</code></li>
<li>in Ruby make sure that this is uppercase -> <code>KItemCode</code></li>
</ul>


<h3>Defining a class</h3>

<ul>
<li>Obj c uses the keyword <code>@interface</code> to define the class</li>
<li>Obj c only supports <em>single inheritance</em>. You can only inherit from one superclass at a time.</li>
</ul>


<h3>Protocols</h3>

<ul>
<li>similar to the concept of interfaces in java or C-sharp</li>
<li>a protocol is a contract. It is a promise to the compiler that a given class will implement a given interface.</li>
</ul>


<h3>Categories</h3>

<ul>
<li>the way to add methods to an existing class</li>
</ul>


<h3>Structures</h3>

<ul>
<li>C structures are mapped to classes in RubyMotion. <code>CGPoint</code> is very common.</li>
<li>It is possible to pass the field views directly to the constructor `pt= CGPoint.new(100,200)</li>
</ul>


<h3>Pointers</h3>

<ul>
<li>Pointers are basic data types of the C language</li>
<li>RubyMotion supports the creation o structure pointers, by passing their runtime type accordingly to <code>Pointer.new</code></li>
</ul>


<h3>Blocks</h3>

<ul>
<li>The caret (<sup>)</sup> character is used to define C blocks</li>
<li>The Prob object must have the same number of args as the C function pointer or block, otherwise an exception will be raised at runtime</li>
</ul>


<h3>Keyboard doesn't toggle by default</h3>

<ul>
<li>Add this code</li>
</ul>


<p>```ruby
  def textFieldShouldReturn(textfield)</p>

<pre><code>textfield.resignFirstResponder
return false
</code></pre>

<p>  end
```</p>

<h3>Setting a title of a button</h3>

<p><code>@instance_var.setTitle("TITLE",forState:UIControlStateNormal)</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Pre-work]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-pre-work/"/>
    <updated>2013-01-20T19:29:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-pre-work</id>
    <content type="html"><![CDATA[<ul>
<li>Ruby Motion Tool Chain from the command line with <code>motion</code></li>
<li><p>create a new project with <code>motion create &lt;app name&gt;</code></p></li>
<li><p><code>rake -T</code> gives you a list of tasks</p></li>
<li><p><code>rake</code> builds the application and opens the simulator</p></li>
<li><p>Cocoa touch is a framework and calls back into our code using the delegate pattern.</p>

<ul>
<li>there are special callback methods to hook into the lifecycle</li>
</ul>
</li>
</ul>


<p>```ruby Creating an alert
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>alert = UIAlertView.new
alert.message = "Hello!"
alert.show
true
</code></pre>

<p>  end
end
```</p>

<h3>What is the frame?</h3>

<ul>
<li>a rectangle for the window.

<ul>
<li>it's an origin, an X and Y coordinate</li>
<li>and it's also a size</li>
</ul>
</li>
</ul>


<h3>Making a Yellow Screen</h3>

<p>```ruby A Yellow Flashlight!
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>@window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)
@window.backgroundColor = UIColor.yellowColor
@window.makeKeyAndVisible
true
</code></pre>

<p>  end
end
```</p>

<h3>Using the Console</h3>

<p>When the console builds it provides a console. If I hover with the mouse, nothing happens. But if I hold the cmd key, it puts the element in the console and you can assign it to self or a variable.</p>

<p>So <code>#&lt;UIWindow:0x10922060&gt;)&gt; self</code>
and <code>#&lt;UIWindow:0x10922060&gt;)&gt; self.backgroundColor = UIColor.greenColor</code> will change the color right in the console.</p>

<p>Can grab objects, put them in the console and manipulate them interactively.</p>

<h3>Views</h3>

<ul>
<li>each view that we have sits in a view and is managed by a view controller</li>
<li><p>Each</p></li>
</ul>


<h3>ViewController</h3>

<ul>
<li>UIViewController is where all the magic happens</li>
</ul>


<h3>UI Kit</h3>

<ul>
<li>the x and y coordinate starts in the upper left corner and x goes -> and y goes down.</li>
</ul>


<h3>Gesture Recognition</h3>

<ul>
<li>when a view is tapped it sends an action to a particaular target.</li>
</ul>


<h3>What is a delegate</h3>

<p>When the user launches our app, the system sets up a bunch of stuff for us. We need to give the operating system an object which can respond to different events during that process; we refer to that object as the "application delegate". It gets callbacks for when the app starts, ends, goes to the background, gets a push notification, etc. <a href="http://rubymotion-tutorial.com/1-hello-motion/">source</a></p>

<h3>Views</h3>

<ul>
<li>Everything displayed in an app is called a "view".- A view can have many "subviews"; when you move a view, you also move its subviews.

<ul>
<li>Subviews visually stacked on top of each other within their parent.</li>
</ul>
</li>
</ul>


<h3>Resources:</h3>

<ul>
<li><a href="http://pragmaticstudio.com/screencasts/rubymotion">50 min screencast</a></li>
<li><a href="http://www.clearsightstudio.com/insights/ruby-motion-promotion-tutorial">Promotion</a></li>
<li><a href="http://rubymotion-tutorial.com/">HTML book</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Motion]]></title>
    <link href="http://www.adamjonas.com/blog/ruby-motion/"/>
    <updated>2012-10-24T19:16:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/ruby-motion</id>
    <content type="html"><![CDATA[<p>ios simulator app
git repo: malkomalko/tweets-i-love</p>

<ul>
<li><p>File structure:</p>

<ul>
<li>controller</li>
<li>extensions</li>
<li>models</li>
<li>styles</li>
<li>views</li>
<li>build</li>
<li>resources</li>
<li>spec</li>
<li>tasks</li>
<li>vendor</li>
<li>Gemfile</li>
</ul>
</li>
<li><p>Use Xcode for storyboards</p></li>
</ul>


<p><a href="https://github.com/CocoaPods/CocoaPods">Cocoapods</a></p>

<p>more or less -> every screen of data is bound to a view controller</p>

<p>??delegates ~> look it up</p>

<p><a href="http://iconoclastlabs.com/cms/blog/posts/starting-with-rubymotion-delegates-and-messages">read</a></p>

<p><code>
@collection = [*"a".."z"] ~&gt; explode a range in the view
</code></p>
]]></content>
  </entry>
  
</feed>

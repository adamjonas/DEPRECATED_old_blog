<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: refactoring | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2012-11-19T09:11:40-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring Ruby Edition Notes]]></title>
    <link href="http://www.adamjonas.com/blog/refactoring-ruby-edition-notes/"/>
    <updated>2012-11-10T11:22:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/refactoring-ruby-edition-notes</id>
    <content type="html"><![CDATA[<h3>Replacing the Conditional Logic on Price Code with Polymorphism [p.32]</h3>

<blockquote><p>Replacing the Conditional Logic on Price Code with Polymorphism
The first part of this problem is that case statement. It is a bad idea to do a case based on an attribute of another object. If you must use a case statement, it should be on your own data, not on someone else’s.
  - <a href="http://robots.thoughtbot.com/post/31728620503/refactoring-replace-conditional-with-polymorphism">Thoughtbot Reading</a></p></blockquote>

<p>??Receiver on page 35?</p>

<h3>Refactoring is... [p.53]</h3>

<blockquote><p>(noun) A change made to the internal structure of software to make it easier to understand and cheaper to modify with- out changing its observable behavior.</p></blockquote>

<ul>
<li><p>Programming in about saying exactly what you want. But there is another user of your source code. Someone will try to read your code in a few months’ time to make some changes. We easily forget that extra user of the code, yet that user is actually the most important.</p>

<ul>
<li>Who cares if the computer takes a few more cycles to execute something? It does matter if it takes a programmer a week to make a change that would have taken only an hour if she had understood your code.</li>
<li>when you are trying to get the program to work, you are not thinking about that future developer.

<ul>
<li>Often this future developer is me. [p. 55]</li>
</ul>
</li>
</ul>
</li>
<li><p>Kent Beck often makes about himself, “I’m not a great programmer; I’m just a good programmer with great habits.” [p. 56]</p></li>
<li>Don Roberts: The first time you do something, you just do it. The second time you do something similar, you wince at the duplica- tion, but you do the duplicate thing anyway. The third time you do something similar, you refactor. [p. 57]</li>
</ul>


<h3>Problems with refactoring [p. 63]</h3>

<ul>
<li>takes a while to create nothing</li>
<li>performance deoptimization</li>
<li>changing behavior</li>
</ul>


<h3>Code Smells</h3>

<ul>
<li>Duplicated Code [p. 74]</li>
<li>Long Method [p. 74-75]

<ul>
<li>A heuristic we follow is that whenever we feel the need to com- ment something, we write a method instead.</li>
<li>Conditionals and loops also give signs for extractions.</li>
</ul>
</li>
<li>Large Class [p. 76]

<ul>
<li>When a class is trying to do too much, it often shows up as too many instance variables. When a class has too many instance variables, duplicated code cannot be far behind.</li>
</ul>
</li>
<li>Long Parameter List [p. 76]</li>
<li>Divergent Change [p. 77]

<ul>
<li>When we make a change we want to be able to jump to a single clear point in the system and make the change. When you can’t do this you are smell- ing one of two closely related pungencies.</li>
</ul>
</li>
<li>Shotgun Surgery

<ul>
<li>Every time you make a kind of change, you have to make a lot of little changes to a lot of different classes.</li>
<li>opposite of divergent change</li>
</ul>
</li>
<li>Feature Envy [p. 78]

<ul>
<li>a method that seems more interested in a class other than the one it actually is in.</li>
</ul>
</li>
<li></li>
</ul>


<h3>Extract Method [p. 102]</h3>

<ul>
<li>You have a code fragment that can be grouped together.

<ul>
<li>Turn the fragment into a method whose name explains the purpose of the method.</li>
</ul>
</li>
</ul>


<h3>Inline Temp [p. 110]</h3>

<ul>
<li>You have a temp that is assigned to once with a simple expression, and the temp is getting in the way of other refactorings.

<ul>
<li>Replace all references to that temp with the expression.</li>
</ul>
</li>
</ul>


<h3>Replace With Query [p. 111]</h3>

<ul>
<li>You are using a temporary variable to hold the result of an expression.

<ul>
<li>Extract the expression into a method. Replace all references to the temp with the expression. The new method can then be used in other methods.</li>
</ul>
</li>
</ul>


<h3>Replace Loop with Conditional</h3>

<p><code>ruby
managers = []
employees.each do |e|
  managers &lt;&lt; e if e.manager?
end
</code></p>

<h3>Lazy Initialized Attribute</h3>

<ul>
<li>Initialize an attribute on access instead of at construction time.</li>
</ul>


<p>```ruby Lazy Initialized Attribute
class Employee
  def initialize</p>

<pre><code>@emails = []
</code></pre>

<p>  end
end</p>

<h1>becomes</h1>

<p>class Employee
  def emails</p>

<pre><code>@emails ||= []
</code></pre>

<p>  end
end
```</p>

<h2>Chapter 9: Simplifying Conditional Expressions</h2>

<h3>Replace the conditional code with the more idiomatic Ruby construct.</h3>

<ul>
<li>Encapsulate if/else, and/or logic in their own methods
```ruby
parameters = params ? params : []

<h1>becomes</h1>

<p>parameters = params || []
```</p></li>
<li>Use &amp;&amp; instead of multiple ifs
```ruby
if on_vacation?
if length_of_service > 10
return 1
end
end
0.5

<h1>This would be changed to</h1>

<p>if on_vacation? &amp;&amp; length_of_service > 10
return 1
end
0.5
```</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[code smells and refactoring]]></title>
    <link href="http://www.adamjonas.com/blog/code-smells-and-refactoring/"/>
    <updated>2012-11-05T15:05:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/code-smells-and-refactoring</id>
    <content type="html"><![CDATA[<p>decomposition and synthesis</p>

<ul>
<li><a href="http://www.codinghorror.com/blog/2006/05/code-smells.html">Code smells</a> Jeff Atwood.</li>
<li><a href="http://www.cs.usfca.edu/~parrt/course/601/lectures/refactoring/refactoring.html">Summary</a></li>
<li><p>http://c2.com/cgi/wiki?RefactoringImprovingTheDesignOfExistingCode</p></li>
<li><p>http://en.wikipedia.org/wiki/Code_refactoring</p></li>
<li><a href="http://martinfowler.com/bliki/EtymologyOfRefactoring.html">etymology of refactoring</a>

<ul>
<li>The obvious answer comes from the notion of factoring in mathematics. You can take an expressions such as x<sup>2</sup> + 5x + 6 and factor it into (x+2)(x+3). By factoring it you can make a number of mathematical operations much easier. Obviously this is much the same as representing 18 as 2*3<sup>2.</sup></li>
</ul>
</li>
</ul>


<p>improve internal structure, but don't change the external behavior</p>

<ul>
<li><p>list of refactors - slide 7 in <a href="http://www.slideshare.net/MarcusDenker/refactoring-1921411">http://www.slideshare.net/MarcusDenker/refactoring-1921411</a></p></li>
<li><p>code is written once, but read many times.</p></li>
</ul>


<p><a href="http://www.refactoring.com/catalog/index.html">refactoring list from fowler</a></p>

<ul>
<li><p><a href="http://en.wikipedia.org/wiki/Spaghetti_code">Spaghetti Code</a></p>

<ul>
<li>Spaghetti code is a pejorative term for source code that has a complex and tangled control structure. It is named such because program flow tends to look like a bowl of spaghetti, i.e. twisted and tangled.</li>
</ul>
</li>
<li><p>Duplicated Code</p></li>
<li>long method</li>
<li>large class</li>
<li>long parameter list</li>
<li><p>temporary variable assigned more than once, but not a loop or collection</p></li>
<li><p><a href="http://www.refactoring.com/catalog/extractMethod.html">extract method</a></p>

<ul>
<li>push logic to the model -> conditional logic belongs in the model</li>
<li>we're going to push the nastiness down into the model. That way it can be tested and, so we can more easily change it in the future.</li>
</ul>
</li>
<li><p>when you refactor, the first test is always create tests</p></li>
<li><p>good quotes <a href="http://www.slideshare.net/hominhchuc/refactoring-your-code-key-step-to-agility-presentation">http://www.slideshare.net/hominhchuc/refactoring-your-code-key-step-to-agility-presentation</a></p></li>
</ul>


<p>  Martin Fowler : "a change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior“.</p>

<p>  William C. Wake : "Refactoring is the art of safely improving the design of existing code“.</p>

<p>  The goal of refactoring is NOT to add new functionality.
  The goal is refactoring is to make code easier to maintain in the future.
  The process of refactoring involves the removal of duplication, the simplification of complex logic, and the clarification of unclear code.</p>

<p>  refactoring versus rewriting</p>

<p>  lego versus playdoh slide 9 <a href="http://www.slideshare.net/NeilGreen1/the-roi-of-refactoring-lego-vs-playdoh">http://www.slideshare.net/NeilGreen1/the-roi-of-refactoring-lego-vs-playdoh</a></p>

<p>  Everything I need to know about refactoring I learned in kindergarden</p>

<p>   “I'm not a great programmer; I'm just a good programmer with great habits.”- Kent Beck</p>

<h3>Law of demeter?</h3>

<p>  Get into this?</p>

<h3>E.g.s</h3>

<ul>
<li>Inline class- <a href="http://www.refactoring.com/catalog/inlineClass.html">http://www.refactoring.com/catalog/inlineClass.html</a></li>
<li>Decompost conditional-  <a href="http://www.refactoring.com/catalog/decomposeConditional.html">http://www.refactoring.com/catalog/decomposeConditional.html</a></li>
<li>Extract Class - <a href="http://www.refactoring.com/catalog/extractClass.html">http://www.refactoring.com/catalog/extractClass.html</a></li>
<li>Inline Method</li>
<li>Replace Conditional with Polymorphism</li>
<li><p>Replace Parameter with Method</p></li>
<li><p>God class</p></li>
</ul>


<p><a href="http://www.refactoring.com/catalog/">http://www.refactoring.com/catalog/</a></p>

<h3>Code smells</h3>

<p><a href="http://en.wikipedia.org/wiki/Code_smell">http://en.wikipedia.org/wiki/Code_smell</a></p>

<p>extraction pattern- anti-pattern:
<a href="http://blog.jayfields.com/2007/04/ruby-anti-pattern-extract-module-to.html">http://blog.jayfields.com/2007/04/ruby-anti-pattern-extract-module-to.html</a></p>

<p>Refactoring:
Even noobs know that refactoring is important. This presentation, inspired by <em>Refactoring: Ruby Edition</em>, will cover the whys, whens, and hows of refactoring using examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day5]]></title>
    <link href="http://www.adamjonas.com/blog/haw-day5/"/>
    <updated>2012-08-06T10:23:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/haw-day5</id>
    <content type="html"><![CDATA[<p>GOALS:
Refactor code, figure out the jquery ajax checkboxes.
ship v1 by the end of the day</p>

<p><a href="http://khelll.com/blog/ruby/ruby-dynamic-method-calling/">send method</a>
<a href="http://philcrissman.com/2009/06/26/rubys-objectsend-can-call-private-and-protected-methods/">send method to call private method</a></p>

<p>```ruby Code that finally worked...
def self.import_from_airbrake</p>

<pre><code>client = AirbrakeAPI::Client.new

errors = client.errors
actions = {:action =&gt; "action", :controller =&gt; "controller", :created_at =&gt; "airbrake_created_at", 
           :error_class =&gt; "error_class", :error_message =&gt; "error_message", :file =&gt; "file",
           :id =&gt; "airbrake_id", :line_number =&gt; "line_number", 
           :most_recent_notice_at =&gt; "airbrake_most_recent_notice_at", 
           :notice_hash =&gt; "notice_hash", :notices_count =&gt; "notices_count", 
           :project_id =&gt; "project_id", :rails_env =&gt; "rails_env", :resolved =&gt; "airbrake_resolved",
           :search_index_me =&gt; "search_index_me", :updated_at =&gt; "airbrake_updated_at"}

 errors.collect do |error| #each error is a hash
  airbrake_error = AirbrakeError.new #this needs to be outside the following loop or it will create a new object during every loop...
  actions.each do |airbrake_action, our_action| #aa is a sym key, oa is a string value
   airbrake_error.send("#{our_action}=".to_sym, error[airbrake_action])# SEND method here

  airbrake_error.attribute_updater #see below
  end
  airbrake_error.save
end
</code></pre>

<p>  end
<code>
</code>ruby Other use of send...
def attribute_updater</p>

<pre><code>@airbrake_errors = AirbrakeError.all

updater_actions = ["notices_count", "action", "controller", "error_class", "file", "line_number",
                  "airbrake_most_recent_notice_at", "notice_hash", "airbrake_resolved", 
                  "airbrake_updated_at"]

if @airbrake_errors.where(airbrake_id: self.airbrake_id).present?
  original_error = @airbrake_errors.find_by(airbrake_id: self.airbrake_id)

    updater_actions.each do |action|
      original_error.send("#{action}=".to_sym, self["#{action}".to_sym])
      original_error.save
    end
else     
end
</code></pre>

<p>  end
```</p>

<p>TODO:
inject method</p>

<p>Per Dave:
-one form that is ignore, one that signal, one that is the tags
-remote true- a flag that going to submit the form via ajax</p>

<p><a href="http://guides.rubyonrails.org/form_helpers.html">Remote True:</a>
Unlike other forms making an asynchronous file upload form is not as simple as providing form_for with :remote => true. With an Ajax form the serialization is done by JavaScript running inside the browser and since JavaScript cannot read files from your hard drive the file cannot be uploaded. The most common workaround is to use an invisible iframe that serves as the target for the form submission.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day4]]></title>
    <link href="http://www.adamjonas.com/blog/haw-day4/"/>
    <updated>2012-08-03T16:17:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/haw-day4</id>
    <content type="html"><![CDATA[<p>Error:
"SystemStackError: stack level too deep"
This means that you have entered an infinite loop. e.g. you have called something on itself.</p>

<p>Need to understand inject...
http://blog.jayfields.com/2008/03/ruby-inject.html</p>

<p>struggling with this...</p>

<p>```ruby Trying to make this work
def self.import_from_airbrake</p>

<pre><code>client = AirbrakeAPI::Client.new

errors = client.errors
actions = [:action =&gt; action, :controller =&gt; controller, :created_at =&gt; airbrake_created_at, 
          :error_class =&gt; error_class, :error_message =&gt; error_message, :file =&gt; file,
          :id =&gt; airbrake_id, :line_number =&gt; line_number, 
          :most_recent_notice_at =&gt; airbrake_most_recent_notice_at, 
          :notice_hash =&gt; notice_hash, :notices_count =&gt; notices_count, 
          :project_id =&gt; project_id, :rails_env =&gt; rails_env, :resolved =&gt; airbrake_resolved,
          :search_index_me =&gt; search_index_me, :updated_at =&gt; airbrake_updated_at]
actions.each do |airbrake_action, our_action|
    errors.collect do |error|
    airbrake_error = AirbrakeError.new
    airbrake_error.our_action = error[airbrake_action]
    airbrake_error.attribute_updater
    airbrake_error.save
  end
end
</code></pre>

<p>  end
```</p>

<p>```ruby This is the original...
def self.import_from_airbrake</p>

<pre><code>client = AirbrakeAPI::Client.new

errors = client.errors
errors.each do |error|

  airbrake_error = AirbrakeError.new
  airbrake_error.action = error[:action]
  airbrake_error.controller = error[:controller]
  airbrake_error.airbrake_created_at = error[:created_at]
  airbrake_error.error_class = error[:error_class]
  airbrake_error.error_message = error[:error_message]
  airbrake_error.file = error[:file]
  airbrake_error.airbrake_id = error[:id]
  airbrake_error.line_number = error[:line_number]
  airbrake_error.airbrake_most_recent_notice_at = error[:most_recent_notice_at]
  airbrake_error.notice_hash = error[:notice_hash]
  airbrake_error.notices_count = error[:notices_count]
  airbrake_error.project_id = error[:project_id]
  airbrake_error.rails_env = error[:rails_env]
  airbrake_error.airbrake_resolved = error[:resolved]
  airbrake_error.search_index_me = error[:search_index_me]
  airbrake_error.airbrake_updated_at = error[:updated_at]
    # airbrake.send("#{key}=", value)
  airbrake_error.attribute_updater

  airbrake_error.save

end
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
</feed>

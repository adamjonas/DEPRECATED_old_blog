<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2013-01-27T22:38:10-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Talk]]></title>
    <link href="http://www.adamjonas.com/blog/git-talk/"/>
    <updated>2012-10-09T13:37:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/git-talk</id>
    <content type="html"><![CDATA[<p>Git Talk with Julia West</p>

<p>git pull = git fetch + git merge
git pull --rebase = git fetch + git rebase #generally don't get the merge commit</p>

<p>git rebase -i "HEAD~5" #=> shows 5 most recent commits in the branch</p>

<p>squash commits- helps you combine commits</p>

<p>merging with fastforwarding
no fast forward is the default at github.</p>

<p>master- ready to go into production
all the work we do is on the feature branch</p>

<p>An important part of the anatomy of a commit is who is its parent</p>

<p>"I keep merging master into my feature branch so that I can have all the commit histories." A rebase will lose the commit histories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day4]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day4/"/>
    <updated>2012-10-09T11:07:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day4</id>
    <content type="html"><![CDATA[<h3>Programmer of the day:</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Grace_Hopper">Grace Hopper:</a>
Helped develop COBOL - first human readable code advocate.
Popularized the word debugging
Nickname - "amazing grace"</li>
</ul>


<h3>Blogging</h3>

<p>Titles names:</p>

<ul>
<li>how to</li>
<li>3 tips for</li>
<li>pros and cons of</li>
</ul>


<p>&lt;compfight.com> to search high-res pictures</p>

<p>end the article with a question</p>

<p>3-5 paragraphs
400-700 wds</p>

<p>skitch- screenshots</p>

<p>Evan Williams- creator of blogger
web log -> weblog -> blog</p>

<p>Matt Mullenwig- creator of wordpress
powers 15% of the internet</p>

<p><a href="http://errtheblog.com/">err the blog</a>
PJ Hyett and Chris Wanstrath</p>

<p><a href="https://speakerdeck.com/">speaker deck</a></p>

<p><a href="http://design-seeds.com/">design helper</a></p>

<p><a href="http://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> is the creator of git</p>

<p><a href="http://en.wikipedia.org/wiki/Capistrano">Capistrano</a></p>

<p><a href="http://demosthenes.info/blog/532/Convert-Images-To-Black-And-White-With-CSS">CSS3 Grey-scale mask</a>
<a href="http://webdesignerwall.com/tutorials/css3-image-styles">CSS3 circle mask image</a>
This also worked really well...
```css
-circle {</p>

<pre><code>    -webkit-border-radius: 61px;
    -moz-border-radius: 61px;
    border-radius: 61px;
    border:1px solid #aaaaaa;
    width:122px;
    height:122px;
</code></pre>

<p>   }
```</p>

<p><a href="http://itde.vccs.edu/rss2js/build.php"><em>JavaScript Feed Creator</em></a></p>

<p>Git workflow:
```
♕ git reset --hard HEAD
HEAD is now at ab33e5d fixed inline styles and added footer
♕ git status</p>

<h1>On branch master # Untracked files:</h1>

<h1>(use "git add <file>..." to include in what will be committed)</h1>

<h1>css/leanJaw-student.css</h1>

<h1>leanJaw-matz.html</h1>

<p>♕ git clean -f
Removing css/leanJaw-student.css
Removing leanJaw-matz.html
♕ git st</p>

<h1>On branch master</h1>

<p>nothing to commit (working directory clean)
♕ git pull --rebase
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git advanced discussion]]></title>
    <link href="http://www.adamjonas.com/blog/git-advanced-discussion/"/>
    <updated>2012-10-08T17:19:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/git-advanced-discussion</id>
    <content type="html"><![CDATA[<h3>Remotes</h3>

<p>```
git remote -v, which shows you the URL that Git has stored for the shortname to be expanded to:</p>

<p>$ git remote -v
origin  git://github.com/schacon/ticgit.git</p>

<p>$ git remote add [shortname] [url]
$ git remote rm [shortname]
$ git remote rename [oldname] [new name]
```</p>

<h3>Fetch</h3>

<p><code>
$ git fetch [remote-name]
</code></p>

<ul>
<li>It’s important to note that the <strong>fetch</strong> command pulls the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.</li>
<li>The <em>git pull</em> command to automatically fetch and then merge a remote branch into your current branch.</li>
</ul>


<h3>Pushes</h3>

<p><code>
git push [remote-name] [branch-name]
</code></p>

<h3>Branches</h3>

<p>You can delete a remote branch using the rather obtuse syntax '$ git push [remotename] :[branch]'. If you want to delete your serverfix branch from the server, you run the following:
<code>
$ git push origin &lt;:branch name&gt;
</code></p>

<p><code>
$ git branch -d &lt;branch name&gt;
</code></p>

<h3>Rebasing</h3>

<p>In Git, there are two main ways to integrate changes from one branch into another: the <em>merge</em> and the <em>rebase.</em></p>

<p><code>
$ git rebase master
</code>
It works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.</p>

<p><strong>Important:</strong>
Do not rebase commits that you have pushed to a public repository.</p>

<h3>Git real review</h3>

<p>```
$ git commi­t --ame­nd -m 'addi­ng new' #ammend to last commit
$ git reset­ --sof­t HEAD<sup>­</sup> #erase last commit and rewind to HEAD
$ git reset­ --sof­t HEAD<sup>­^</sup> #erase the last TWO commits
$ git push -u origi­n maste­r #-u to indicate this is the default push for the future
$ git branc­h -r #show all the branches on the remote
$ git push origi­n :weas­el #deletes the weasel branch on the remote</p>

<p>$ git remot­e show origi­n #Specify a ­remote to ­see specif­ic informa­tion about­ that remo­te. The gi­t remote c­ommand wil­l show you­ available­ remotes.
$ git remot­e prune­ origi­n #clean up local repo</p>

<p>$ git tag #list all tags
$ git tag -a v1.3.2 -m 'new versi­on' #create new tag
$ git push --tags
$ git check­out v1.3.1</p>

<p>$ git rebas­e maste­r</p>

<p>$ git add -u #stages all new files AS WELL AS deletions</p>

<p>$ git diff maste­r eleph­ant</p>

<p>$ git log -p #diff and log</p>

<p>$ git confi­g user.email "admi­n@example.­com"</p>

<p>$ git confi­g --glo­bal user.­name "blah­ blah"</p>

<p>$ git confi­g --glo­bal alias­.commit pushi­t
```</p>

<h3>Branching</h3>

<p>This will create a new branch based on an revision: <code>♕ git co -b new-branch-name old-branch-name</code></p>

<h3>Questions</h3>

<p>What is a reasonable number of commits per branch?
How often do you commit?
Working on the same file... strategies?
fast forward vs no fast forward</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISDay0]]></title>
    <link href="http://www.adamjonas.com/blog/fisday0/"/>
    <updated>2012-10-02T09:25:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/fisday0</id>
    <content type="html"><![CDATA[<p><em>Why are we here?</em></p>

<p>-To fall in love with code</p>

<p>-If you give 100% you will change.</p>

<p><em>Programmer(s) of the day</em></p>

<ul>
<li><p><a href="http://www.sdsc.edu/ScienceWomen/lovelace.html">Ada Lovelace</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Charles_Babbage">Charles Babbage and the difference machine</a></p></li>
</ul>


<p><em>CSS Selectors</em>
```</p>

<h1>elements, #links{</h1>

<p> padding: 25px 0 15px 0;
}</p>

<h1>elements h2{</h1>

<pre><code>font-size: 2em;
</code></pre>

<p>}
```</p>

<h3>Git</h3>

<p>```</p>

<h1>git remote add <remote name> <link></h1>

<p>♕ git remote add group git@github.com:ajonas04/etcetc.com.git
```</p>

<p><code>
git fetch
git co #not ever changing the state of any branch
git pull
git branch -a #shows all local branches
git branch #shows all the remotes
</code>
can get pull requests from forks as well as the head repo</p>

<p>always want to deal with potential conflicts in the feature branch rather than on master</p>

<p><em>rebase</em> take these commits from master and put them in the right place of x feature branch</p>

<p><code>
git rebase master
git co master
git merge add-profile-rexfeng --no-ff #=&gt; merge made by recursive strategy
git push
</code></p>

<p>If it's forked:
<code>
git rebase upstream/master
</code></p>

<p>Git rainbow is not good.</p>

<p>squashing commits</p>

<p>go into my fork as a remote
<code>
git remote add ajonas04 git@github.com:ajonas04/students.flatironschool.com.git
git fetch ajonas04
git co feature-push
git rebase origin/master #resolve
git rebase --continue
</code></p>

<p><code>
git reset --hard HEAD #=&gt; reset to the state of the repo at the last commit in the repo
git branch -D add_profile_page
</code></p>

<p>interactive rebase
```
git rebase master -i</p>

<h1>provide a file that shows all the commits in it</h1>

<p>```</p>

<p>no fastforward versus fastforward
-maintains the fact that you were once on your own branch</p>

<p>recursion and fast forward
checkout the branch</p>

<p><code>
git add . #will ADD all files that haven't been previously committed as well as change modified files
git commit -am 'message' #will change files, but not add new ones
git commit -m 'message' #will just add a message
</code></p>

<p>Workflow to pull down the most updated verison:
```
♕ git fetch upstream
♕ git rebase upstream/master
First, rewinding head to replay your work on top of it...
error: The following untracked working tree files would be overwritten by checkout:</p>

<pre><code>.DS_Store
images/.DS_Store
</code></pre>

<p>Please move or remove them before you can switch branches.
Aborting
could not detach HEAD
[19:02:04] (master) students.flatironschool.com
♕ rm .DS_Store
♕ rm images/.DS_Store
♕ git rebase upstream/master
♕ git add aviflombaum.html
♕ git rebase --continue
♕ subl .
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW- Day0]]></title>
    <link href="http://www.adamjonas.com/blog/haw-day0/"/>
    <updated>2012-07-30T10:13:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/haw-day0</id>
    <content type="html"><![CDATA[<p>Pivotal:
Move from icebox to current
Click Start
Each story is either a feature, a bug, or a chore</p>

<p>Generate our app
Some sort of layout
beginning data model
- main model
- tag model
Import script to retreive that data off the API</p>

<p>Views/Controllers
- index view
- tagging</p>

<p>Keep commits small and never develop in the master branch</p>

<p>Git:
Git create the repo
git clone the repo
git merge mongoid-setup --no-ff #no FF- will show the branch even after the commmit</p>

<p>Mongoid-
rails new myapp -O (--skip-active-record)
<code>
gem 'mongoid', "~&gt; 3.0.0"
</code></p>

<p>Twitter Bootstrap
gem twitter-bootstrap</p>

<p>Airbrake Gem</p>

<p>Powder Gem
gem install powder
makes app available at airbrake.dev</p>

<p>Immediately want to start creating the 'error model', but error is a terrible title so call it airbrake model</p>

<p>Routes:
change index to errors#index</p>

<p>Generate airbrake_errors model
Generate errors_controller
Generate bootstrap
<code>ruby Fluid Layout
rails g bootstrap layout application fluid
</code>
<code>ruby In Console
AirbrakeError.create(:name =&gt; "Test")
</code></p>

<p>in the test unit, want to check that AirbrakeError.delete_all
test to make sure the airbrake API gem tried to connect</p>

<p><code>ruby
def AirbrakeError.import_from_airbrake
</code></p>

<p>Create initializer to config the connection to airbrake</p>

<h3>Next Steps</h3>

<p>build out the bootstrap layout
build the import script</p>

<p>Ruby Debugger:
gem debugger at the bottom of the gem file
bundle</p>

<p>inspect the hashiemashie to see how the objects are composed</p>

<p><code>ruby
def self.import_from_airbrake
  a = AirbrakeAPI::Client.new
end
</code></p>

<p>Airbrake Doc:
Can make calls to get a list of errors in general and a call to get more info about an error.
-The api in general isn't all that detailed.</p>

<p>There is a diff between .error('id') and .errors -- the difference is in what is returned-- i.e. the backtrace etc.</p>

<p>check out what notices because we are probably interested more in the notice than the error itself.</p>

<p><code>ruby Maybe Something Like This?
def ignore
  AirbrakeAPI.update(self.id, :group =&gt; { :resolved =&gt; true})
end
</code></p>

<p>Diff between error and notice: an error is a unique conceptual item and a notice is the occurance of the error</p>

<p>```ruby
h = {:a => 1}
  h.each do |k,v|
  end
b[k] = v</p>

<h1>this is the same as the dynamic dispatching method</h1>

<p>airbrake.send("#{key}=", value)
```</p>

<p>From there let's go to the view and start formatting the output</p>

<p>Ruby alias method-- this is built into ruby not rails or mongoid
<code>ruby airbrake_error.rb
alias :name :error_message
</code></p>

<p>TIPS and Tricks section:
Gem Server shows the documentation locally</p>

<p><a href="http://www.codinghorror.com/">Jeff Atwood</a></p>

<p>LOOK-UP 'Client', 'tap', 'send'
dynamic dispatch and the send method
rails cycle
Moped::BSON: -- how it generates its unique IDs</p>

<p>GIT STUFF:
<code>
git pull --rebase #=&gt; if the remote has merges, rewind and then move back forward
git reset --hard HEAD #=&gt; go to the last checkout (HEAD of the branch) without the warnings (hard)
git stash # save changes
git stash pop #restore changes
</code></p>

<p><code>
♕ git add .
♕ git status
♕ git checkout -b link-to-airbrake
M   app/models/airbrake_error.rb
M   app/views/errors/index.html.erb
Switched to a new branch 'link-to-airbrake'
♕ git add .
♕ git commit -am "added airbrake_url method and link_to in views"
♕ git push
♕ git checkout master
♕ git merge link-to-airbrake
♕ git push
</code></p>
]]></content>
  </entry>
  
</feed>

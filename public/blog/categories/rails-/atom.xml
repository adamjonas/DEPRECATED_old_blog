<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails, | Documenting all this...]]></title>
  <link href="http://ajonas.heroku.com/blog/categories/rails-/atom.xml" rel="self"/>
  <link href="http://ajonas.heroku.com/"/>
  <updated>2012-07-06T15:23:05-04:00</updated>
  <id>http://ajonas.heroku.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 1st Lecture]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/02/rails-1st-lecture/"/>
    <updated>2012-07-02T10:53:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/02/rails-1st-lecture</id>
    <content type="html"><![CDATA[<p>Rails Lecture I - July 2</p>

<p>How the web works:
-the requests we send to other servers have headers with info about the request
-you get the response with a header and the body
-the body is just text and data with HTML
-the communication happens over TCP/IP, namely HTTP
- the browser renders the HTML by making it pretty
-we use GET, POST, PUT, and DELETE -</p>

<p>4 imporotant HTTP Verbs-->
GET- retrieve representation of content
POST- Submits data
PUT- Update
Delete- Deletes a specific resource</p>

<p>Convention over configuration
-we wants defaults</p>

<p>There are naming schemes such as:
all tables pl
all models are sigular
controller songs_controller.rb
views songs/</p>

<p>Gem:
pre-packaged piece of software that ruby uses</p>

<p>Config Folder--> where the configuration of our app lives
-Database.yaml- this is how we communicate the database</p>

<p>App Folder: spend most of our time in the app directory</p>

<p>MVC: (7:42 pm)
Models: define how data is created, retrieved, updated and deleted--> the only code that defined these 4 actions are in the model</p>

<p>Controllers: where to send the data to
business logic</p>

<p>Views: display logic</p>

<p>Helpers: helper functions for your views
db: stores your database and all the instructions for your database</p>

<p>lib: code that you app needs but isn't part of the request cycle
-tasks- background tasks</p>

<p>public dir:
any code that doesn't require the rails stack to run</p>

<p>vendor: any 3rd party library that you didn't write
-- similar to the lib directory that you didn't write</p>

<p>REST:
-Representational State Transfer
-URL: unifeied resources locators
- there should be a unified way to expose resources to the world
-1st concept: the things we get online are resources-- what the server is going to respond with is a representation of the real thing (since it can't deliver the real thing)
-there should be consistency and predictability-</p>

<p>rails generate resource song title:string duration:integer #always singular
rails generate scaffold song title:string #in the beginning the first few resources are created by scaffolds</p>

<p>MIGRATION: defines a db strcuture
every resource has it's own table</p>

<p>SQL: server query language or standard query language</p>

<p>SCHEMA- describes the structure of the DB</p>

<p>RAKE: a ruby library to run background tasks
rake stats-- gives me stats on the app
rake about--> outputs info about the environment, etc
rake -T --> outputs provides commands</p>

<p>VIDEO 2...</p>

<p>migrations are iterative by nature
every migration should one and only one thing</p>

<p>rake db:migrae runs the migration
rake db:rollback rolls back the migration</p>

<p>OBJECT ORIENTATION
-what to create metaphors in our code to representations of the real world</p>

<p>Song.find(2) #=> finds the object of id 2
Song.all #=> returns all the instances of the class</p>

<p>ORM: object relational mappers
- a class is to a table : an instance of a class is to a row of a table
-every instance is going to wrap a row of a table
-one to one relationship between an instance and a row
-the library, the ORM, allows you to relate to the objects with knowing how the objects are related</p>

<p>Programming is just codifying procedural knowledge</p>

<p>DOCUMENTATION:
Rails Guides: more like how-tos
Rails API: the more technical version</p>
]]></content>
  </entry>
  
</feed>

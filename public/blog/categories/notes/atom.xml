<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | Documenting all this...]]></title>
  <link href="http://ajonas.heroku.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://ajonas.heroku.com/"/>
  <updated>2012-07-16T16:36:34-04:00</updated>
  <id>http://ajonas.heroku.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lecture 3- July 15]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/16/lecture-3-july-15/"/>
    <updated>2012-07-16T16:06:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/16/lecture-3-july-15</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 2 Rails]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/08/lecture-2-rails/"/>
    <updated>2012-07-08T14:21:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/08/lecture-2-rails</id>
    <content type="html"><![CDATA[<p><strong><em>Lecture 2</em></strong></p>

<p>BASH
<code>
cd .. # change to up a directory
cd . # change to current directory
ls # list
cd ~ #home directory
</code></p>

<p><strong><em>Resources</em></strong>
- the thing you want to let users manipulate
<code>
rails generate resource Mixtape nae:string
</code></p>

<p>Rake-
a ruby language for running scripts</p>

<p>Models-
main component of your application, they represent the resources of your application
every model is just a ruby class definition located in the model</p>

<p>so the mixtape model defines a class Mixtape that is the object that will allow our app to CRUD mixtapes</p>

<p>If we a Users model we have a users table</p>

<p>Goal for today is to understand the request cycle</p>

<p><strong><em>Routes</em></strong></p>

<p><strong><em>DSL- Domain Specific Language</em></strong> (3:08PM)
``` ruby
match '/foo' => 'songs#foo' # this needs to be sent to a controller</p>

<h1>a songs controller with the foo action</h1>

<p>```
we need to find something that can handle the route--> we want to send it to a waiter, like ordering an A7 at a chinese resturant</p>

<p><strong>an ACTION is just a method defined in the class!!</strong>
a Controller is just a class --> a grouping that relates to songs</p>

<p>if it can't find a page it is 404</p>

<p>every action in the app needs to be defined</p>

<p>5 keywords available...
MATCH
GET
POST
PUT
DELETE</p>

<p>cmd T --> opens a window for you to access files</p>

<p><strong><em>rake routes:</em></strong>
first column is the request
second is http verb
third is url or pattern
fourth is the contoller#action</p>

<p>resources macro- defines all the restful actions for the resource</p>

<p>?? so what was the main problem with the post request?</p>

<p><strong><em>Controllers &amp; #actions </em></strong></p>

<p>``` ruby e.g. of actions in the Songs controller
def name
  render :template => 'songs/name' #explicit template rendering
end</p>

<h1>exactly the same as this...</h1>

<p>def name
end
```</p>

<p><code>ruby Renders
render :action =&gt; "name" # in the views folder named after the controller
render :template =&gt; 'songs/name' # need to specify the full path
render :xml
render :json
</code></p>

<p>Video 2 starts 4PM
diff between &lt;% and =&lt;%
&lt;% will get executed, but will not show in the html
&lt;%= will get executed and will also show in the html</p>

<p><strong><em> Instance variables </em></strong>
Instance variables are the only thing passed from the controller to the views
??? do class variables get passed as well?</p>

<p><strong>link_to</strong>
<code>ruby
&lt;%= link_to 'Search', 'http://google.com' %&gt;
</code>
we have two methods <em>path and </em>url</p>

<p><code>ruby e.g. of link_to
&lt;%= link_to 'Show', 'song' %&gt; #polymorphic interface
</code></p>

<p>3 pars of rails (4:10 PM)
ORM- active record
Action controller
Action view</p>

<p>LEARN MORE: there are lots of polymorphic interfaces play nicely with active record</p>

<p><code>ruby automatic routing with namespacing with_options
with_options :controller =&gt; 'site' do |s|
  s.get 'about'
  s.get 'home'
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/05/octopress/"/>
    <updated>2012-07-05T10:54:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/05/octopress</id>
    <content type="html"><![CDATA[<p>Follow directions here...</p>

<p>Setting Up Octopress</p>

<p><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<p>Had one hiccup in my system didn't have Ruby 1.9.2 which .rvmrc file requires (https://rvm.io//workflow/rvmrc/). I had to go ahead and install it.</p>

<p>Deploying on Heroku:</p>

<p>To see on localhost:4000
rake preview</p>

<p><strong>To push:</strong>
<code>
rake generate
git add .
git commit -m 'site updated'
git push heroku master
</code></p>

<p><a href="http://octopress.org/docs/deploying/heroku/">Octopress delpoy instructons</a></p>

<p>That all went fairly well... though I didn't understand all the intermediate steps. I'll have to take closer look.</p>

<p><a href="http://support.mashery.com/docs/customizing_your_portal/Markdown_Cheat_Sheet/">Markdown language cheat sheet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procs and lambdas]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/03/procs-and-lambdas/"/>
    <updated>2012-07-03T10:53:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/03/procs-and-lambdas</id>
    <content type="html"><![CDATA[<p>You know how everything in Ruby is an object, well, as it turns out that's not quite true. Ruby blocks are not objects! So, blocks are not objects, but you can turn them into objects without too much trouble. We do this by wrapping our block in an instance of the Proc class...
PROCS:</p>

<p>Very standard to pass along a code block to the each method</p>

<p>block_given? --> method to check whether a block was given to a method or not</p>

<p>A proc --> a nameless or anonymous block of code that can be represented as an object, can be passed around and called at will</p>

<p>``` ruby E.G.
class Array
def random_each(&amp;b)  # => with the ampersand, b essentially becomes a reference to the code block below.
  shuffle.each do |el|</p>

<pre><code>b.call el  #=&gt; b is a proc
end
</code></pre>

<p>  end
end</p>

<p>[1,2,3,4,5].random_each do |el|
puts |el|</p>

<p>end
```
You can only pass a single block to a method at one time, but you can pass multiple procs around because they are regular object like arrays or strings.</p>

<p>``` ruby E.G.
Def run_two_procs (a, b)
  a.call
  b.call
end</p>

<p>proc1 = Proc.new do
puts "This is proc1"
end</p>

<p>proc2 = Proc.new do
puts "This is proc2"
end</p>

<p>run_two_procs proc1, proc2
```
If you have a code block, you can call it with yield, you can use the ampersand argument to convert it into a proc,</p>

<p>**if you use Proc.new without giving it a code block to assign to that Proc, Proc.new will look to see if the current scope has been passed a code block and then it will use that --> it will do it all implicitly, you don't need to specify anything here. If it can't find a block (e..g if you commented the block below) it raises an error. Proc.new wants a block passed directly or it implicitly picks it up from the current scope/environment.</p>

<p>``` ruby
Def run_block
  p = Proc.new # **see above
  p.call
end</p>

<p>run_block do
puts "Hello World'</p>

<p>end
```</p>

<p>In Ruby 1.9 there are 4 main ways to run or call a block:
``` ruby Proc e.g.
my_proc = Proc.new do |a|
  puts "This is a proc and #{a} was passed along to me"
my_proc.call(10) #call method that passes in 10
my_proc.(20) #this isn't a typo, gets converted to a call
my_proc[30] #
my_proc === 40 # triple equal is called the case equality operator, it's primary function is used in case statements</p>

<p>several = Proc.new { |number| number > 3 &amp;&amp; number &lt; 8 }
none = Proc.new { |number| number == 0 }</p>

<p>case number
when several
  puts "several"
when none
  puts "none"
end
```
-->In this case the several proc is being run and if it returns true it runs the puts --> this abstracts everything away</p>

<p><strong><em>Lambdas</em></strong></p>

<p>Lambdas are much more sensitive than Procs to parameters. Much like methods, they need to receive the exact number of arguments as defined. Procs will just grab nil if nothing has been passed in.
Closures</p>

<p>In ruby a closure is like an anonymous code block, but that maintains references to local variables and were being used at the time of the definition of that code.
``` ruby
def run_proc(p)
  p.call
end</p>

<p>name = "Fred"</p>

<p>print_a_name = proc { puts name } # this name doesn't exist in the definition above. This magic is called a closure. (23 Min)</p>

<p>run_proc print_a_name
```</p>

<p>ALSO:
``` ruby
def run_proc(p)
  p.call
end</p>

<p>name = "Fred"
print_a_name = proc { puts name }
name = "John"</p>

<p>run_proc print_a_name # => now this will output John because it kept a reference to the local variable.
```
<a href="http://www.youtube.com/watch?v=VBC-G6hahWA">Video</a></p>

<p><a href="http://www.ruby-doc.org/core-1.9.3/Proc.html">DOCUMENTATION</a></p>

<p>SOME MORE READING:</p>

<p><a href="http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/">http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/</a></p>

<p><a href="http://pine.fm/LearnToProgram/?Chapter=10">http://pine.fm/LearnToProgram/?Chapter=10</a></p>

<p><a href="http://strugglingwithruby.blogspot.com/2009/02/ruby-proc.html">http://strugglingwithruby.blogspot.com/2009/02/ruby-proc.html</a></p>

<p><a href="http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html">http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[=== case equality operator]]></title>
    <link href="http://ajonas.heroku.com/blog/2012/07/03/equals-equals-equals-case-equality-operator/"/>
    <updated>2012-07-03T10:53:00-04:00</updated>
    <id>http://ajonas.heroku.com/blog/2012/07/03/equals-equals-equals-case-equality-operator</id>
    <content type="html"><![CDATA[<h3>In a case statement...</h3>

<p>``` ruby</p>

<p>case number
  when 5</p>

<pre><code>#some code
</code></pre>

<p>  when 3</p>

<pre><code>#more code
</code></pre>

<p>  else</p>

<pre><code>#something else
</code></pre>

<p>end
```</p>

<p>Behind the scenes 5 is being compared to number with the === operator, so 5 === number, 3 === number, etc
``` ruby
several = Proc.new { |number| number > 3 &amp;&amp; number &lt; 8 }
none = Proc.new { |number| number == 0 }</p>

<p>case number
  when several</p>

<pre><code>puts "several"
</code></pre>

<p>  when none</p>

<pre><code>puts "none"
</code></pre>

<p>end
```
In this case the several proc is being run and if it returns true it runs the puts --> this abstracts everything away</p>
]]></content>
  </entry>
  
</feed>

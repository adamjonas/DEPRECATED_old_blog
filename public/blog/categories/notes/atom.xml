<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-08-03T19:41:18-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HAW-day3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3/"/>
    <updated>2012-08-02T10:55:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3</id>
    <content type="html"><![CDATA[<p>Rolled back git using the sha</p>

<p>used the fresh method to collect the fresh errors in an array. then we used the flatten method to un-nest the array to acccess the objects.</p>

<p>changed the interface to show the airbrake IDs so that we can differentiate the errors with the same name</p>

<p>p291
form_tag issues an HTTP request that replaces all the content in the browser.
form_remote_tag issues an HTTP request, but processes the results with JavaScript
rather than having the browser render them directly.</p>

<p>nav
filtering
all errors inbox
checkboxes(which don't work but do display) - have the route for signal</p>

<p>event driven programming</p>

<p>dom fields</p>

<p>cmd option i - to open the</p>

<p>collect all values int eh cb
submit the request, submit the values manually
raise params.inspect</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[haw-day1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1/"/>
    <updated>2012-07-31T15:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1</id>
    <content type="html"><![CDATA[<h3>Deploying to Heroku</h3>

<p>Make sure to modify the <a href="https://devcenter.heroku.com/articles/mongohq#mongoid">mongoid.yml file</a> to config the production environment.</p>

<p><strong><em>2 major issues with the mongoid deploy:</em></strong></p>

<ol>
<li>Issue with ruby version was the first error we encountered... need to keep in that <em>mongoid only supports 1.9.3</em> this ended up being a big issue.</li>
</ol>


<p>In --> heroku logs --tail:
<code>
ActionView::Template::Error (undefined method `[]' for nil:NilClass):
 11:   &lt;/thead&gt;  
 10:     &lt;/tr&gt;
 12:
 13:   &lt;% @airbrake_errors.each_with_index do |a_e, index| %&gt;
</code></p>

<ol>
<li>The other issue was to reconfigure the setting below from false to true as the</li>
</ol>


<p><code>ruby config/environments/production.rb
 config.assets.compile = true
</code></p>

<p>```
 ActionView::Template::Error (images/apple-touch-icon-144x144-precomposed.png isn't precompiled):</p>

<p> &lt;%= favicon_link_tag 'images/apple-touch-icon-144x144-precomposed.png', :rel => 'apple-touch-icon-precomposed', :type => 'image/png', :sizes => '144x144' %></p>

<p> app/views/layouts/application.html.erb:19:in `<em>app_views_layouts_application_html_erb</em>__1957659516384225917_21931620'
```</p>

<h3>Rewriting the writer</h3>

<p>```ruby Change the tag writer
def tag_names=(string_of_names)</p>

<pre><code>string_of_names.split(", ").each do |tag_name|
  self.tags.find_or_create_by(name: tag_name)
  #the find_or_create_by wasn't creating unique tag names
  #the reason was because we were linking too many methods together
  #mongoid is finicky
end
</code></pre>

<p>  end</p>

<h1>was changed to...</h1>

<p>def tag_names=(string_of_names)</p>

<pre><code>self.tags &lt;&lt; string_of_names.split(", ").collect do |tag_name|
  tag = Tag.find_or_create_by(name: tag_name)
end
</code></pre>

<p>  end</p>

<h1>but we discoved that the tags were no disappearing if they were left off the form</h1>

<p>def tag_names=(string_of_names)
   #later we added this line because tags were persisting even if we tried to edit them.</p>

<pre><code>self.tags.delete_all
self.tags &lt;&lt; string_of_names.split(", ").collect do |tag_name|
  tag = Tag.find_or_create_by(name: tag_name)
end
</code></pre>

<p>  end
<code>
</code>ruby the last td was changed...
 &lt;% @airbrake_errors.each_with_index do |a_e, index| %></p>

<pre><code>&lt;tr&gt;
  &lt;td&gt;
    &lt;%= a_e.tags.collect{ |tag|
        link_to(tag.name, tag_path(tag)) #=&gt; "&lt;a href="adasda"&gt;Tag&lt;/a&gt;"
    }.join(", ").html_safe %&gt;
    &lt;/td&gt;
    # this needs to be better understood-- TODO
</code></pre>

<p>```</p>

<h3>HTTP Authentication</h3>

<p><a href="http://stackoverflow.com/questions/3839167/is-there-a-way-to-set-up-simple-http-authentication-for-an-app-on-heroku">This did it</a>.</p>

<h3>Pushing the seed file to heroku</h3>

<p><code>
♕ heroku run rake db:seed
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW- Day0]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/30/haw-day0/"/>
    <updated>2012-07-30T10:13:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/30/haw-day0</id>
    <content type="html"><![CDATA[<p>Pivotal:
Move from icebox to current
Click Start
Each story is either a feature, a bug, or a chore</p>

<p>Generate our app
Some sort of layout
beginning data model
- main model
- tag model
Import script to retreive that data off the API</p>

<p>Views/Controllers
- index view
- tagging</p>

<p>Keep commits small and never develop in the master branch</p>

<p>Git:
Git create the repo
git clone the repo
git merge mongoid-setup --no-ff #no FF- will show the branch even after the commmit</p>

<p>Mongoid-
rails new myapp -O (--skip-active-record)
<code>
gem 'mongoid', "~&gt; 3.0.0"
</code></p>

<p>Twitter Bootstrap
gem twitter-bootstrap</p>

<p>Airbrake Gem</p>

<p>Powder Gem
gem install powder
makes app available at airbrake.dev</p>

<p>Immediately want to start creating the 'error model', but error is a terrible title so call it airbrake model</p>

<p>Routes:
change index to errors#index</p>

<p>Generate airbrake_errors model
Generate errors_controller
Generate bootstrap
<code>ruby Fluid Layout
rails g bootstrap layout application fluid
</code>
<code>ruby In Console
AirbrakeError.create(:name =&gt; "Test")
</code></p>

<p>in the test unit, want to check that AirbrakeError.delete_all
test to make sure the airbrake API gem tried to connect</p>

<p><code>ruby
def AirbrakeError.import_from_airbrake
</code></p>

<p>Create initializer to config the connection to airbrake</p>

<h3>Next Steps</h3>

<p>build out the bootstrap layout
build the import script</p>

<p>Ruby Debugger: TODO
gem debugger at the bottom of the gem file
bundle</p>

<p>inspect the hashiemashie to see how the objects are composed</p>

<p><code>ruby
def self.import_from_airbrake
  a = AirbrakeAPI::Client.new
end
</code></p>

<p>Airbrake Doc:
Can make calls to get a list of errors in general and a call to get more info about an error.
-The api in general isn't all that detailed.</p>

<p>There is a diff between .error('id') and .errors -- the difference is in what is returned-- i.e. the backtrace etc.</p>

<p>check out what notices because we are probably interested more in the notice than the error itself.</p>

<p><code>ruby Maybe Something Like This?
def ignore
  AirbrakeAPI.update(self.id, :group =&gt; { :resolved =&gt; true})
end
</code></p>

<p>Diff between error and notice: an error is a unique conceptual item and a notice is the occurance of the error</p>

<p>```ruby
h = {:a => 1}
  h.each do |k,v|
  end
b[k] = v</p>

<h1>this is the same as the dynamic dispatching method</h1>

<p>airbrake.send("#{key}=", value)
```</p>

<p>From there let's go to the view and start formatting the output</p>

<p>Ruby alias method-- this is built into ruby not rails or mongoid
<code>ruby airbrake_error.rb
alias :name :error_message
</code></p>

<p>TIPS and Tricks section:
Gem Server shows the documentation locally</p>

<p><a href="http://www.codinghorror.com/">Jeff Atwood</a></p>

<p>LOOK-UP 'Client', 'tap', 'send'
dynamic dispatch and the send method
rails cycle
Moped::BSON: -- how it generates its unique IDs</p>

<p>GIT STUFF:
<code>
git pull --rebase #=&gt; if the remote has merges, rewind and then move back forward
git reset --hard HEAD #=&gt; go to the last checkout (HEAD of the branch) without the warnings (hard)
git stash # save changes
git stash pop #restore changes
</code></p>

<p><code>
♕ git add .
♕ git status
♕ git checkout -b link-to-airbrake
M   app/models/airbrake_error.rb
M   app/views/errors/index.html.erb
Switched to a new branch 'link-to-airbrake'
♕ git add .
♕ git commit -am "added airbrake_url method and link_to in views"
♕ git push
♕ git checkout master
♕ git merge link-to-airbrake
♕ git push
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 3- July 15]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15/"/>
    <updated>2012-07-16T16:06:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15</id>
    <content type="html"><![CDATA[<p><strong><em>Rails Lecture 3- July 15</em></strong></p>

<p>why use 'get' instead of 'match' in the routes file?
-bc want to use http verbs to be more specific
-match is more vague, you should generally use specific verbs</p>

<p><code>
rake routes CONTROLLER=SESSIONS
</code>
will narrow output</p>

<p>```
render :action => 'under_construction' #=> relative to the current controller
render :template => 'shared/under_construction' #=> doesn't assume it is in the current views folder</p>

<h1>under the class name</h1>

<p>render 'shared/under_construction' #=> these 3 work the same now
```</p>

<p><strong>Private Methods</strong>(2:40)
- about what object the receiver is on the method called-- private methods can only be called on implicit receivers
- a way to control scope
- anything that is not an action, that isn't an endpoint of a route should be private</p>

<p>routes: bridge between the browser, specifcially URLs, and the app</p>

<p>Polymorphic Interface(2:50)
The link_to method--> accepts two parameters. the first is the name of the link as a string, the second is the string that it just uses it as a href
-> if I send it an instance of active record, it's behavior will change ==> it will become intelligent and it will understand that it is an instance of active record</p>

<p><strong>Lecture</strong> (2:55)</p>

<p>anything that starts with an underscore '_form.erb.html' for example is a snippet of code that is reused on multiple templates</p>

<p>form_for(@song) --> knows whether the song is new or should be updated... obviously different verbs are required for those diff actions</p>

<p><code>ruby Form Helpers (3:09)
form_for(@song)
f.textfield :artist_name #=&gt; this will break if there is not a artist_name method for the song class in the controller
</code></p>

<p>``` ruby
def create</p>

<pre><code>@song = Song.new(param[:song]) 
# this line instantiates a New Song
# collects the data
#assigning the data to the correct attribute
</code></pre>

<p> #the params[:song] lines does the last two steps
end
```</p>

<p><strong>Params</strong> (3:20)
params looks and behaves like a hash
its a nested hash</p>

<p>``` ruby Assigning a name
@song.name = params[:song][:name] #but this happens during the following line of code:</p>

<p>@song = Song.new(param[:song]) # this happens using mass assignment!
```</p>

<p><code>ruby Manually Assigning the Name
input type ="text" name="song[name]" #this looks like the key of the params hash ==&gt; params[:song][:name]
</code></p>

<p>(3:50) Nested hash testing</p>

<p><code>ruby Query string (3:57)
mldraft.com?person[name]=adam&amp;person[email]=adam@mldraft.com
</code>
Can access the params hash in the same way as the form. So params[:person][:name] will equal adam</p>

<p>Mass Assignment Vulnability (4:05)
- attr_accessible is a whitelist approach versus attr_protected which is a black list approach
- this has nothing to do with the attr_accessor, reader, or writer</p>

<p>Virtual attributes don't persist to the database</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 2 Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/08/lecture-2-rails/"/>
    <updated>2012-07-08T14:21:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/08/lecture-2-rails</id>
    <content type="html"><![CDATA[<p><strong><em>Lecture 2</em></strong></p>

<p>BASH
<code>
cd .. # change to up a directory
cd . # change to current directory
ls # list
cd ~ #home directory
</code></p>

<p><strong><em>Resources</em></strong>
- the thing you want to let users manipulate
<code>
rails generate resource Mixtape nae:string
</code></p>

<p>Rake-
a ruby language for running scripts</p>

<p>Models-
main component of your application, they represent the resources of your application
every model is just a ruby class definition located in the model</p>

<p>so the mixtape model defines a class Mixtape that is the object that will allow our app to CRUD mixtapes</p>

<p>If we a Users model we have a users table</p>

<p>Goal for today is to understand the request cycle</p>

<p><strong><em>Routes</em></strong></p>

<p><strong><em>DSL- Domain Specific Language</em></strong> (3:08PM)
``` ruby
match '/foo' => 'songs#foo' # this needs to be sent to a controller</p>

<h1>a songs controller with the foo action</h1>

<p>```
we need to find something that can handle the route--> we want to send it to a waiter, like ordering an A7 at a chinese resturant</p>

<p><strong>an ACTION is just a method defined in the class!!</strong>
a Controller is just a class --> a grouping that relates to songs</p>

<p>if it can't find a page it is 404</p>

<p>every action in the app needs to be defined</p>

<p>5 keywords available...
MATCH
GET
POST
PUT
DELETE</p>

<p>cmd T --> opens a window for you to access files</p>

<p><strong><em>rake routes:</em></strong>
first column is the request
second is http verb
third is url or pattern
fourth is the contoller#action</p>

<p>resources macro- defines all the restful actions for the resource</p>

<p>?? so what was the main problem with the post request?</p>

<p><strong><em>Controllers &amp; #actions </em></strong></p>

<p>``` ruby e.g. of actions in the Songs controller
def name
  render :template => 'songs/name' #explicit template rendering
end</p>

<h1>exactly the same as this...</h1>

<p>def name
end
```</p>

<p><code>ruby Renders
render :action =&gt; "name" # in the views folder named after the controller
render :template =&gt; 'songs/name' # need to specify the full path
render :xml
render :json
</code></p>

<p>Video 2 starts 4PM
diff between &lt;% and =&lt;%
&lt;% will get executed, but will not show in the html
&lt;%= will get executed and will also show in the html</p>

<p><strong><em> Instance variables </em></strong>
Instance variables are the only thing passed from the controller to the views
??? do class variables get passed as well?</p>

<p><strong>link_to</strong>
<code>ruby
&lt;%= link_to 'Search', 'http://google.com' %&gt;
</code>
we have two methods <em>path and </em>url</p>

<p><code>ruby e.g. of link_to
&lt;%= link_to 'Show', 'song' %&gt; #polymorphic interface
</code></p>

<p>3 pars of rails (4:10 PM)
ORM- active record
Action controller
Action view</p>

<p>LEARN MORE: there are lots of polymorphic interfaces play nicely with active record</p>

<p><code>ruby automatic routing with namespacing with_options
with_options :controller =&gt; 'site' do |s|
  s.get 'about'
  s.get 'home'
end
</code></p>
]]></content>
  </entry>
  
</feed>

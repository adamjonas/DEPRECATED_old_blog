<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-07-23T09:34:04-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lecture 3- July 15]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15/"/>
    <updated>2012-07-16T16:06:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/16/lecture-3-july-15</id>
    <content type="html"><![CDATA[<p><strong><em>Rails Lecture 3- July 15</em></strong></p>

<p>why use 'get' instead of 'match' in the routes file?
-bc want to use http verbs to be more specific
-match is more vague, you should generally use specific verbs</p>

<p><code>
rake routes CONTROLLER=SESSIONS
</code>
will narrow output</p>

<p>```
render :action => 'under_construction' #=> relative to the current controller
render :template => 'shared/under_construction' #=> doesn't assume it is in the current views folder</p>

<h1>under the class name</h1>

<p>render 'shared/under_construction' #=> these 3 work the same now
```</p>

<p><strong>Private Methods</strong>(2:40)
- about what object the receiver is on the method called-- private methods can only be called on implicit receivers
- a way to control scope
- anything that is not an action, that isn't an endpoint of a route should be private</p>

<p>routes: bridge between the browser, specifcially URLs, and the app</p>

<p>Polymorphic Interface(2:50)
The link_to method--> accepts two parameters. the first is the name of the link as a string, the second is the string that it just uses it as a href
-> if I send it an instance of active record, it's behavior will change ==> it will become intelligent and it will understand that it is an instance of active record</p>

<p><strong>Lecture</strong> (2:55)</p>

<p>anything that starts with an underscore '_form.erb.html' for example is a snippet of code that is reused on multiple templates</p>

<p>form_for(@song) --> knows whether the song is new or should be updated... obviously different verbs are required for those diff actions</p>

<p><code>ruby Form Helpers (3:09)
form_for(@song)
f.textfield :artist_name #=&gt; this will break if there is not a artist_name method for the song class in the controller
</code></p>

<p>``` ruby
def create</p>

<pre><code>@song = Song.new(param[:song]) 
# this line instantiates a New Song
# collects the data
#assigning the data to the correct attribute
</code></pre>

<p> #the params[:song] lines does the last two steps
end
```</p>

<p><strong>Params</strong> (3:20)
params looks and behaves like a hash
its a nested hash</p>

<p>``` ruby Assigning a name
@song.name = params[:song][:name] #but this happens during the following line of code:</p>

<p>@song = Song.new(param[:song]) # this happens using mass assignment!
```</p>

<p><code>ruby Manually Assigning the Name
input type ="text" name="song[name]" #this looks like the key of the params hash ==&gt; params[:song][:name]
</code></p>

<p>(3:50) Nested hash testing</p>

<p><code>ruby Query string (3:57)
mldraft.com?person[name]=adam&amp;person[email]=adam@mldraft.com
</code>
Can access the params hash in the same way as the form. So params[:person][:name] will equal adam</p>

<p>Mass Assignment Vulnability (4:05)
- attr_accessible is a whitelist approach versus attr_protected which is a black list approach
- this has nothing to do with the attr_accessor, reader, or writer</p>

<p>Virtual attributes don't persist to the database</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 2 Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/08/lecture-2-rails/"/>
    <updated>2012-07-08T14:21:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/08/lecture-2-rails</id>
    <content type="html"><![CDATA[<p><strong><em>Lecture 2</em></strong></p>

<p>BASH
<code>
cd .. # change to up a directory
cd . # change to current directory
ls # list
cd ~ #home directory
</code></p>

<p><strong><em>Resources</em></strong>
- the thing you want to let users manipulate
<code>
rails generate resource Mixtape nae:string
</code></p>

<p>Rake-
a ruby language for running scripts</p>

<p>Models-
main component of your application, they represent the resources of your application
every model is just a ruby class definition located in the model</p>

<p>so the mixtape model defines a class Mixtape that is the object that will allow our app to CRUD mixtapes</p>

<p>If we a Users model we have a users table</p>

<p>Goal for today is to understand the request cycle</p>

<p><strong><em>Routes</em></strong></p>

<p><strong><em>DSL- Domain Specific Language</em></strong> (3:08PM)
``` ruby
match '/foo' => 'songs#foo' # this needs to be sent to a controller</p>

<h1>a songs controller with the foo action</h1>

<p>```
we need to find something that can handle the route--> we want to send it to a waiter, like ordering an A7 at a chinese resturant</p>

<p><strong>an ACTION is just a method defined in the class!!</strong>
a Controller is just a class --> a grouping that relates to songs</p>

<p>if it can't find a page it is 404</p>

<p>every action in the app needs to be defined</p>

<p>5 keywords available...
MATCH
GET
POST
PUT
DELETE</p>

<p>cmd T --> opens a window for you to access files</p>

<p><strong><em>rake routes:</em></strong>
first column is the request
second is http verb
third is url or pattern
fourth is the contoller#action</p>

<p>resources macro- defines all the restful actions for the resource</p>

<p>?? so what was the main problem with the post request?</p>

<p><strong><em>Controllers &amp; #actions </em></strong></p>

<p>``` ruby e.g. of actions in the Songs controller
def name
  render :template => 'songs/name' #explicit template rendering
end</p>

<h1>exactly the same as this...</h1>

<p>def name
end
```</p>

<p><code>ruby Renders
render :action =&gt; "name" # in the views folder named after the controller
render :template =&gt; 'songs/name' # need to specify the full path
render :xml
render :json
</code></p>

<p>Video 2 starts 4PM
diff between &lt;% and =&lt;%
&lt;% will get executed, but will not show in the html
&lt;%= will get executed and will also show in the html</p>

<p><strong><em> Instance variables </em></strong>
Instance variables are the only thing passed from the controller to the views
??? do class variables get passed as well?</p>

<p><strong>link_to</strong>
<code>ruby
&lt;%= link_to 'Search', 'http://google.com' %&gt;
</code>
we have two methods <em>path and </em>url</p>

<p><code>ruby e.g. of link_to
&lt;%= link_to 'Show', 'song' %&gt; #polymorphic interface
</code></p>

<p>3 pars of rails (4:10 PM)
ORM- active record
Action controller
Action view</p>

<p>LEARN MORE: there are lots of polymorphic interfaces play nicely with active record</p>

<p><code>ruby automatic routing with namespacing with_options
with_options :controller =&gt; 'site' do |s|
  s.get 'about'
  s.get 'home'
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procs and lambdas]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/03/procs-and-lambdas/"/>
    <updated>2012-07-03T10:53:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/03/procs-and-lambdas</id>
    <content type="html"><![CDATA[<p>You know how everything in Ruby is an object, well, as it turns out that's not quite true. Ruby blocks are not objects! So, blocks are not objects, but you can turn them into objects without too much trouble. We do this by wrapping our block in an instance of the Proc class...
PROCS:</p>

<p>Very standard to pass along a code block to the each method</p>

<p>block_given? --> method to check whether a block was given to a method or not</p>

<p>A proc --> a nameless or anonymous block of code that can be represented as an object, can be passed around and called at will</p>

<p>``` ruby E.G.
class Array
def random_each(&amp;b)  # => with the ampersand, b essentially becomes a reference to the code block below.
  shuffle.each do |el|</p>

<pre><code>b.call el  #=&gt; b is a proc
end
</code></pre>

<p>  end
end</p>

<p>[1,2,3,4,5].random_each do |el|
puts |el|</p>

<p>end
```
You can only pass a single block to a method at one time, but you can pass multiple procs around because they are regular object like arrays or strings.</p>

<p>``` ruby E.G.
Def run_two_procs (a, b)
  a.call
  b.call
end</p>

<p>proc1 = Proc.new do
puts "This is proc1"
end</p>

<p>proc2 = Proc.new do
puts "This is proc2"
end</p>

<p>run_two_procs proc1, proc2
```
If you have a code block, you can call it with yield, you can use the ampersand argument to convert it into a proc,</p>

<p>**if you use Proc.new without giving it a code block to assign to that Proc, Proc.new will look to see if the current scope has been passed a code block and then it will use that --> it will do it all implicitly, you don't need to specify anything here. If it can't find a block (e..g if you commented the block below) it raises an error. Proc.new wants a block passed directly or it implicitly picks it up from the current scope/environment.</p>

<p>``` ruby
Def run_block
  p = Proc.new # **see above
  p.call
end</p>

<p>run_block do
puts "Hello World'</p>

<p>end
```</p>

<p>In Ruby 1.9 there are 4 main ways to run or call a block:
``` ruby Proc e.g.
my_proc = Proc.new do |a|
  puts "This is a proc and #{a} was passed along to me"
my_proc.call(10) #call method that passes in 10
my_proc.(20) #this isn't a typo, gets converted to a call
my_proc[30] #
my_proc === 40 # triple equal is called the case equality operator, it's primary function is used in case statements</p>

<p>several = Proc.new { |number| number > 3 &amp;&amp; number &lt; 8 }
none = Proc.new { |number| number == 0 }</p>

<p>case number
when several
  puts "several"
when none
  puts "none"
end
```
-->In this case the several proc is being run and if it returns true it runs the puts --> this abstracts everything away</p>

<p><strong><em>Lambdas</em></strong></p>

<p>Lambdas are much more sensitive than Procs to parameters. Much like methods, they need to receive the exact number of arguments as defined. Procs will just grab nil if nothing has been passed in.
Closures</p>

<p>In ruby a closure is like an anonymous code block, but that maintains references to local variables and were being used at the time of the definition of that code.
``` ruby
def run_proc(p)
  p.call
end</p>

<p>name = "Fred"</p>

<p>print_a_name = proc { puts name } # this name doesn't exist in the definition above. This magic is called a closure. (23 Min)</p>

<p>run_proc print_a_name
```</p>

<p>ALSO:
``` ruby
def run_proc(p)
  p.call
end</p>

<p>name = "Fred"
print_a_name = proc { puts name }
name = "John"</p>

<p>run_proc print_a_name # => now this will output John because it kept a reference to the local variable.
```
<a href="http://www.youtube.com/watch?v=VBC-G6hahWA">Video</a></p>

<p><a href="http://www.ruby-doc.org/core-1.9.3/Proc.html">DOCUMENTATION</a></p>

<p>SOME MORE READING:</p>

<p><a href="http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/">http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/</a></p>

<p><a href="http://pine.fm/LearnToProgram/?Chapter=10">http://pine.fm/LearnToProgram/?Chapter=10</a></p>

<p><a href="http://strugglingwithruby.blogspot.com/2009/02/ruby-proc.html">http://strugglingwithruby.blogspot.com/2009/02/ruby-proc.html</a></p>

<p><a href="http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html">http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[=== case equality operator]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/03/equals-equals-equals-case-equality-operator/"/>
    <updated>2012-07-03T10:53:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/03/equals-equals-equals-case-equality-operator</id>
    <content type="html"><![CDATA[<h3>In a case statement...</h3>

<p>``` ruby</p>

<p>case number
  when 5</p>

<pre><code>#some code
</code></pre>

<p>  when 3</p>

<pre><code>#more code
</code></pre>

<p>  else</p>

<pre><code>#something else
</code></pre>

<p>end
```</p>

<p>Behind the scenes 5 is being compared to number with the === operator, so 5 === number, 3 === number, etc
``` ruby
several = Proc.new { |number| number > 3 &amp;&amp; number &lt; 8 }
none = Proc.new { |number| number == 0 }</p>

<p>case number
  when several</p>

<pre><code>puts "several"
</code></pre>

<p>  when none</p>

<pre><code>puts "none"
</code></pre>

<p>end
```
In this case the several proc is being run and if it returns true it runs the puts --> this abstracts everything away</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 1st Lecture]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/02/rails-1st-lecture/"/>
    <updated>2012-07-02T10:53:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/02/rails-1st-lecture</id>
    <content type="html"><![CDATA[<p>Rails Lecture I - July 2</p>

<p><strong><em>How the web works:</em></strong>
-the requests we send to other servers have headers with info about the request
-you get the response with a header and the body
-the body is just text and data with HTML
-the communication happens over TCP/IP, namely HTTP
- the browser renders the HTML by making it pretty
-we use GET, POST, PUT, and DELETE -</p>

<p>4 imporotant HTTP Verbs-->
GET- retrieve representation of content
POST- Submits data
PUT- Update
Delete- Deletes a specific resource</p>

<p>Convention over configuration
-we wants defaults</p>

<p>There are naming schemes such as:
all tables pl
all models are sigular
controller songs_controller.rb
views songs/</p>

<p><strong><em>Gems:</em></strong>
pre-packaged piece of software that ruby uses</p>

<p>Config Folder--> where the configuration of our app lives
-Database.yaml- this is how we communicate the database</p>

<p>App Folder: spend most of our time in the app directory</p>

<p><strong><em>MVC:</em></strong> (7:42 pm)
Models: define how data is created, retrieved, updated and deleted--> the only code that defined these 4 actions are in the model</p>

<p>Controllers: where to send the data to
business logic</p>

<p>Views: display logic</p>

<p>Helpers: helper functions for your views
db: stores your database and all the instructions for your database</p>

<p>lib: code that you app needs but isn't part of the request cycle
-tasks- background tasks</p>

<p>public dir:
any code that doesn't require the rails stack to run</p>

<p>vendor: any 3rd party library that you didn't write
-- similar to the lib directory that you didn't write</p>

<p><strong><em>REST:</em></strong>
-Representational State Transfer
-URL: unifeied resources locators
- there should be a unified way to expose resources to the world
-1st concept: the things we get online are resources-- what the server is going to respond with is a representation of the real thing (since it can't deliver the real thing)
-there should be consistency and predictability-</p>

<p>rails generate resource song title:string duration:integer #always singular
rails generate scaffold song title:string #in the beginning the first few resources are created by scaffolds</p>

<p><strong><em>MIGRATIONS:</em></strong> defines a db strcuture
every resource has it's own table</p>

<p><strong><em>SQL:</em></strong> server query language or standard query language</p>

<p><strong><em>SCHEMA-</em></strong> describes the structure of the DB</p>

<p><strong><em>RAKE:</em></strong> a ruby library to run background tasks
<code>
rake stats-- gives me stats on the app
rake about--&gt; outputs info about the environment, etc
rake -T --&gt; outputs provides commands
</code></p>

<p>VIDEO 2...</p>

<p>migrations are iterative by nature
every migration should one and only one thing</p>

<p>rake db:migrae runs the migration
rake db:rollback rolls back the migration</p>

<p><strong><em>OBJECT ORIENTATION</em></strong>
-what to create metaphors in our code to representations of the real world
<code>ruby
Song.find(2) #=&gt; finds the object of id 2
Song.all #=&gt; returns all the instances of the class
</code>
<strong><em>ORM: object relational mappers</em></strong>
- a class is to a table : an instance of a class is to a row of a table
-every instance is going to wrap a row of a table
-one to one relationship between an instance and a row
-the library, the ORM, allows you to relate to the objects with knowing how the objects are related</p>

<p>Programming is just codifying procedural knowledge</p>

<p><strong><em>DOCUMENTATION:</em></strong>
Rails Guides: more like how-tos
Rails API: the more technical version</p>
]]></content>
  </entry>
  
</feed>

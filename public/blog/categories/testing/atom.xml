<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-09-18T16:22:11-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mini-Test]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/18/testing/"/>
    <updated>2012-09-18T15:29:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/18/testing</id>
    <content type="html"><![CDATA[<p>```ruby Some examples</p>

<h1>require 'minitest/autorun'</h1>

<h1>class MyTest &lt; MiniTest::Unit::TestCase</h1>

<h1>all tests are prefixed with "test_"</h1>

<pre><code>def test_that_addition_works
    assert_equal 4, 2+2
end

def test_that_my_arry_has_a_value
    my_array = %w(dog cat frog)
    assert my_array.include?('frog')
end
</code></pre>

<h1>asser_delta: checks to see that floating point numbers are within a given range</h1>

<pre><code>def test_assert_delta
    assert_in_delta 3.14159, 3, 0.2
end
</code></pre>

<h1>assert_match: checks to see if the reg expressions evaluates against a string</h1>

<pre><code>def test_assert_match
    assert_match /world/, 'Hello world'
end
</code></pre>

<h1>assert_nil: all variables passed in are nil</h1>

<pre><code>def test_nil
    some_variables = nil
    assert_nil some_variable
end
</code></pre>

<h1>assert_output</h1>

<pre><code>def test_output
    assert_output "hello world", nil do
        print 'hello world'
    end
end
</code></pre>

<h1>assert_raises</h1>

<pre><code>def test_raise
    assert_raises NameError do
        this_variable_doesnt_exist
    end
end
</code></pre>

<h1>assert_respond_to: testing if something responds to a certain method</h1>

<pre><code>def test_respond
    assert_respond_to Array.new, 'include?'
end
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
</feed>

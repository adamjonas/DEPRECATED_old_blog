<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-07-18T11:51:36-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Lecture 3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/17/ruby-lecture-3-july-16/"/>
    <updated>2012-07-17T22:50:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/17/ruby-lecture-3-july-16</id>
    <content type="html"><![CDATA[<p><strong><em>Lecture 3, July 17</em></strong></p>

<p>Kent Beck</p>

<p>FizzBuzz
solutions on ?ruberque?</p>

<p>TDD: able to write the code that you wish you had</p>

<p><strong>Array Review:</strong>
empty[0] = "filled" #=> can assign slots one at a time
easy_as[1, 5] #=> can slice elements off, have elastic arrays --> can add elements to an array without doing anything else</p>

<p><strong>Lecture:</strong>
Object orientation- we send object methods
important to identify who the receiver is and what the method is
part of dot notation: every method returns an object, so you can chain another method on it
it's the return of the previous method that is the receiver for the following method</p>

<p>the strip method is part of the family of normalization</p>

<p>gsub = global substitution
sub will only replace the first occurrence it encounters</p>

<p>== is the same as eql method</p>

<p>methods that end with question marks --> the ? is part of the method name that indicates it returns a boolean value</p>

<p>strings like arrays can be sliced</p>

<p>match accepts a pattern of REGEX
  -the string literal for patterns are /a/e/i/o/u
  -check <a href="http://rubluar.com">http://rubluar.com</a></p>

<p><strong>Iteration</strong> is a fancy word for looping
anything that can iterated upon is described as an <em>enumerable</em>
strings and arrays are enumerables</p>

<p><strong>Scope</strong>
scope gates -- every time you see a 'do', 'end', 'def' keyword your scope changed.</p>

<p>blocks have an exclusive scope. If it is defined in that block and only in that block it is accessible for the outside.
method scopes are even stricter. cannot access method outside of that particular method.
parameters are how you pass in values into a method.</p>

<p>2nd program- (8:25- 8:35)
artist, album, song sorting</p>

<p><em>first step in a program is usually to set up state</em></p>

<p><strong>More Data Types</strong>
<em>Hashes</em> a lot like an array in that it is a collection object. An array is only indexed, so you can only refer to the objects within the array by its position</p>

<p><em>literal constructors</em>
"" - strings
// - REGEX
[] - array
{} - hashes
: - symbols</p>

<p>Hashes are valuable when you care about the meta data</p>

<p>every time you create a new string, it creates a new object in memory
a symbol is an immutable object</p>

<p>vending machine {</p>

<pre><code>a: =&gt; ["snickers", "twix", "kit kat"]
</code></pre>

<p>}
puts vending_machine[:a][0] #=> this accesses the :a key and the 0th position of the array which is the value</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scope]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/17/scope/"/>
    <updated>2012-07-17T20:19:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/17/scope</id>
    <content type="html"><![CDATA[<p>``` ruby Fancy Scope
class Whatever
  def add</p>

<pre><code>add_junk(new_junk) #this just feeds into the next method
</code></pre>

<p>  end</p>

<p>  def add_junk(new_junk)</p>

<pre><code>@junk &lt;&lt; new_junk
new_junk.owner = self
</code></pre>

<p>  end
end
```
I need to understand that feeding into the 2nd method better</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diaspora- Day 1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/10/diaspora/"/>
    <updated>2012-07-10T12:51:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/10/diaspora</id>
    <content type="html"><![CDATA[<p><a href="http://rubysource.com/build-your-own-social-network-with-diaspora-an-introduction/">What is diaspora?</a></p>

<p>Now I need to decide what DB I'm going to use. I poked around and found <a href="http://mariadb.org/">MariaDB</a>, but Avi suggested I go with <a href="http://www.percona.com/">Percona</a>, MySQL or Postgres. Postgres seems to have the best intergration with Heroku so I'll go with that...</p>

<p>I already have psql version 9.0.5. This isn't the newest version... TODO</p>

<p><strong><em>Open SSL</em></strong>
The <a href="http://www.openssl.org/about/"><strong>OpenSSL</strong></a> Project is a collaborative effort to develop a robust, commercial-grade, full-featured, and Open Source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols as well as a full-strength general purpose cryptography library managed by a worldwide community of volunteers that use the Internet to communicate, plan, and develop the OpenSSL toolkit and its related documentation.
- I'm not really sure what all that means... so I checked out
Here is what I found:
 - TLS and its predecessor SSL make significant use of certificate authorities.
 - The browser then uses the public key to encrypt a randomly selected symmetric key. Public-key encryption takes a lot of computing, so most systems use a combination of public-key and symmetric key encryption. When two computers initiate a secure session, one computer creates a symmetric key and sends it to the other computer using public-key encryption. The two computers can then communicate using symmetric-key encryption. Once the session is finished, each computer discards the symmetric key used for that session. Any additional sessions require that a new symmetric key be created, and the process is repeated.
 I can circle back to learn more <a href="http://www.techradar.com/news/software/how-ssl-and-tls-works-1047412">here.</a> TODO</p>

<p>I also have openSSL installed, but I'll update through
<code>
brew install openssl
</code>
This downloaded the package, but didn't update the version that I currently have. It stil shows:
<code>
♕ openssl version
OpenSSL 0.9.8r 8 Feb 2011
</code>
That's not great. Well I can't fix it now... another TODO</p>

<p><strong><em>cURL</em></strong> groks URLs <a href="http://curl.haxx.se/">http://curl.haxx.se/</a>
curl is a command line tool for transferring data with URL syntax, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. curl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, kerberos...), file transfer resume, proxy tunneling and a busload of other useful tricks.
- To <strong>grok</strong> is to intimately and completely share the same reality or line of thinking with another physical or conceptual entity.
- There is a tutorial <a href="http://curl.haxx.se/libcurl/c/libcurl-tutorial.html">http://curl.haxx.se/libcurl/c/libcurl-tutorial.html</a>. this however mostly focuses on C so I'm not even close to understanding it.
- There is another intro <a href="http://blog.instabill.com/index.php/2011/12/21/a-brief-introduction-to-curl">here</a> that appears to be more my speed.
- also there is a <a href="">video</a>
 - don't know what any of this means... but I do have it installed. Another TODO</p>

<p><strong><em>imagemagick</em></strong> is next:
<code>
brew install imagemagick
</code>
That was easy...</p>

<p><strong><em>Redis</em></strong>
need redis as well.
<code>
brew install redis
</code>
There is a <a href="http://try.redis-db.com/">try redis</a> tutorial.
Alright, now let's get down to diaspora.</p>

<p>So I cloned the diaspora repo and then tried to cd into the folder
```</p>

<h1>♕ cd diaspora</h1>

<h1>= NOTICE                                                                           =</h1>

<p>= RVM has encountered a new or modified .rvmrc file in the current directory       =
= This is a shell script and therefore may contain any shell commands.             =
=                                                                                  =
= Examine the contents of this file carefully to be sure the contents are          =</p>

<h1>= safe before trusting it! ( Choose v[iew] below to view the contents )            =</h1>

<p>Do you wish to trust this .rvmrc file? (/Users/Ajonas/diaspora/.rvmrc)
y[es], n[o], v[iew], c[ancel]> y
ruby-1.9.3-p125 is not installed.
To install do: 'rvm install ruby-1.9.3-p125'
ruby-1.9.3-p125 is not installed.
Retrieving rubygems-1.8.17
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100  246k  100  246k    0     0   453k      0 --:--:-- --:--:-- --:--:-- 1401k
Extracting rubygems-1.8.17 ...
Removing old Rubygems files...
Installing rubygems-1.8.17 for ruby-1.9.3-p125 ...
Error running 'GEM_PATH="/Users/Ajonas/.rvm/gems/ruby-1.9.3-p194:/Users/Ajonas/.rvm/gems/ruby-1.9.3-p194@global:/Users/Ajonas/.rvm/gems/ruby-1.9.3-p194:/Users/Ajonas/.rvm/gems/ruby-1.9.3-p194@global" GEM_HOME="/Users/Ajonas/.rvm/gems/ruby-1.9.3-p194" "/Users/Ajonas/.rvm/rubies/ruby-1.9.3-p125/bin/ruby" "/Users/Ajonas/.rvm/src/rubygems-1.8.17/setup.rb"', please read /Users/Ajonas/.rvm/log/ruby-1.9.3-p125/rubygems.install.log
Installation of rubygems did not complete successfully.
<code>
OK well just follow the bouncing ball right?
</code>
[14:32:19] (master) diaspora
♕ rvm install ruby-1.9.3-p125
Already installed ruby-1.9.3-p125.
To reinstall use:</p>

<pre><code>rvm reinstall ruby-1.9.3-p125
</code></pre>

<p>```
Not good. I looked at the install log but it didn't provide much help. So after a google search I found <a href="https://github.com/rubygems/rubygems/issues/311">this</a>, which suggests it is the .gemrc file. So now I'm in over my head...</p>

<p>So Avi to the rescue. I reinstalled patch 125 with:
<code>
rvm reinstall ruby-1.9.3-p125
</code>
That sucks I was so hung up on this.</p>

<p>So I bundled again after removing the mysql gem from the gem file since I'm using postgreSQL.</p>

<p>It bundled properly but I can't get thin to boot...</p>

<p>P.S.
??Should I include a sym link?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/05/octopress/"/>
    <updated>2012-07-05T10:54:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/05/octopress</id>
    <content type="html"><![CDATA[<p>Follow directions here...</p>

<p>Setting Up Octopress</p>

<p><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<p>Had one hiccup in my system didn't have Ruby 1.9.2 which .rvmrc file requires (https://rvm.io//workflow/rvmrc/). I had to go ahead and install it.</p>

<p>Deploying on Heroku:</p>

<p>To see on localhost:4000
rake preview</p>

<p><strong>To push:</strong>
<code>
rake generate
git add .
git commit -m 'site updated'
git push heroku master
</code></p>

<p><a href="http://octopress.org/docs/deploying/heroku/">Octopress delpoy instructons</a></p>

<p>That all went fairly well... though I didn't understand all the intermediate steps. I'll have to take closer look.</p>

<p><a href="http://support.mashery.com/docs/customizing_your_portal/Markdown_Cheat_Sheet/">Markdown language cheat sheet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procs and lambdas]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/03/procs-and-lambdas/"/>
    <updated>2012-07-03T10:53:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/03/procs-and-lambdas</id>
    <content type="html"><![CDATA[<p>You know how everything in Ruby is an object, well, as it turns out that's not quite true. Ruby blocks are not objects! So, blocks are not objects, but you can turn them into objects without too much trouble. We do this by wrapping our block in an instance of the Proc class...
PROCS:</p>

<p>Very standard to pass along a code block to the each method</p>

<p>block_given? --> method to check whether a block was given to a method or not</p>

<p>A proc --> a nameless or anonymous block of code that can be represented as an object, can be passed around and called at will</p>

<p>``` ruby E.G.
class Array
def random_each(&amp;b)  # => with the ampersand, b essentially becomes a reference to the code block below.
  shuffle.each do |el|</p>

<pre><code>b.call el  #=&gt; b is a proc
end
</code></pre>

<p>  end
end</p>

<p>[1,2,3,4,5].random_each do |el|
puts |el|</p>

<p>end
```
You can only pass a single block to a method at one time, but you can pass multiple procs around because they are regular object like arrays or strings.</p>

<p>``` ruby E.G.
Def run_two_procs (a, b)
  a.call
  b.call
end</p>

<p>proc1 = Proc.new do
puts "This is proc1"
end</p>

<p>proc2 = Proc.new do
puts "This is proc2"
end</p>

<p>run_two_procs proc1, proc2
```
If you have a code block, you can call it with yield, you can use the ampersand argument to convert it into a proc,</p>

<p>**if you use Proc.new without giving it a code block to assign to that Proc, Proc.new will look to see if the current scope has been passed a code block and then it will use that --> it will do it all implicitly, you don't need to specify anything here. If it can't find a block (e..g if you commented the block below) it raises an error. Proc.new wants a block passed directly or it implicitly picks it up from the current scope/environment.</p>

<p>``` ruby
Def run_block
  p = Proc.new # **see above
  p.call
end</p>

<p>run_block do
puts "Hello World'</p>

<p>end
```</p>

<p>In Ruby 1.9 there are 4 main ways to run or call a block:
``` ruby Proc e.g.
my_proc = Proc.new do |a|
  puts "This is a proc and #{a} was passed along to me"
my_proc.call(10) #call method that passes in 10
my_proc.(20) #this isn't a typo, gets converted to a call
my_proc[30] #
my_proc === 40 # triple equal is called the case equality operator, it's primary function is used in case statements</p>

<p>several = Proc.new { |number| number > 3 &amp;&amp; number &lt; 8 }
none = Proc.new { |number| number == 0 }</p>

<p>case number
when several
  puts "several"
when none
  puts "none"
end
```
-->In this case the several proc is being run and if it returns true it runs the puts --> this abstracts everything away</p>

<p><strong><em>Lambdas</em></strong></p>

<p>Lambdas are much more sensitive than Procs to parameters. Much like methods, they need to receive the exact number of arguments as defined. Procs will just grab nil if nothing has been passed in.
Closures</p>

<p>In ruby a closure is like an anonymous code block, but that maintains references to local variables and were being used at the time of the definition of that code.
``` ruby
def run_proc(p)
  p.call
end</p>

<p>name = "Fred"</p>

<p>print_a_name = proc { puts name } # this name doesn't exist in the definition above. This magic is called a closure. (23 Min)</p>

<p>run_proc print_a_name
```</p>

<p>ALSO:
``` ruby
def run_proc(p)
  p.call
end</p>

<p>name = "Fred"
print_a_name = proc { puts name }
name = "John"</p>

<p>run_proc print_a_name # => now this will output John because it kept a reference to the local variable.
```
<a href="http://www.youtube.com/watch?v=VBC-G6hahWA">Video</a></p>

<p><a href="http://www.ruby-doc.org/core-1.9.3/Proc.html">DOCUMENTATION</a></p>

<p>SOME MORE READING:</p>

<p><a href="http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/">http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/</a></p>

<p><a href="http://pine.fm/LearnToProgram/?Chapter=10">http://pine.fm/LearnToProgram/?Chapter=10</a></p>

<p><a href="http://strugglingwithruby.blogspot.com/2009/02/ruby-proc.html">http://strugglingwithruby.blogspot.com/2009/02/ruby-proc.html</a></p>

<p><a href="http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html">http://pragdave.blogs.pragprog.com/pragdave/2008/09/fun-with-procs.html</a></p>
]]></content>
  </entry>
  
</feed>

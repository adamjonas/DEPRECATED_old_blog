<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-11T09:36:23-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[inject]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/07/inject/"/>
    <updated>2012-10-07T11:33:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/07/inject</id>
    <content type="html"><![CDATA[<p>Learning inject has been on my TODO list for a while...</p>

<p>I want to use inject anytime I am building an object a piece at a time. In the case of summing, creating a hash, or an array I'm building a result by applying changes based on the elements of the enumerable.</p>

<p>```ruby Examples
total_visits = stats.inject(0) {|sum, stat| sum = stat.visit_count}</p>

<h1>just for fun let's sum all the numbers from 1 to, oh, say a million</h1>

<p>sum = (1..1000000).inject(0){|cummulative,n| cummulative+n}
puts sum   =>500000500000</p>

<h1>you can do interesting things like build hashes</h1>

<p>primes = [1,3,5,7,11,13]
hash = primes.inject({}) { |s,e| s.merge( { e.to_s => e } ) }
p hash  #   =>  {"11"=>11, "7"=>7, "13"=>13, "1"=>1, "3"=>3, "5"=>5}
```</p>

<p>Reading:
<a href="http://blog.jayfields.com/2008/03/ruby-inject.html">The inject method</a>
<a href="http://www.fincher.org/tips/Languages/Ruby/">Code e.g. - #21e</a>
<a href="http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/">Charles Max Wood Video</a>
<a href="http://blog.teamtreehouse.com/ruby-arrays">Treehouse explains the inject method</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assignments]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/06/assignment1/"/>
    <updated>2012-10-06T14:54:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/06/assignment1</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3856174">Assignment 1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FizzBuzz]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/06/fizzbuzz/"/>
    <updated>2012-10-06T14:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/06/fizzbuzz</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3856188">Gist</a></p>

<p>Some background of FizzBuzz</p>

<ul>
<li><a href="http://www.codinghorror.com/blog/2007/02/fizzbuzz-the-programmers-stairway-to-heaven.html">If you can't do FizzBuzz you aren't a programmer</a></li>
<li><a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html">The majority of comp sci grads can't do fizzbuzz</a></li>
<li><a href="http://dave.fayr.am/posts/2012-10-4-finding-fizzbuzz.html">proper implementations of fizzbuzz</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISday3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/05/fisday3/"/>
    <updated>2012-10-05T16:48:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/05/fisday3</id>
    <content type="html"><![CDATA[<p>Programs are:</p>

<p><em>idealized components</em>... not bound by degradation of use.</p>

<p><em>infinite complexity</em>... because nothing is stopping us from building it.</p>

<p><em>Method signature</em> is the first line of the method (e.g. def method_name(*arg))</p>

<p><em>Parameters</em> are the adverbs. Parameters allow us to make a method dynamic.</p>

<p>To the computer, there is no difference between a local variable and a method.</p>

<p>'==' => value equality
'===' => object equality</p>

<p>A computationally efficient language will compile down faster than</p>

<p><em>lazy evaluation</em>- the program will stop as soon as an if or elsif is satisfied. It won't execute any more statements.</p>

<p><a href="http://www.bartleby.com/103/6.html">Ode</a> by Arthur O'Shaughnessy</p>

<p>sqlite 3.4.12 is the first version to support multi-line inserts.</p>

<p>?? Are there languages with more syntactic sugar than ruby?
?? is it really not possible to write a program in SQL
Does <a href="http://www.simple-talk.com/blogs/2005/12/30/a-sql-game/">this</a> qualify as a program?
<a href="http://www.red-gate.com/downloads/CreateTheMazeGame.txt">SQL code:</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Standard Library]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/18/ruby-standard-library/"/>
    <updated>2012-09-18T13:59:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/18/ruby-standard-library</id>
    <content type="html"><![CDATA[<h3><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/fileutils/rdoc/FileUtils.html">FileUtils</a></h3>

<p>The functions mostly involved changing dir, moving, removing, and copying files.</p>

<p>Going to give us different options for working with dir entries and files in the file system.</p>

<p>easy to work with in IRB</p>

<h3>Methods</h3>

<p>.cmp will tell you if two files have the same content
.touch creates a file if it doesn't exist
.cp copy contents to another file</p>

<h3><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">Logger:</a></h3>

<h3>URIs</h3>

<p>URI stands for "Uniform Resource Identifier." The URI module can be used to parse and manipulate URIs in your Ruby programs.</p>

<p>```</p>

<blockquote><p>require 'uri'
 => true
require 'open-uri'
 => true
url = URI.parse('http://teamtreehouse.com/')
 => #&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/>
puts url.inspect</p>

<h1>&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/></h1>

<p> => nil
puts url.hostanme
NoMethodError: undefined method `hostanme' for #&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/></p>

<pre><code>from (irb):10
from /Users/Ajonas/.rvm/rubies/ruby-1.9.3-p194/bin/irb:16:in `&lt;main&gt;'
</code></pre>

<p>puts url.hostname
teamtreehouse.com
 => nil
puts url.path
/
 => nil
puts URI.split('http://teamtreehouse.com').inspect
["http", nil, "teamtreehouse.com", nil, nil, "", nil, nil, nil]
 => nil
google = open('http://google.com').read
=> this outputs the html of the google homepage...
```</p></blockquote>

<h3>Benchmark Module</h3>

<p>Provides methods to report the time used that the program takes to execute...</p>

<p>```ruby Benchmarking symbols vs strings
require 'benchmark'</p>

<p>repetitions = 1000000</p>

<p>Benchmark.bm(7) do |x|</p>

<pre><code>x.report "String" do
    repetitions.times do
        options = { 'hello' =&gt; 'world' }
    end
end

x.report 'Symbol' do
    repetitions.times do
        options = { hello: :world }
    end
end
</code></pre>

<p>end
```</p>

<h3>OptParse Library</h3>

<p>```ruby
require 'ostruct'
require 'optparse'
require 'open-uri'</p>

<p>class MyParser</p>

<pre><code>def self.parse(args)
    options = OpenStruct.new
    opts = OptionParser.new do |opts|
        opts.banner = "Usage: url"

        opts.on('-u', '--url URL', 'Fetches the given url') do |url|
            options.url = url
        end
    end

    begin
        opts.parse!(args)
    rescue Exception =&gt; e
        puts "Exceptions encountered: #{e}"
        puts opts
        exit 1
    end

    options
end
</code></pre>

<p>end</p>

<p>options = MyParser.parse(ARGV)</p>

<p>if options.url</p>

<pre><code>puts open(options.url).read
</code></pre>

<p>end
```</p>

<h3>Observable Library</h3>

<p>The Observable module allows you to easily implement the observer pattern in your classes. The observer pattern specifies that an object maintains a list of its dependents, called observers, and notifies them automatically of any state changes.</p>

<p>You could put this behavior in the classes themselves, but by putting them in an observer class it keeps the classes clean.</p>
]]></content>
  </entry>
  
</feed>

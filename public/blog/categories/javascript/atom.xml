<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2013-02-15T08:38:51-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Doug Crockfords Javascript Lectures]]></title>
    <link href="http://www.adamjonas.com/blog/doug-crockfords-javascript-lectures/"/>
    <updated>2013-02-02T19:38:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/doug-crockfords-javascript-lectures</id>
    <content type="html"><![CDATA[<p>Thomas Edison was the first person to reference a bug. Grace Hopper actually found a moth in her machine.</p>

<p>The prototype model is poorly named but you can build enormously complext object-oriented systems. You don't need classes.</p>

<p>Javascript inherited aspects of java, scheme, and self. The bad parts of js were mostly a function of being built in haste-- it was created by netscape in 10 days.</p>

<ul>
<li>Object have prototype properties:

<ul>
<li><code>Object.getPrototype(object)</code> copies the object, something they did have befor</li>
<li><p><code>Object.create(object, properties)</code> -> creates a new object</p></li>
<li><p>Crockford doesn't use Object.new rather he thinks prototypally, so he uses <code>Object.create</code></p></li>
<li><code>Object.create(null)</code> can take null as a parameter so you get a pristine object</li>
<li>the enumerator is exposed so you can set it as true or false.</li>
<li>keys must be strings</li>
<li><p>can find if an object is extensible and you can set it to not extensible with <code>Object.preventExtensible</code>, <code>Object.seal</code> and <code>Object.freeze</code> -> immuatble objects</p></li>
<li><p>There is only one number type in JS. Memory is no longer a problem. So why create smaller types of numbers? In JS they didn't. Prevents a whole class of errors.</p></li>
<li>Associateive law does not hold. (41 min)

<ul>
<li>decimal fractions are approximate ->  So if A, B, and C are 0.1 + 0.2. + 0.3, they do not associate. This is a real problem because the world works on the decimal system. Especially money.

<ul>
<li>to solve, turn them into integers. e.g. with money, work in cents.</li>
</ul>
</li>
</ul>
</li>
<li>All numbers inherit from the <code>number.prototype</code>.</li>
<li>numbers are first class objects-> a number can be stored as a var, can be passed in a param, can be returned as a function, can be stored as an object (java cannot do this)</li>
<li>Math function should be part of number, but they aren't</li>
<li><p>Nan, not a number, but it is a number. You don't get back an exception with bad math, you get a bad value.</p>

<ul>
<li>NaN is not equal to NaN, but NaN === NaN is true. This is appaling.</li>
</ul>
</li>
<li><p>Boolean</p></li>
<li><p><strong>Strings</strong> -> no one knows why they are called strings.</p>

<ul>
<li>JavaScript tolerates the surrogate characters but has no knowledge of them, so if you have a string containing one surrogate character, JavaScript thinks it is a string with two characters in it. The counts will be wrong and you've got to be really careful when you do your substring operations because you don√≠t want to split those things.</li>
<li>strings are frozen.</li>
<li>similar strings are equal (===)</li>
<li>no type char, an individual character is just a short string</li>
<li>string literals can use single or double quotes with \ escapements</li>
<li>can convert a number to string with <code>str = num.toString();</code> or <code>str = String(num);</code> except the first will throw an exception for null or undefined</li>
<li>convert a string to num with <code>num = Number(str)</code> or <code>num = +str</code></li>
<li>parseInt(str, 10), converts the value into a number. It stops at the first non-digit character.

<ul>
<li><code>parseInt("12em") === 12</code></li>
<li>The radix(10) should always be used

<ul>
<li><code>parseInt("08") === 0</code></li>
<li><code>parseInt("08", 10) === 8</code></li>
</ul>
</li>
<li>(56 min) string</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript hoisting]]></title>
    <link href="http://www.adamjonas.com/blog/javascript-hoisting/"/>
    <updated>2012-12-19T12:34:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/javascript-hoisting</id>
    <content type="html"><![CDATA[<h3><a href="http://net.tutsplus.com/tutorials/javascript-ajax/quick-tip-javascript-hoisting-explained/">Hoisting Explained Video</a></h3>

<ul>
<li><p>Some variables and functions get hoisted to the top of the scope. Just the declaration, not the inialization.</p>

<ul>
<li>Recommend to put all your variable declarations at the top of the function.</li>
</ul>
</li>
<li><p>Functions are hoisted to the top too, but not function expressions.</p></li>
</ul>


<h3>Further reading</h3>

<ul>
<li><a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting">JS Scopting and Hoisting</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day27]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day27/"/>
    <updated>2012-11-13T09:21:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day27</id>
    <content type="html"><![CDATA[<h3>POTD Jesse James Garrett</h3>

<ul>
<li>Author of <a href="http://www.jjg.net/elements/">elements of user experience</a>

<ul>
<li>elements of style</li>
</ul>
</li>
<li><a href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications">Ajax essay</a>

<ul>
<li>asynchronous model</li>
</ul>
</li>
</ul>


<h3>Gitbo</h3>

<ul>
<li><a href="https://github.com/tute/merit">merit</a>/<a href="http://railscasts.com/episodes/364-active-record-reputation-system">reputation</a></li>
<li><a href="https://github.com/javan/whenever">whenever</a></li>
</ul>


<h2>JS With Justin Moses</h2>

<ul>
<li><p>learn some Haskell, lisp -> functional programming</p></li>
<li><p>JS fiddle</p></li>
<li><p><a href="http://jsbin.com/welcome/1/edit">JS Bin</a></p></li>
<li><p>span is an inline div</p></li>
<li><p>when a document is loaded in the browser. it first calls a method on itself called ready.</p>

<ul>
<li>program events onto these objects</li>
<li>find objects within the document and add more events to them</li>
<li>if you try to load it linearly, then you need to wait until the document has full compiled.</li>
</ul>
</li>
<li>think about buttons as button objects and you can bind methods and other objects to that button object</li>
<li>src="http://www.adamjonas.com//code.jquery.com/"

<h2>- put the script tags in the head is good form</h2></li>
</ul>


<p>```</p>

<script>
    function runthis() {
    alert(this);
  }
</script>


<p>```
$ -> jquery shortcut</p>

<p>When the DOM is loaded get going....
```javascript
$(function)(){</p>

<p>}
```</p>

<p>```javascript
$(function)(){
  //alert(this);</p>

<p>  alert($('.btn').html("test123"));
  //matching functions and matching it to all buttons</p>

<p>});
```
document.querySelectorAll('.button') -> is the javascript equivalent to $('.button')</p>

<p>```javascript
$(function)(){</p>

<p>  $('.btn').click(function() {</p>

<pre><code>$('body').append('&lt;button class="btn"&gt;my button&lt;/button&gt;');
</code></pre>

<p>  });
});
```</p>

<p>```javascript
$(function)(){</p>

<p>  $('body').on('click', function()
  {</p>

<pre><code>  $('body').append('&lt;button class="btn"&gt;my button&lt;/button&gt;');
</code></pre>

<p>  });
});
```</p>

<ul>
<li><a href="http://api.jquery.com/on/">.on() event</a></li>
<li>every move, every click these are all reported events

<ul>
<li>event bubbling -> fire event with that div, in the body, in the window

<ul>
<li>target -> event clicked on</li>
<li>event delegation in js -> allows you quickly bind events that don't exist yet</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>AJAX</h3>

<p><code>XMLHttpRequest == $.ajax</code></p>

<p>```javascript AJAX
$(function() {
  var promise = $.ajax({</p>

<pre><code>url:"http://jsbin.com/iyijag.js"
</code></pre>

<p>  }).
  promise.done(function(data){
  //show user data
  alert(data); //alert box with json data
  }).
  promise.fail(function(err){
  // on fail
  }).
  promise.always(function(data){
  //always called
  });
});</p>

<p>```
AJAX by default is get, but
jquery deferred -> chaining things together without certainty of the event</p>

<h3>Questions</h3>

<ul>
<li>debugging in your app. single click on line with chrome will drop in a debugger object.

<ul>
<li>can then see the object in console</li>
</ul>
</li>
<li>if you use it once -> you don't need to name the function, if you want to reuse, you probably want to</li>
</ul>


<h3>Other stuff</h3>

<ul>
<li><a href="http://colorblendy.com/">colorblendy</a></li>
<li><a href="http://mouapp.com/">markdown editor</a></li>
<li><a href="http://www.khanacademy.org/cs">khan academy</a></li>
<li>node inspector for server side</li>
<li><a href="https://npmjs.org">NPM for node</a>- is like ruby gems - server side modules</li>
<li>HTML5 and websockets and threads</li>
</ul>


<h2>Avi Rant</h2>

<ul>
<li>rails works nicely with ember</li>
<li>javascript provides you</li>
</ul>


<h3>Avi Javascript Lecture</h3>

<ul>
<li>if you want to do anything to an object, you need to first grab it from the DOM</li>
<li>document.baseURI</li>
<li>document - returns the whole window</li>
<li>{} in javascript is an object</li>
</ul>


<p>```javascript Building an Object in Javascript
o = {}
//instantiating an object
o.first_name = "avi"
o.last_name = "flom"
o.full_name = function(){this.first_name + " " + this.last_name}
//like self.first_name + " " + self.last_name in ruby</p>

<p>//can see what this is in the log
o.full_name = function(){console.log(this)};</p>

<p>//could do this, but it isn't object oriented
function full_name(object){
  return object.first_name + object.last_name
}
<code>
`$ sign == jQuery`
</code>javascript
document.onready = function(){
  $("form a")
}</p>

<p>document.onready();</p>

<p>//This means that when the document is loaded, fire this.
$(function(){
  $("form a").click(function(x){</p>

<pre><code>alert(x.clientX + "," x.clientY")
return false; //stop the normal event -&gt; like following a link
//this would work like x.preventDeafult();
</code></pre>

<p>  })
});</p>

<p>//x is the event in this case
//$("form a") is almost like a yield from a block, that you will be able to access
<code>
</code>javascript
$(this) // a full blown object that knows about its parent
this // is just a return of DOM. This doesn't have much info</p>

<p>//.attr("href") is like accessing an attribute or key of the object
window.location = $(this).attr("href") +"?source=flatironschool"
```</p>

<ul>
<li>You are hooking into events. You are dependent on the browser and when events are loaded. It's not about linear execution. It's about the browser API.</li>
<li>applying a bind to an element will always happen in a ready box</li>
<li>current target, the thing that was actually clicked</li>
<li>handleObj - the actual event, event type -> both might be a click event</li>
</ul>


<p>```javascript
$(function)(){
  $("form a").click(function(e){</p>

<p>  e.preventDefault;</p>

<p>  //select the object</p>

<p>  //$select = $('#mixtape_mixtape_songs_attributes_0_song');
  $select = $('form select:last'); //grab the last element with a pseudo selector
  //duplicate code
  $new_select = $select.clone();</p>

<p>  console.log($new_select);</p>

<p>  //edit's name
  $next_name = $select.attr("name")
  console.log($next_name)</p>

<p>  next_int = parseInt(next_name.
  replace("mixtape[mixtape_songs_attribute][", "").
  replace("]song_id"))+1;</p>

<p>  new_select.attr("name", next_name)
  //insert it back into the DOM</p>

<p>  $("div.actions")
  return false;
  })
});</p>

<p>//can have a document object that hasn't been inserted into the view yet
```</p>

<p>```javascript
$("a").click(function(){alert("test")});</p>

<p>//equal to
t = function(){alert("test")}; -> this loaded into memory and run when ready.
// t = alert("test") -> this is literal and will be called immediately.
$("a").click(t);
```</p>

<h3>Methods</h3>

<ul>
<li>key press event</li>
<li>blur(), change(), click()</li>
<li>handler() -> the function you want to run when this change occurs</li>
<li>hover is the combo of focus and blur</li>
<li>every keypress comes with two events key down and key up</li>
<li>live -> attaching the event to the body</li>
</ul>


<p>```javascript MouseMove
$(function)(){
  $("form").mousemove(function(e){</p>

<pre><code>console.log(e)
</code></pre>

<p>})
```</p>

<ul>
<li>spyjax</li>
</ul>


<h3>Odemeter</h3>

<p><a href="http://uvumitools.com/odometer.html">http://uvumitools.com/odometer.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery]]></title>
    <link href="http://www.adamjonas.com/blog/jquery/"/>
    <updated>2012-08-07T11:35:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/jquery</id>
    <content type="html"><![CDATA[<h3>The DOM:</h3>

<p>the web browser remembers the HTML tags, their attributes, and the order in which they appear in the file‚Äîthis representation of the page is called the Document Object Model, or DOM for short. (js and jquery the missing manual, p127)</p>

<p><a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">Repel</a> -
read, evaluate, print, loop</p>

<p>everything with remote true should have their submit button hijacked and exectured with ajax
jquery is to rails what ruby is js</p>

<p><code>html src
&lt;source src="URL"&gt;
</code></p>

<p><code>javascript [XHR](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest?redirectlocale=en-US&amp;redirectslug=XMLHttpRequest)
//To create an instance of XMLHttpRequest, simply do this:
var req = new XMLHttpRequest();
</code>
xhr- used to be just xml</p>

<p>READ: <a href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications">ajax jesse james garrett</a>
AJAX = Asynchronous JavaScript + XML
Ajax incorporates:
- standards-based presentation using XHTML and CSS;
- dynamic display and interaction using the Document Object Model;
- data interchange and manipulation using XML and XSLT;
- asynchronous data retrieval using XMLHttpRequest;
- and JavaScript binding everything together.</p>

<p>adaptive path
elements of user experience</p>

<p>js is all an event model</p>

<p>predictable DOM</p>

<p><a href="http://css-tricks.com/the-difference-between-id-and-class/">###Difference between li/#b and li.b?###</a></p>

<p>/# => ids --> IDs are unique
- Each element can have only one ID
- Each page can have only one element with that ID</p>

<p>dot b => class names --> are NOT unique
- You can use the same class on multiple elements.
- You can use multiple classes on the same element.</p>

<h3>Crazy Selector for our app</h3>

<p>```javascript
$("tr#error_&lt;%error.id %> input:submit[value='Noise']").click(function(){</p>

<pre><code>confirm("Are you sure?");
</code></pre>

<p>})
// input:submit[value='Noise']" are you kidding me?
```</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2012-11-19T09:11:40-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day22]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day22/"/>
    <updated>2012-11-07T10:10:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day22</id>
    <content type="html"><![CDATA[<h3>HTTParty</h3>

<ul>
<li><a href="https://github.com/jnunemaker/httparty">On github</a></li>
<li><a href="http://blog.teamtreehouse.com/its-time-to-httparty">Treehouse blog post</a></li>
</ul>


<h3>Rant</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Conway%27s_law">Conway's law</a>

<ul>
<li>organizational communication will be reflected in the product</li>
</ul>
</li>
</ul>


<p>seagull architect -</p>

<blockquote><p>comes in, shits all over your code and then leaves</p></blockquote>

<p><a href="https://speakerdeck.com/sarahmei/the-insufficiency-of-good-design">Insufficiency of good design</a></p>

<p>Open source: def up and down in migration.rb in rails can be refactored</p>

<h3>POTD</h3>

<p><a href="http://en.wikipedia.org/wiki/Joseph_Weizenbaum">Joseph Weizenbaum</a></p>

<h2>Rails Lecture</h2>

<p>```ruby Controller Test Continued from Day21...
require 'spec_helper'</p>

<p>describe SongsController do
  describe 'POST /songs' do</p>

<pre><code>it 'should create a song with a name' do
  post :create, {:song =&gt; {:name =&gt; "Thriller"}}

  assigns(:song).name.should == "Thriller"
end

it 'should create a song with an artist name' do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :artist_name =&gt; "Michael Jackson"}}

  assigns(:song).artist_name.should == "Michael Jackson"
end

it "should create a song with a genre string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; "Pop"}}

  assigns(:song).genre_names.should include("Pop")
end


it "should create a song with a genres from a CSV string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; "Pop, Techno"}}

  assigns(:song).genre_names.should include("Pop")
end

it "should create a song with a genre array containing CSV string" do
  post :create, {:song =&gt; {:name =&gt; "Thriller", :genre_names =&gt; ["Pop, Techno", "Rap"]}}

  assigns(:song).genre_names.should include("Pop")
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby song_spec.rb Unit Test
require 'spec_helper'</p>

<p>describe Song do
  let(:song){Song.new(:name => "Thriller")}</p>

<p>  context 'with genres' do</p>

<pre><code>let(:genre){Genre.create(:name =&gt; "Pop")}

context '.genre_names' do
  it "should return an array of genre names" do
    song.genres &lt;&lt; genre
    song.save


    song.genre_names.should be_an_instance_of(Array)
    song.genre_names.should include("Pop")
  end

  it "should accept a genre name and add that genre" do
    song.genre_names = "Techno"
    song.save

    song.genre_names.should include("Techno")
  end

  it "should accept a comma delimited list of genre names" do
    song.genre_names = "Techno, Pop"
    song.save

    song.genre_names.should include("Techno", "Pop")
  end

  it "should accept an array containing comma delimited list of genre names" do
    song.genre_names = ["Techno, Pop", "Rap"]
    song.save

    song.genre_names.should include("Techno", "Pop", "Rap")
  end

  it "should only add unique genres" do
    song.genre_names = ["Pop", "Pop"]
    song.save

    song.genre_names.count.should == 1
  end

end
</code></pre>

<p>```
rake spec:models</p>

<p><code>ruby gem file
group [:development, :test] do
  gem 'debugger'
end
</code></p>

<ul>
<li>detect returns nil if there is not match</li>
<li>select returns an empty array when no match</li>
</ul>


<p><a href="http://guides.rubyonrails.org/active_support_core_extensions.html#array-conversions"><strong>to_sentence method in rails</strong></a></p>

<h3>HTML &lt; form_tag lower &lt; form_for</h3>

<p><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag">form_tag</a></p>

<p>```
<form action="/songs" id="new_song" class="new_song"> <form></p>

<p>&lt;%= form_tag(songs_path, :id => "new song") do %>
  &lt;%= text_field_tag "song[name]", @song.name, :id => "song_name"] %>
  &lt;%= text_field_tag "song[artist_name]", @song.artist_name, :id => "song_artist_name"] %>
  &lt;%= submit_tag "Create Song", :id => "create_song" %>
&lt;% end %></p>

<p>&lt;%= form_for(@song) do |f| %>
  &lt;%= f.text_field :name %>
  &lt;%= f.text_field :artist_name %>
  &lt;%= f.submit %>
&lt;% end %>
```
<a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag">text_field_tag docs</a></p>

<h3>Integration test / Acceptance Test</h3>

<ul>
<li><p><a href="http://railscasts.com/episodes/187-testing-exceptions">Railscast 187</a></p></li>
<li><p><a href="http://railscasts.com/episodes/257-request-specs-and-capybara">Railscast 257</a></p></li>
<li><a href="https://github.com/copiousfreetime/launchy">launchy gem</a> to see that page that capybara filled out - useful for creating fixtures</li>
<li><p>post_via_redirect</p>

<ul>
<li>get => response</li>
<li>visit => page</li>
</ul>
</li>
</ul>


<h3>Continuous Integration / Testing</h3>

<ul>
<li>autotest</li>
<li>guard

<ul>
<li><a href="https://github.com/guard/guard">gem guard-rspec</a></li>
</ul>
</li>
<li>rb-fsevent -> rb-FileSaveEvent -> gem that pings guard (or anything else) when a file is saved</li>
<li>growl extension or terminal notifier on the <a href="https://github.com/guard/guard#terminal-notifier">guard gem page</a></li>
<li><a href="https://github.com/jnicklas/capybara">capybara</a></li>
</ul>


<p><strong>receiver.try(:method) -> if the receiver is nil then try will not call the method, otherwise it will</strong></p>

<h3>Pull down the other app</h3>

<p>git merge upstream/master</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day21]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day21/"/>
    <updated>2012-11-06T13:57:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day21</id>
    <content type="html"><![CDATA[<p><strong><em>Generate a model that is singular-- ALWAYS</em></strong></p>

<p>'self' means the receiver of this method call</p>

<p><a href="http://blog.aviflombaum.com/blog/2012/07/dont-use-accepts-nested-attributes-for-with-belongs-to/"><strong>never ever have a nested attributes for belongs_to ONLY has has_many</strong>
</a></p>

<p>```ruby song.rb Model
Class Song</p>

<p>  def add_genre(genre)</p>

<pre><code>genre = Genre.find_or_create_by_name(genre) if genre.is_a?(String) 
self.song_genres.create(:genre =&gt; genre).genre
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>```ruby song_spec.rb Unit Test
require 'spec_helper'</p>

<p>describe Song do
  context '.add_genre' do</p>

<pre><code>before(:each) do
  let(:song){Song.create(:name =&gt; "Thriller")} 
  let(:genre){Genre.create(:name =&gt; "Pop")} #this creates the genre method that executes the block that follows it.

  it "should add the genre" do
    song.add_genre(genre)

    song.genres.should include(genre)
  end

  it "should return the newly added genre" do
    song.add_genre(genre) should == genre #this means it won't return a full array like a push method return
  end

  it 'should accept an existing genre name do'
    genre = Genre.create(:name =&gt; "Techno")
    song.add_genre("Techno").should == genre
  end

  it 'should accept a genre name' do
    song.add_genre("Pop").should == genre
  end

  it "should add only unique genres" do
    #if I add the same genre twice, it should still 
    song.add_genre(genre)
    song.add_genre(genre)

    song.genres.count.should == 1
  end
</code></pre>

<p>  end
end
```
Rspec runs its tests in isolation, by running each test in a transaction. After each test, it rollbacks all the writes.</p>

<p>LOGS:
<code>
tail -f #open the end of the file and keep it open.
</code></p>

<p>If you are building associated data outside of your model, then you haven't encapsulated enough.</p>

<ul>
<li>Tests Hierarchy in ascending levels of abstraction

<ul>
<li>unit tests</li>
<li>controller tests</li>
<li>integration tests</li>
</ul>
</li>
</ul>


<p>```ruby Controller Test
require 'spec_helper'</p>

<p>describe SongsController do
  describe 'POST /songs' do</p>

<pre><code>it 'should create a song with a name do'
  post :create, {:song =&gt; {:name =&gt; "Thriller"}}
  #create action in the song controller with post or request parameters that you 
  #want to send along with it

 # Song.find_by_name("Thriller").should be_true
 assigns(:song).name.should == "Thriller"
end

it 'should create a song with an artist name'
  post :create, {:song =&gt; {:name =&gt; "Thriller", :artist_name =&gt; "Michael Jackson"}}}
  #this makes artist_name a first class citizen in the params hash.

  #we killed this because we are assigning a string, not an artist object--&gt; post :create, {:song =&gt; {:name =&gt; "Thriller", :artist =&gt; {:name =&gt; "Michael Jackson"}}} 

  #create action in the song controller with post or request parameters that you 
  #want to send along with it

  #Song.find_by_name("Thriller").should be_true
  assigns(:song).artist.name.should == "Michael Jackson"
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby song_spec.rb
context '.artist_name' do
  it "should have an artist_name method" do</p>

<pre><code>song.should respond_to(:artist_name)
</code></pre>

<p>  end</p>

<p>  it 'should return a songs artist' do</p>

<pre><code>song.artist = Artist.create(:name =&gt; "Michael Jackson")
song.artst_name.should == "Michael Jackson"
</code></pre>

<p>  end
end</p>

<p>  context '.artist_name=' do</p>

<pre><code>it "should assign the artist via the name" do
  song.artist_name = "Michael Jackson"
  song.artist.should be_a(Artist)
  song.artist_name.should == "Michael Jackson"
end
</code></pre>

<p>  end
```</p>

<p>```ruby Song.rb Model
  def artist_name</p>

<pre><code>self.artist.name if self.artist
</code></pre>

<p>  end</p>

<p>  def artist_name=(string)</p>

<pre><code>self.artist = Artist.find_or_create_by_name(string)
</code></pre>

<p>  end
```</p>

<h3>SOLID</h3>

<p>Procedural code- solutions for very specific problems</p>

<p>dependencies will kill your code, but design will save it</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driven Development]]></title>
    <link href="http://www.adamjonas.com/blog/test-driven-development/"/>
    <updated>2012-10-24T13:26:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/test-driven-development</id>
    <content type="html"><![CDATA[<p>??browser testing? this falls under acceptance tests?</p>

<p><em>Difference between mock, stub, and fixture?</em> They are all a mechanisms to decouple data from the database. If your DB is down, you couldn't run your test suite.</p>

<p><em>Fixtures and factories</em> sort of relate to each other so that you don't have to instantiate a bunch of objects. <em>Fixtures-</em> are stable data to be used in the test environment. Fixtures are written in YAML.</p>

<p><em>mocks and stubs</em>: connect to the FB api, but you don't need to, so you create something that responses with canned data like it is the facebook api.
<a href="http://martinfowler.com/articles/mocksArentStubs.html">See mocks aren't stubs by Martin Fowler</a></p>

<p>why does a spec folder hold the tests? This outlines the specifications?
  - A specification is an explicit set of requirements to be satisfied by a material, product, or service.</p>

<p>??ping ponging - if someone writes a test and the other passes it are you switching off every 5 minutes</p>

<p><a href="http://railscasts.com/episodes/275-how-i-test">"How I test" with Ryan Bates</a></p>

<p>only open the browser when you need to focus on UI. Otherwise use tests.</p>

<ul>
<li><a href="https://github.com/jnicklas/capybara">capybara</a> to simulate the user
factory-girl instead of fixtures -> where you store your factories</li>
<li><p>guard</p></li>
<li><p>integeration_test</p></li>
</ul>


<p>```ruby Capybara DSL Methods
visit login_path</p>

<pre><code>click_link "password"
fill_in "Email", :with =&gt; user.email
click_button "Reset Password"
</code></pre>

<p>```</p>

<p><a href="http://www.skorks.com/2010/01/thoughts-on-tdd-a-case-study-with-ruby-and-rspec/">Good article on the process of testing</a></p>

<h2>Steven Nunez</h2>

<p>@_StevenNunez
conway's game of life</p>

<p>Testing is: the act of isolating parts of your code with a known state to ensure it works as expected</p>

<p>Acceptance testing, integration and tests: cucumber, capybara, webrat</p>

<p>unit tests - take a class, take tests and make objects</p>

<h3>Why test?</h3>

<ul>
<li>want to know when things break</li>
<li>allows for courageous refactoring</li>
<li>gives documentation on how your code is SUPPOSED to work. Learn to expect tests.</li>
<li>It is your duty to deliver working code. Verification.</li>
</ul>


<h3>Testing sounds like an extra step...</h3>

<ul>
<li>Forces you to think small</li>
<li>Less thoughts to juggle</li>
<li>Leads to modular code</li>
<li>write less code</li>
<li>increase documentation: see what the intention was</li>
<li>small victories: always chasing green</li>
</ul>


<h3>RSpec</h3>

<ul>
<li>RSpec provides something called subject

<ul>
<li>subject = Class.new</li>
</ul>
</li>
</ul>


<h3>Write the code you wish you had</h3>

<ul>
<li>test with none, test with 1, test with some</li>
<li>can write a pending test by just writing it blocks</li>
</ul>


<p>BDD is more route => controller => model
TDD is more model => controller => route</p>

<p>practical object oriented design by <a href="http://www.poodr.info">sandi metz</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec]]></title>
    <link href="http://www.adamjonas.com/blog/rspec/"/>
    <updated>2012-09-24T13:21:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/rspec</id>
    <content type="html"><![CDATA[<p>```ruby
it "has no brains" do</p>

<pre><code>zombie = Zombie.new
#modifier is should
#matcher is the less than sign
zombie.brains.should &lt; 1
</code></pre>

<p>end
```</p>

<p><code>ruby Matchers and Modifiers
zombie.name.should == 'Ash'
zombie.alive.should == false
zombie.rotting.should == true
zombie.height.should &gt; 5
zombie.height.should &gt;= 5
zombie.height.should &lt; 5
zombie.height.should_not == 5
</code></p>

<p>```ruby Predicate 'be'
describe Tweet do
  it 'without a leading @ symbol should be public' do</p>

<pre><code>tweet = Tweet.new(status: 'Nom nom nom')
tweet.status.should be_true
#this is equivalent to tweet.status.should == true
#the predicate is a better way though
</code></pre>

<p>  end
end
```</p>

<p>```ruby Mark as Pending
it "is named Ash"
end</p>

<h1>to mark it as pending</h1>

<p>xit "is named Ash" do
end</p>

<h1>OR</h1>

<p>it "is named Ash" do</p>

<pre><code>pending
</code></pre>

<p>end
```</p>

<p>```ruby Should be
describe Tweet do
  it 'truncates the status to 140 characters' do</p>

<pre><code>tweet = Tweet.new(status: 'Nom nom nom' * 100)
# notice the space between the 'should' and 'be'
tweet.status.length.should be &lt;= 140
</code></pre>

<p>  end
end
```</p>

<p>Installing RSpec
```
gem install rspec
rspec --init</p>

<h1>in rails</h1>

<p>rails generate rspec:install
```</p>

<p>```ruby Matchers: include
describe Zombie do
  it 'includes a tweet' do</p>

<pre><code>tweet = Tweet.new
zombie = Zombie.new(tweets: [tweet])
zombie.tweets.should include(tweet)
</code></pre>

<p>  end
end
```</p>

<p>```ruby Matchers: have</p>

<h1>this</h1>

<p>zombie.weapons.count.should == 2</p>

<h1>is better written as</h1>

<p>zombie.should have(2).weapons</p>

<p>describe Zombie do
  it 'increases the number of tweets' do</p>

<pre><code>zombie = Zombie.new(name: 'Ash')
zombie.tweets.new(message: "Arrrgggggggghhhhh")
zombie.should have(1).tweets
</code></pre>

<p>  end
end</p>

<h1>can also have</h1>

<p>have(n)
have_at_least(n)
have_at_most(n)
```</p>

<p>```ruby Expect Block and Change Methods
describe Zombie do
  it 'gains 3 IQ points by eating brains' do</p>

<pre><code>zombie = Zombie.new
expect { zombie.eat_brains }.to change { zombie.iq }.by(3)
</code></pre>

<p>  end
end</p>

<h1>can also use</h1>

<p>.by(n)
.from(n)
.to(n)</p>

<h1>and they can be chained</h1>

<p>.from(1).to(5)
```</p>

<p>```ruby Raise_error
describe Zombie do
  it 'raises a Zombie::NotSmartEnoughError if not able to make a decision' do</p>

<pre><code>zombie = Zombie.new
expect { zombie.make_decision! }.to raise_error(
  StandardError
  )
</code></pre>

<p>  end
end</p>

<h1>these modifiers also work</h1>

<p>to
not_to
to_not
```</p>

<p><code>ruby More Matchers
@zombie.should respond_to(hungry?)
@zombie.should be_within(0.1).of(33.3)
@zombie.should exist
@zombie.should satisfy { |zombie| zombie.hungry? }
@hungry_zombie.should be_kind_of(Zombie) #Inheritance: HungryZombie &lt; Zombie
@status.should be_an_instance_of(String)
</code></p>

<p>```ruby Subject</p>

<h1>this</h1>

<p>describe Zombie do
  it 'should not be a genius' do</p>

<pre><code>zombie = Zombie.new
zombie.should_not be_genius
</code></pre>

<p>  end
end</p>

<h1>can be simplified to</h1>

<p>describe Zombie do
  it 'should not be a genius' do</p>

<pre><code>subject.should_not be_genius
</code></pre>

<p>  end
end</p>

<h1>this can be further simplified to</h1>

<p>describe Zombie do
  it 'should not be a genius' do</p>

<pre><code>#implicit subject
should_not be_genius
</code></pre>

<p>  end
end
```
This is only going to work if using a describe block with a class in it...</p>

<p>```ruby it
describe Zombie do</p>

<pre><code>it { subject.name.should == 'Ash' }
</code></pre>

<p>end
```</p>

<p>```ruby its
describe Zombie do
  it 'should have an iq of zero' do</p>

<pre><code>subject.iq.should == 0
</code></pre>

<p>  end
end</p>

<h1>can simplify it all the way to</h1>

<p>describe Zombie do
  its(:iq) { should == 0 }
end
```</p>

<p>```ruby its examples
describe Zombie do</p>

<pre><code>its(:name) { should == 'Ash' }
its(:weapons) { should include(weapon) }
its(:brain) { should be_nil }
its('tweet.size') { should == 2 }
</code></pre>

<p>end
```</p>

<p>```ruby Refactoring with Context
describe Zombie do
  it { should_not be_genius }
  its(:iq) { should == 0 }</p>

<p>  it "should be_genius with high iq" do</p>

<pre><code>zombie = Zombie.new(iq: 3)
zombie.should be_genius
</code></pre>

<p>  end</p>

<p>  it 'should have a brains_eaten_count of 1 with high iq' do</p>

<pre><code>zombie = Zombie.new(iq: 3)
zombie.brains_eaten_count.should == 1
</code></pre>

<p>  end
end</p>

<h1>Refactored with context and subject and its</h1>

<p>describe Zombie do
  it { should_not be_genius }
  its(:iq) { should == 0 }</p>

<p>  context "with high iq" do</p>

<pre><code>subject { Zombie.new(iq: 3) }
it { should be_genius }
its(:brains_eaten_count) { should == 1 }
</code></pre>

<p>  end
end
```</p>

<p>```ruby Let
describe Zombie do
  let(:tweet) { Tweet.new }</p>

<pre><code>subject { Zombie.new(tweets: [tweet], name: [zombie]) }
#moved zombie to its own let
    let(:zombie) { Zombie.new}
</code></pre>

<p>  its(:tweets) { should include(tweet) }
  its(:latest_tweet) { should == tweet }
end
```</p>

<p>```ruby Let!
describe Zombie do
  context "with high iq" do</p>

<pre><code> let!(:zombie) { Zombie.create(iq: 3, name: 'Anna') }
 subject { zombie }

 it "should be returned with genius" do
   Zombie.genius.should include(zombie)
 end

 it "should have a genius count of 1" do     
   Zombie.genius.count.should == 1
 end
</code></pre>

<p>  end
end
```</p>

<h3>Hooks</h3>

<p><code>ruby
before(:each)
before(:all)
after(:each)
aftter(:all)
</code></p>

<p>```ruby
before { zombie.hungry! }</p>

<h1>by default, a before clock runs each time before an example is about to run</h1>

<p><code>
</code>ruby Before Hook
describe Zombie do
  let(:zombie) { Zombie.create }
  subject { zombie }</p>

<p>  it 'is not a dummy zombie' do</p>

<pre><code>zombie.eat_brains
zombie.should_not be_dummy
</code></pre>

<p>  end</p>

<p>  it 'is a genius zombie' do</p>

<pre><code>zombie.eat_brains
zombie.should be_genius
</code></pre>

<p>  end
end</p>

<h1>refactored as</h1>

<p>describe Zombie do
  let(:zombie) { Zombie.create }
  subject { zombie }
  before { zombie.eat_brains }</p>

<p>  it 'is not a dummy zombie' do</p>

<pre><code>zombie.should_not be_dummy
</code></pre>

<p>  end</p>

<p>  it 'is a genius zombie' do</p>

<pre><code>zombie.should be_genius
</code></pre>

<p>  end
end
<code>
</code>ruby
describe Zombie do
  let(:zombie) { Zombie.create }
  before { zombie.iq = 0 }
  subject { zombie }</p>

<p>  context 'with a dummy zombie' do</p>

<pre><code>before { zombie.iq &lt; 3 } 
it { should be_dummy }
</code></pre>

<p>  end</p>

<p>  context 'with a smart zombie' do</p>

<pre><code>before { zombie.iq = 3 }
it { should_not be_dummy }
</code></pre>

<p>  end
end
```</p>

<h3>Shared Examples</h3>

<p>```ruby Shared Examples</p>

<h1>used to call shared examples</h1>

<p>it_behaves_like 'yada yada yada'</p>

<h1>refers to the implicit subject</h1>

<p>shared_examples_for 'the undead' do</p>

<pre><code>it 'does not have a pulse' do
    subject.pulse.should == false
end
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
</feed>

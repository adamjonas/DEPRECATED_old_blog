<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TODO | Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/blog/categories/todo/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-11T09:45:20-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TODO]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/07/todo/"/>
    <updated>2012-08-07T10:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/07/todo</id>
    <content type="html"><![CDATA[<p>Read: pragmatic programmer
<a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">javascript the good parts</a></p>

<p>```javascript Unbind
Need to understand unbind event 6:30</p>

<p>function selectSeat(e) {
  e.preventDefault();
  $('.selected').removeClass('selected');
  $(this).addClass('selected').unbind("click", selectSeat);
  $('#seatSelected').text($(this).data('seat'));
  $('#confirm-seat').show();
}</p>

<p>$('div.seating-chart li a.available').click(selectSeat);
```
<a href="http://blog.iterate.no/2012/08/19/books-everybody-should-read/">Books to Read</a></p>

<p>SDK- software development kit</p>

<p><a href="http://web.mit.edu/newsoffice/2009/explainer-pnp.html">P = NP</a></p>

<p>turbo links and push state in rails 4</p>

<p><a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple made easy</a></p>

<p><a href="http://en.wikipedia.org/wiki/Design_pattern_(computer_science">Software Design patterns</a>#Domain-specific_patterns)
<a href="http://en.wikipedia.org/wiki/Design_Patterns_(book">Design patterns book</a>)</p>

<p><a href="http://vimeo.com/48106365">Designing tests with sandi metz</a></p>

<p>Symbol to proc
lambdas, procs
   <a href="http://www.youtube.com/watch?v=VBC-G6hahWA&amp;feature=related">http://www.youtube.com/watch?v=VBC-G6hahWA&amp;feature=related</a>
   <a href="http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/">http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/</a></p>

<p>jruby
a java implementation of ruby
you don't need to know java
One powerful feature of JRuby is its ability to invoke the classes of the Java Platform.
<a href="https://github.com/jruby/jruby/wiki">jruby wiki</a></p>

<p>inject
<a href="http://blog.jayfields.com/2008/03/ruby-inject.html">http://blog.jayfields.com/2008/03/ruby-inject.html</a>
<a href="http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/">http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/</a></p>

<p>need to understand select better</p>

<p>namespacing==></p>

<p>class Dog
  Species = ["Poodle"]
 end</p>

<p> Dog::Species
 Species is a Constant within the Dog class. Species could be a class it could be a module, but it is a child of Dog.</p>

<p> make list of common many to many relationships, one to many relationships</p>

<p>active resource versus active record
active record is an ORM- it wraps the database
active resource wraps the restful web app with Ruby classes and work with them like Active Record models.</p>

<p>mass assignment and the .build(params[:user_name])</p>

<p>Coffee script</p>

<p>HTML &amp; CSS reading</p>

<p><a href="http://www.wibit.net/market/objective-c_programming">Objective-c tut</a></p>

<p>Ternary (shortened if statement) Syntax
Ternary syntax is the same in Ruby as most languages. The following sample will print “The variable is 10″ if var is equal to 10. Otherwise it will print “The variable is Not 10″.
<code>ruby
print “The variable is ” + (var == 10 ? “10″ : “Not 10″)
</code></p>

<p>rake db:setup
I had never seen this...</p>

<p>-service oriented architecture
-http perf</p>

<p>memcache
optimize</p>

<p>Why should you always provide the second argument to parseInt?
2nd argument in radix-- should specify
<a href="http://stackoverflow.com/questions/7318385/problems-with-javascript-parseint">http://stackoverflow.com/questions/7318385/problems-with-javascript-parseint</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git initialization for a new repo]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/21/git-initialization-for-a-new-repo/"/>
    <updated>2012-07-21T18:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/21/git-initialization-for-a-new-repo</id>
    <content type="html"><![CDATA[<p>I know this is basic. I keep getting the steps wrong though. So I'm putting it here...</p>

<p><code>
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin https://github.com/ajonas04/REPO_NAME.git
  git push -u origin master
</code></p>

<p>I also ran into this during the process today:
<code>
♕ git remote add origin https://github.com/ajonas04/REPO_NAME.git
fatal: remote origin already exists.
♕ git remote rm origin
♕ git remote add origin https://github.com/ajonas04/REPO_NAME.git
</code></p>

<p>```</p>

<h1>git remote add <remote name> <link></h1>

<p>♕ git remote add group git@github.com:ajonas04/fis.com.git
```
I guess I needed to remove the remote origin. I can safely say, I don't understand what's going on here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Site Request Forgery]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery/"/>
    <updated>2012-07-21T13:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery</id>
    <content type="html"><![CDATA[<h3>Cross Site Request Forgery</h3>

<p>Description Summary
:  The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</p>

<p>Extended Description
:  When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</p>

<p>Ensures that information submitted through forms have a specific tag that identifies it as information submitted through the form I created. (Read more about csrf <a href="http://stackoverflow.com/questions/941594/understand-rails-authenticity-token">here</a> and <a href="http://stackoverflow.com/questions/9996665/rails-how-does-csrf-meta-tag-work">here.</a>)</p>

<p>This is the out of context code I have from class...
<code>
csrf metatabs
</code></p>

<p>NOTE: We went over this in lecture 6 of ROR spring</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buzz Word Alert: Polymorphic]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/20/buzz-word-alert-polymorphic/"/>
    <updated>2012-07-20T17:57:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/20/buzz-word-alert-polymorphic</id>
    <content type="html"><![CDATA[<h3>Polymorphism</h3>

<ul>
<li>“is the ability of objects belonging to different types to respond to method calls of the same name, each one according to an appropriate type-specific behaviour.” (wikipedia)
-is a language feature that allows the same function call to be associated with different definitions during the same execution, by delaying the binding of the call to run-time. <a href="http://cs.calvin.edu/curriculum/cs/214/adams/labs/10/">here</a></li>
</ul>


<h3>Some Real Life Examples</h3>

<ul>
<li>depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:
<code>ruby
mixtape_path(@mixtape) #=&gt; '/mixtapes/1'
</code>
real life e.g.s
subway slot can accept a metrocard and a credit card-- depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</li>
</ul>


<h3>Polymorphic Associations</h3>

<ul>
<li>in the <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">guides</a> it states: "With polymorphic associations, a model can belong to more than one other model, on a single association."</li>
<li>You can think of a polymorphic belongs_to declaration as setting up an interface that any other model can use.</li>
</ul>


<p>As usual Ryan Bates to the rescue-- <a href="http://railscasts.com/episodes/154-polymorphic-association?view=comments">polymorphic association rails cast.</a></p>

<p>Imagine an event website. We want to add a comments section. How would be do this because comments would belong to either the photo, article, or event.
Without polymorphic associations we would probably try to create a model for each instance-- a photo comment, an article comment and an event comment. That's 3 models with the same data and behavior so we want to combine these into one generic comment model that can belong_to any of these other models.</p>

<p><code>ruby
rails generate scaffold comment content:text commentable_id:integer commentable_type:string
</code></p>

<p>A <em>polymorphic association</em> is an association that can belong_to many different models...</p>

<p><code>ruby Polymorphic Association
class Comment &lt; ActiveRecord::Base
  belongs_to :commentable, :polymorphic =&gt; true
end
</code>
The rails docs refer to the :as keyword parameter to has_one and has_many as specifying a “polymorphic interface.”</p>

<p>At the database level, the Comment table will have two columns for the association: commentable_type and commentable_id. <em>A composite foreign key.</em></p>

<p>To set up the other side of the association:
``` ruby
class Article &lt; ActiveRecord::Base
  has_many :comments, :as => :commentable #the :as => :commentable indicates the PolyMorph assoc
end</p>

<h1>similar code would be repeated for all of the associations-- in this case event &amp; photo</h1>

<p>```
So the polymorphic bit means that the type of thing you’re going to get back when you ask a Comment for its commentable data is unknown... it could be an article or it could be an event or it could be a photo. In dynamic Ruby land, Ruby terms, this means I don’t care what I sort of model I get when I ask a comment for its commentable data, as long as it goes quack I can treat it like it’s a duck.</p>

<p>Enter <em>interfaces</em>. Interfaces specify what I want the returned object to behave like, it could be a duck, or it could be a spaceship or maybe, just maybe, it could be commentable. In fact if you read though the ActiveRecord docs on polymorphic associations, you will find that “interface” is exactly what they call the parameter passed in the :as key of the params hash, and the first parameter to a polymorphic belongs_to association, and even the xxx_type and xxx_id columns in the database. This threw me quite a bit when I first looked at polymorphic associations, you have to declare that the association uses the commentable interface, but you don’t have a commentable model, or a commentable table, or a commentable anything for that matter. To my mind, "commentable" is the name of the interface that the comments all have to implement. It could specify that all of them must have a “next_comment” method, which will give me (surprise surprise) the next comment they produce. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">(Read more on this)</a></p>

<p>My comment model does not need to be changed when I add another commentable type. This is important. Very important! As soon as anyone with even a mild case of featuritus gets near your code they are going to want to add stuff, and more often that not, that will mean adding new classes. If adding new classes means adding new branches to all your conditional logic, you are in trouble. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">See here again</a></p>

<p>Once the associations are wired, how can we use this in the controller and views?
- For the most part, this can be treated like any other has_many association. e.g. can call article.comments to list all the comments of the article.
- A lot of confusion can arise if you are doing nested resources</p>

<p>Need to change the routes:
``` ruby
map.resources :articles, :has_many => :comments
map.resources :photos, :has_many => :comments
map.resources :events, :has_many => :comments</p>

<h1>i realize this isn't Rails 3.2 code...</h1>

<p>```</p>

<p>At the end of the comment controller, Ryan adds the find_commentable method:
``` ruby
private</p>

<p>def find_commentable
  params.each do |name, value|</p>

<pre><code>if name =~ /(.+)_id$/
  return $1.classify.constantize.find(value)
end
</code></pre>

<p>  end
  nil
end
```</p>

<h3>Beyond the rails cast</h3>

<p><a href="http://teachmetocode.com/articles/ruby-on-rails-what-are-polymorphic-associations/">Charles Max Wood's explanation</a></p>

<p>Polymorphic associations allow us to associate a single attribute of the class to any number of specified classes.
Charles suggest that you <a href="http://teachmetocode.com/articles/ruby-on-rails-polymorphic-associations-with-mixin-modules/">put your polymorphic associations and related functionality into mixin modules</a>.
<a href="http://www.youtube.com/watch?v=9NiCx1Lu-DY">Youtube Video</a>-
Polymorphic means that it can take different forms. A comment can belong_to a page or a post. Most devs name this ___able. e.g. for a comment it would be commentable. This just a convention.</p>

<p>On the has_many side this becomes a little muddy: if commentable can be a page or a post then a comment, it's going to go looking for a page ID on the comments table and it's not going to find it. So the solution is:
``` ruby
has_many :comments, :as => :commentable</p>

<h1>saying: i have many comments and the comments refer to me as commentable</h1>

<p>```
 If you have a belongs_to :commentable on your comment, you are going to expect it to have a commentable_id on the comments table (which it does!). But is that _id a post.id page.id? This is answers by having a commentable type column as well on the comments table-- it's a string column that stores the class name for whatever is associated there (i.e. post or page). So when you invoke joins or includes it has to go looking for the type column of commentable type.</p>

<p>Note: many to many polymorphic associations don't seem to work very well
There is a video on this <a href="http://www.youtube.com/watch?v=vEo6hmHTvS4">here</a>.</p>

<p><a href="http://robots.thoughtbot.com/post/159809241/whats-the-deal-with-rails-polymorphic-associations">The beginning of this is worth a read</a>... even if it's from 2006.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scope]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/17/scope/"/>
    <updated>2012-07-17T20:19:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/17/scope</id>
    <content type="html"><![CDATA[<p>``` ruby Fancy Scope
class Whatever
  def add</p>

<pre><code>add_junk(new_junk) #this just feeds into the next method
</code></pre>

<p>  end</p>

<p>  def add_junk(new_junk)</p>

<pre><code>@junk &lt;&lt; new_junk
new_junk.owner = self
</code></pre>

<p>  end
end
```
I need to understand that feeding into the 2nd method better</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-09-18T16:19:49-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mini-Test]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/18/testing/"/>
    <updated>2012-09-18T15:29:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/18/testing</id>
    <content type="html"><![CDATA[<p>&#8220;`ruby</p>

<h1>require &#8216;minitest/autorun&#8217;</h1>

<h1>class MyTest &lt; MiniTest::Unit::TestCase</h1>

<h1>all tests are prefixed with &#8220;test_&#8221;</h1>

<pre><code>def test_that_addition_works
    assert_equal 4, 2+2
end

def test_that_my_arry_has_a_value
    my_array = %w(dog cat frog)
    assert my_array.include?('frog')
end
</code></pre>

<h1>asser_delta: checks to see that floating point numbers are within a given range</h1>

<pre><code>def test_assert_delta
    assert_in_delta 3.14159, 3, 0.2
end
</code></pre>

<h1>assert_match: checks to see if the reg expressions evaluates against a string</h1>

<pre><code>def test_assert_match
    assert_match /world/, 'Hello world'
end
</code></pre>

<h1>assert_nil: all variables passed in are nil</h1>

<pre><code>def test_nil
    some_variables = nil
    assert_nil some_variable
end
</code></pre>

<h1>assert_output</h1>

<pre><code>def test_output
    assert_output "hello world", nil do
        print 'hello world'
    end
end
</code></pre>

<h1>assert_raises</h1>

<pre><code>def test_raise
    assert_raises NameError do
        this_variable_doesnt_exist
    end
end
</code></pre>

<h1>assert_respond_to: testing if something responds to a certain method</h1>

<pre><code>def test_respond
    assert_respond_to Array.new, 'include?'
end
</code></pre>

<p>end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Standard Library]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/18/ruby-standard-library/"/>
    <updated>2012-09-18T13:59:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/18/ruby-standard-library</id>
    <content type="html"><![CDATA[<p><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/fileutils/rdoc/FileUtils.html">###FileUtils###</a></p>

<p>The functions mostly involved changing dir, moving, removing, and copying files.</p>

<p>Going to give us different options for working with dir entries and files in the file system.</p>

<p>easy to work with in IRB</p>

<h3>Methods</h3>

<p>.cmp will tell you if two files have the same content
.touch creates a file if it doesn&#8217;t exist
.cp copy contents to another file</p>

<p><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">###Logger:###</a></p>

<h3>URIs</h3>

<p>URI stands for &#8220;Uniform Resource Identifier.&#8221; The URI module can be used to parse and manipulate URIs in your Ruby programs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; require 'uri'
</span><span class='line'> =&gt; true 
</span><span class='line'>&gt; require 'open-uri'
</span><span class='line'> =&gt; true 
</span><span class='line'>&gt; url = URI.parse('http://teamtreehouse.com/')
</span><span class='line'> =&gt; #&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/&gt; 
</span><span class='line'>&gt; puts url.inspect
</span><span class='line'>#&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/&gt;
</span><span class='line'> =&gt; nil 
</span><span class='line'>&gt; puts url.hostanme
</span><span class='line'>NoMethodError: undefined method `hostanme' for #&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/&gt;
</span><span class='line'>  from (irb):10
</span><span class='line'>  from /Users/Ajonas/.rvm/rubies/ruby-1.9.3-p194/bin/irb:16:in `&lt;main&gt;'
</span><span class='line'>&gt; puts url.hostname
</span><span class='line'>teamtreehouse.com
</span><span class='line'> =&gt; nil 
</span><span class='line'>&gt; puts url.path
</span><span class='line'>/
</span><span class='line'> =&gt; nil
</span><span class='line'>&gt; puts URI.split('http://teamtreehouse.com').inspect
</span><span class='line'>["http", nil, "teamtreehouse.com", nil, nil, "", nil, nil, nil]
</span><span class='line'> =&gt; nil 
</span><span class='line'>&gt; google = open('http://google.com').read
</span><span class='line'>=&gt; this outputs the html of the google homepage...</span></code></pre></td></tr></table></div></figure>


<h3>Benchmark Module</h3>

<p>Provides methods to report the time used that the program takes to execute&#8230;</p>

<figure class='code'><figcaption><span>Benchmarking symbols vs strings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repetitions</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="s2">&quot;String&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">repetitions</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;hello&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;world&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="s1">&#39;Symbol&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">repetitions</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="n">hello</span><span class="p">:</span> <span class="ss">:world</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>OptParse Library</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ostruct&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;optparse&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyParser</span> 
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="n">options</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">opts</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
</span><span class='line'>          <span class="n">opts</span><span class="o">.</span><span class="n">banner</span> <span class="o">=</span> <span class="s2">&quot;Usage: url&quot;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;-u&#39;</span><span class="p">,</span> <span class="s1">&#39;--url URL&#39;</span><span class="p">,</span> <span class="s1">&#39;Fetches the given url&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>              <span class="n">options</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>          <span class="n">opts</span><span class="o">.</span><span class="n">parse!</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Exceptions encountered: </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">opts</span>
</span><span class='line'>          <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">options</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="no">MyParser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Observable Library</h3>

<p>The Observable module allows you to easily implement the observer pattern in your classes. The observer pattern specifies that an object maintains a list of its dependents, called observers, and notifies them automatically of any state changes.</p>

<p>You could put this behavior in the classes themselves, but by putting them in an observer class it keeps the classes clean.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asset Pipeline]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/10/asset-pipeline/"/>
    <updated>2012-09-10T14:31:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/10/asset-pipeline</id>
    <content type="html"><![CDATA[<p>Manifest - tells the app what to include</p>

<p>in an app, it tells the app what .js and .css files to include</p>

<p>The slowest thing about any connection is the opening
The browser limits a domain to 4 paralell connections at a time.</p>

<p>flash of unstyled content (fouc)
Asset hosting. distribute your assets to multiple</p>

<p>CDN-
we don&#8217;t connect directly to a server. We make hops.</p>

<p>DHCP- distribute IDs to all the computers on the local network</p>

<p>everything is a proc and lambda in js. they are all anonymous functions.</p>

<p>Speed:
perceived speed.</p>

<p>The bulk is what is slow is in the front end.</p>

<p>In production we will have just one file of assets.</p>

<p>sprockets&#8211; opens the assets in the application.js file.
<a href="https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/directive_processor.rb">https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/directive_processor.rb</a>
require_tree-</p>

<p>once somethign is required once, spockets will recognize it and not require it again. The order implicitly is in alphabetical order. If this is done <em>explicitly</em> then you are in control.</p>

<p>your app takes precedence over the vendor path</p>

<p>One style sheet and one js and you let rails handle the rest</p>

<p>Gemify a js file
takes the current assets file
go into the manifest file and add the jquery token or add it itself.</p>

<p>Gem
has it&#8217;s own asset pipeline and add it&#8217;s own asset pipeline</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/10/html/"/>
    <updated>2012-09-10T13:27:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/10/html</id>
    <content type="html"><![CDATA[<h3>HTML</h3>

<p>&#8220;`HTML Snippet
<form action="what_page_is_this_being_submitted_to" method="POST/GET" name="my_form"></p>

<pre><code>&lt;fieldset&gt;
&lt;legend&gt;Important Information&lt;/legend&gt;
    &lt;label for="username"&gt;Username&lt;/label&gt;
    &lt;!-- this is asssociated with the ID --&gt;
    &lt;input type="text" name="username" id="username"&gt;
    &lt;input type="radio" name="gender" value="male"&gt;Male&lt;br&gt;
    &lt;input type="radio" name="gender" value="female"&gt;female&lt;br&gt;
    &lt;!-- if you use the same name like above you can't select both buttons, with a different name you could --&gt;
    &lt;input type="checkbox" name="foods" value="grapes"&gt;Grapes&lt;br&gt;
&lt;/fieldset&gt;

&lt;textarea name="essay" rows="10" col="30"&gt;
&lt;/textarea&gt;&lt;br&gt;

&lt;select&gt;
    &lt;optgroup label="Americas"&gt;
        &lt;option&gt;N. America&lt;/option&gt;
        &lt;option&gt;S. America&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;option&gt;Europe&lt;/option&gt;
    &lt;option&gt;Africa&lt;/option&gt;
&lt;/select&gt;
&lt;input type="submit" value="Continue"&gt;
</code></pre>

<p></form></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struct]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/10/struct/"/>
    <updated>2012-09-10T12:33:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/10/struct</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Struct</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Flatiron&quot;</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:location</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">flatiron</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">::</span><span class="no">Flatiron</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">flatiron</span><span class="o">.</span><span class="n">name</span> <span class="s2">&quot;Flatiron&quot;</span>
</span><span class='line'><span class="n">flatiron</span><span class="o">.</span><span class="n">location</span> <span class="o">=</span> <span class="s2">&quot;33 West 26th st&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Here is another way to do it&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">School</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:location</span><span class="p">)</span>
</span><span class='line'><span class="n">flatiron</span> <span class="o">=</span> <span class="no">School</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;flatiron&quot;</span><span class="p">,</span> <span class="s2">&quot;33 west 26th&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>we can also define a method in the struct</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">School</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:location</span><span class="p">)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">travel</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;going to </span><span class="si">#{</span><span class="n">location</span><span class="si">}</span><span class="s2"> location...&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">flatiron</span> <span class="o">=</span> <span class="no">School</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;flatiron&quot;</span><span class="p">,</span> <span class="s2">&quot;33 west 26th&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">flatiron</span><span class="o">.</span><span class="n">travel</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Bits]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/06/ruby-bits/"/>
    <updated>2012-09-06T15:33:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/06/ruby-bits</id>
    <content type="html"><![CDATA[<p>||= Assigns if there is not existing value. Otherwise, the previous assigment will override it.
Good way to set defaults if you need them</p>

<figure class='code'><figcaption><span>Refactoring using ||=</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:country</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;us&#39;</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:country</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'><span class="c1">#can refactor as</span>
</span><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:country</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;us&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Case statement e.g.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">games</span><span class="p">,</span> <span class="n">search_term</span><span class="p">)</span>
</span><span class='line'>  <span class="n">search_index</span> <span class="o">=</span> <span class="k">case</span> <span class="n">games</span><span class="o">.</span><span class="n">find_index</span><span class="p">(</span><span class="n">search_term</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">search_index</span>
</span><span class='line'>       <span class="s2">&quot;Game </span><span class="si">#{</span><span class="n">search_term</span><span class="si">}</span><span class="s2"> found: </span><span class="si">#{</span><span class="n">games</span><span class="o">[</span><span class="n">search_index</span><span class="o">]</span><span class="si">}</span><span class="s2"> at index </span><span class="si">#{</span><span class="n">search_index</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>     <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;Game </span><span class="si">#{</span><span class="n">search_term</span><span class="si">}</span><span class="s2"> not found.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">games</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Super Mario Bros.&quot;</span><span class="p">,</span> <span class="s2">&quot;Contra&quot;</span><span class="p">,</span> <span class="s2">&quot;Metroid&quot;</span><span class="p">,</span> <span class="s2">&quot;Mega Man 2&quot;</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">search</span><span class="p">(</span><span class="n">games</span><span class="p">,</span> <span class="s2">&quot;Contra&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">new_game</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">year</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:year</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">system</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:system</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">game</span> <span class="o">=</span> <span class="n">new_game</span><span class="p">(</span><span class="s2">&quot;Street Figher II&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="n">year</span><span class="p">:</span> <span class="mi">1992</span><span class="p">,</span>
</span><span class='line'> <span class="nb">system</span><span class="p">:</span> <span class="s2">&quot;SNES&quot;</span>
</span><span class='line'> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>rindex- Returns the index of the last occurrence of the given substring or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to end the search—characters beyond this point will not be considered.</p>

<p>private methods: all private methods are not accessible for outside objects</p>

<figure class='code'><figcaption><span>Raising Exceptions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">InvalidGameError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">new_game</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">InvalidGameError</span> <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">year</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:year</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">system</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:system</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">game</span> <span class="o">=</span> <span class="n">new_game</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">InvalidGameError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;There was a problem creating your new game: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>splat arguments</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">describe_favorites</span><span class="p">(</span><span class="o">*</span><span class="n">games</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">game</span> <span class="k">in</span> <span class="n">games</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Favorite Game: </span><span class="si">#{</span><span class="n">game</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">describe_favorites</span><span class="p">(</span><span class="s1">&#39;Mario&#39;</span><span class="p">,</span> <span class="s1">&#39;Contra&#39;</span><span class="p">,</span> <span class="s1">&#39;Metroid&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Classes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@system</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:system</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@year</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:year</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Encapsulation</h3>

<p>Passing around data and numbers breaks encapsulation
If all you are passing around is data- then an options hash should suffice</p>

<h3>Private / Protected Methods</h3>

<p>Private methods in Ruby cannot be called with an explicit receiver.</p>

<figure class='code'><figcaption><span>Private</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">up_vote</span><span class="p">(</span><span class="n">friend</span><span class="p">)</span>
</span><span class='line'><span class="c1">#in this case, bump karma is private</span>
</span><span class='line'>  <span class="n">bump_karma</span>
</span><span class='line'>  <span class="c1">#below will error out</span>
</span><span class='line'>  <span class="n">friend</span><span class="o">.</span><span class="n">bump_karma</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Protected methods in Ruby CAN be called with an explicit receiver, but not outside the class.</p>

<figure class='code'><figcaption><span>Protected</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">up_vote</span><span class="p">(</span><span class="n">friend</span><span class="p">)</span>
</span><span class='line'><span class="c1">#in this case, bump karma is private</span>
</span><span class='line'>  <span class="n">bump_karma</span>
</span><span class='line'>  <span class="c1">#below will error out</span>
</span><span class='line'>  <span class="n">friend</span><span class="o">.</span><span class="n">bump_karma</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Inheritance / Super</h3>

<p>A way to DRY up duplication is to use inheritance ot inherit behavior for two classes</p>

<p>Super looks for definitions in the parent class and applies it in the child class</p>

<h3>Active Support</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">anniversary</span><span class="p">(</span><span class="n">game</span><span class="p">,</span> <span class="n">years</span><span class="p">)</span>
</span><span class='line'>  <span class="n">game</span><span class="o">[</span><span class="ss">:release</span><span class="o">].</span><span class="n">advance</span><span class="p">(</span><span class="n">years</span><span class="p">:</span> <span class="n">years</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">game</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Contra&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">release</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1987</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">anniversary</span><span class="p">(</span><span class="n">game</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>difference between hashes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Using ActiveSupport, return the difference between Mario&#39;s favorite games and Luigis&#39;s favorite games by implementing the difference_between method.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">difference_between</span><span class="p">(</span><span class="n">player1</span><span class="p">,</span> <span class="n">player2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">player1</span><span class="o">.</span><span class="n">diff</span><span class="p">(</span><span class="n">player2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>when you include something. it is included in the ancestor&#8217;s class.</p>

<h3>Namespacing</h3>

<p>putting functions in a module will prevent namespacing conflicts
a common pattern is to &#8216;include&#8217; the module inside of the class&#8230; this will expose the module methods as instances methods in the object &#8211; which means the methods will have access to the object&#8217;s internal properties.</p>

<p>when use mixin versus classical class inheritance.
A class can only have one super class
inheritance suggests specialization</p>

<p>the extends keyword included as the class methods</p>

<p>use extend to expose class methods as class methods
use include to expose class methods as instance methods</p>

<p>if you call extend on an object, then it exposes the methods as instance methods on an object</p>

<figure class='code'><figcaption><span>object extend</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Contra&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#extend the Playable module for the specific game object</span>
</span><span class='line'><span class="c1">#the module is not available to other objects in that class</span>
</span><span class='line'><span class="n">game</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Playable</span><span class="p">)</span>
</span><span class='line'><span class="n">game</span><span class="o">.</span><span class="n">play</span>
</span></code></pre></td></tr></table></div></figure>


<p>method hooks allows you to both include and extend modules</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">LibraryUtils</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_game</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">remove_game</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#this extends the ClassMethods so that it doesn&#39;t need to be called below</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassMethods</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">search_by_game_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AtariLibrary</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">LibraryUtils</span>
</span><span class='line'>  <span class="c1">#see-- no extend but still includes the class methods module...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Active Support Concern</h3>

<p>this allows us to use the include and extend calls without making it so ugly.</p>

<figure class='code'><figcaption><span>ActiveSupport Concern</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/concern&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">LibraryUtils</span>
</span><span class='line'><span class="c1">#this ensures that the dependencies are properly resolved...</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_game</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">remove_game</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">search_by_game_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ActiveSupport Concern</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">LibraryLoader</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load_game_list</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">LibraryUtils</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#included block below is much cleaner</span>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">load_game_list</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AtariLibrary</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">LibraryUtils</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some more in depth reading to understand this better&#8230;
<a href="http://yehudakatz.com/2009/11/12/better-ruby-idioms/">here is an explanation from yehuda katz</a></p>

<p><a href="http://www.fakingfantastic.com/2010/09/20/concerning-yourself-with-active-support-concern/">Concerning Yourself with ActiveSupport::Concern</a></p>

<p>From 2010- <a href="http://www.strictlyuntyped.com/2010/05/tweaking-on-rails-30-2.html">Tweaking on Rails 3.0: #2 ActiveSupport::Concern</a></p>

<h3>Blocks</h3>

<figure class='code'><figcaption><span>Yields</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Library</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:games</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">games</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">games</span> <span class="o">=</span> <span class="n">games</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each_on_system</span><span class="p">(</span><span class="nb">system</span><span class="p">)</span>
</span><span class='line'>    <span class="n">games</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">game</span><span class="o">|</span>
</span><span class='line'>    <span class="c1">#&#39;yield game&#39;yields the game object</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">game</span> <span class="k">if</span> <span class="n">game</span><span class="o">.</span><span class="n">system</span> <span class="o">==</span> <span class="nb">system</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Yields</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">list</span>
</span><span class='line'>    <span class="n">games</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">game</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="k">yield</span> <span class="n">game</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:year</span><span class="p">,</span> <span class="ss">:system</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:created_at</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:year</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">system</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:system</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@created_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play</span>
</span><span class='line'>    <span class="n">emulate</span> <span class="k">do</span> <span class="o">|</span><span class="n">emulator</span><span class="o">|</span>
</span><span class='line'>      <span class="n">emulator</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">screenshot</span>
</span><span class='line'>    <span class="n">emulate</span> <span class="k">do</span> <span class="o">|</span><span class="n">emulator</span><span class="o">|</span>
</span><span class='line'>      <span class="n">emulator</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>      <span class="n">emulator</span><span class="o">.</span><span class="n">screenshot</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">emulate</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>  <span class="n">emulator</span> <span class="o">=</span> <span class="no">Emulator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">system</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span> <span class="n">emulator</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Emulator failed: </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/06/css/"/>
    <updated>2012-09-06T14:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/06/css</id>
    <content type="html"><![CDATA[<h3>Sprites</h3>

<p>loading two images as one and then changing the position like for a hover or focus.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.logo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="sx">url(logo3.png)</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">75px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-indent</span><span class="o">:</span> <span class="m">-9999px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">250px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.logo</span><span class="nd">:hover</span><span class="o">,</span> <span class="nc">.logo</span><span class="nd">:focus</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-position</span><span class="o">:</span> <span class="m">0</span> <span class="m">-75px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.logo</span><span class="nd">:active</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">background-position</span><span class="o">:</span> <span class="m">0</span> <span class="m">-150px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Selectors</h3>

<p>Pseudo Classes:
:hover / :focus / :active / :visited
:first-child / :last-child / :only-child
:nth-child() / :nth-of-type()</p>

<p>Pseudo Elements:
:before / :after
:first-line / :first-letter</p>

<figure class='code'><figcaption><span>Intervals</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.hours</span> <span class="nt">li</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">4n</span><span class="o">+</span><span class="nt">1</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#c5c9cf</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>li:nth-child(an+b){}
a = the intervals
b = the position (zero if it isn&#8217;t set)</p>

<figure class='code'><figcaption><span>Targeting the 1st line of the 1st para</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">p</span><span class="nd">:first-child:first-line</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>:before pseudo element</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">p</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'> <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;-&gt;&#39;</span><span class="p">;</span>
</span><span class='line'> <span class="k">margin-right</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adjacent sibling selectors:
:  have the following syntax: E1 + E2, where E2 is the subject of the selector. The selector matches if E1 and E2 share the same parent in the document tree and E1 immediately precedes E2, ignoring non-element nodes (such as text nodes and comments).</p>

<p>Thus, the following rule states that when a P element immediately follows a MATH element, it should not be indented:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">math</span> <span class="o">+</span> <span class="nt">p</span> <span class="p">{</span> <span class="k">text-indent</span><span class="o">:</span> <span class="m">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span> <span class="o">+</span> <span class="nt">h2</span> <span class="p">{</span> <span class="k">margin-top</span><span class="o">:</span> <span class="m">-5mm</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span><span class="nc">.opener</span> <span class="o">+</span> <span class="nt">h2</span> <span class="p">{</span> <span class="k">margin-top</span><span class="o">:</span> <span class="m">-5mm</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Relative lengths
em unit
:  Equal to the computed value of the ‘font-size’ property of the element on which it is used.
ex unit
:  Equal to the font&#8217;s x-height.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">p</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">line-height</span><span class="o">:</span><span class="m">40px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">letter-spacing</span><span class="o">:</span><span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">word-spacing</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span><span class="k">right</span><span class="p">;</span>
</span><span class='line'>  <span class="k">white-space</span><span class="o">:</span><span class="k">nowrap</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>links:
- <a href="http://css-tricks.com/pseudo-class-selectors/">CSS Tricks- Pseudo Class Selectors</a>
- <a href="http://css-tricks.com/pseudo-element-roundup/">Amazing stuff pseudo-elements can do</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code School Rails 2]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/05/code-school-rails-2/"/>
    <updated>2012-09-05T15:00:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/05/code-school-rails-2</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Scopes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tweet</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span><span class="p">,</span> <span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at desc&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:graveyard</span><span class="p">,</span> <span class="n">where</span><span class="p">(</span><span class="n">show_location</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">location</span><span class="p">:</span> <span class="s2">&quot;graveyard&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>be careful of return values with callbacks. Once it hits a false, everything will halt.</p>

<figure class='code'><figcaption><span>Foreign Key Options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tweet</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:location</span><span class="p">,</span> <span class="n">dependent</span><span class="p">:</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="n">foreign_key</span><span class="p">:</span> <span class="ss">:tweeter_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>n+1 query</p>

<figure class='code'><figcaption><span>Migration syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>  <span class="n">create_table</span><span class="p">(</span><span class="ss">:categorizations</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:tweet_id</span>
</span><span class='line'>    <span class="c1"># there is no comma seperation here...</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:category_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>belongs_to :singular
has_many :plaural</p>

<p>put and delete are hidden in the html 5 data-method
This is all done with unobtrusive javascript.</p>

<figure class='code'><figcaption><span>link_to</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;All Zombies&#39;</span><span class="p">,</span> <span class="n">zombies_path</span>
</span><span class='line'><span class="n">link_to</span> <span class="s1">&#39;All Zombies&#39;</span><span class="p">,</span> <span class="n">new_zombies_path</span>
</span><span class='line'><span class="n">link_to</span> <span class="s1">&#39;Edit Zombies&#39;</span><span class="p">,</span> <span class="n">edit_zombies_path</span><span class="p">(</span><span class="vi">@zombie</span><span class="p">)</span>
</span><span class='line'><span class="n">link_to</span> <span class="s1">&#39;Show Zombies&#39;</span><span class="p">,</span> <span class="n">zombie_path</span><span class="p">(</span><span class="vi">@zombie</span><span class="p">)</span>
</span><span class='line'><span class="n">link_to</span> <span class="s1">&#39;Show Zombies&#39;</span><span class="p">,</span> <span class="vi">@zombie</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="sx">%= @zombie.name %&gt;&#39;s weapons&lt;/h2&gt;</span>
</span><span class='line'><span class="sx">&lt;ul&gt;</span>
</span><span class='line'><span class="sx">  &lt;% @weapons.each do |w| %&gt;</span>
</span><span class='line'><span class="sx">    &lt;li&gt;&lt;%=</span> <span class="n">link_to</span> <span class="n">w</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="o">[</span><span class="vi">@zombie</span><span class="p">,</span> <span class="n">w</span><span class="o">]</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="c1">#the relative path shorthand is equal to &#39;link_to w.name, zombie_weapon_path(@zombie, w)&#39;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;/ul&gt;</span>
</span><span class='line'><span class="c1">#note that weapon is singular here...</span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;New Weapon&quot;</span><span class="p">,</span> <span class="n">new_zombie_weapon_path</span><span class="p">(</span><span class="vi">@zombie</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>??I&#8217;m not really sure about the logic of passing in variables here. How do we know the order and what is appropriate?</p>

<p>same with form_for</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">form_for</span><span class="p">(</span><span class="o">[</span><span class="vi">@zombie</span><span class="p">,</span> <span class="vi">@weapon</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mad Mimi- gem integration for subscription lists</p>

<h3>Asset Pipeline</h3>

<p>app dir - app specific code
lib dir - shared code
vendor dir - 3rd party code</p>

<figure class='code'><figcaption><span>Call with assets&#8211; it will check all the directories</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">assets</span><span class="o">/</span><span class="n">custom</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="n">assets</span><span class="o">/</span><span class="n">rails</span><span class="o">.</span><span class="n">png</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">low_ammo</span><span class="p">(</span><span class="n">weapon</span><span class="p">,</span> <span class="n">zombie</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attachments</span><span class="o">[</span><span class="s2">&quot;weapon.jpg&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">weapon</span><span class="o">.</span><span class="n">picture_file</span>
</span><span class='line'>  <span class="n">mail</span> <span class="n">to</span><span class="p">:</span> <span class="n">zombie</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="n">subject</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">weapon</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> has low ammo&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://guides.rubyonrails.org/action_mailer_basics.html#sending-emails-with-attachments">See</a></p>

<p>Asset Tags:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">auto_discovery_link_tag</span>
</span><span class='line'><span class="n">javascript_include_tag</span>
</span><span class='line'><span class="n">stylesheet_link_tag</span>
</span><span class='line'><span class="n">image_tag</span>
</span><span class='line'><span class="n">video_tag</span>
</span><span class='line'><span class="n">audio_tag</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>e.g.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s2">&quot;weapon.jpg&quot;</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>StyleSheet- referencing an image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h2</span><span class="c1">#newUser {</span>
</span><span class='line'>  <span class="n">text</span><span class="o">-</span><span class="n">indent</span><span class="p">:</span> <span class="o">-</span><span class="mi">9999</span><span class="n">px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">height</span><span class="p">:</span> <span class="mi">64</span><span class="n">px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">width</span><span class="p">:</span> <span class="mi">50</span><span class="n">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">display</span><span class="p">:</span> <span class="n">block</span><span class="p">;</span>
</span><span class='line'>  <span class="n">background</span><span class="p">:</span> <span class="n">url</span><span class="p">(</span><span class="o">&lt;%=</span> <span class="n">asset_path</span><span class="p">(</span><span class="s2">&quot;rails.png&quot;</span><span class="p">)</span> <span class="o">%&gt;</span><span class="p">)</span> <span class="n">no</span><span class="o">-</span><span class="n">repeat</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">#created an asset path link because this file is erb....</span>
</span><span class='line'><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&#39;#displayWeaponForm&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">(event) -&gt;</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s">&#39;#newWeapon&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hide</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>in the controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeaponsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fire_weapon</span>
</span><span class='line'>    <span class="vi">@weapon</span> <span class="o">=</span> <span class="no">Weapon</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@weapon</span><span class="o">.</span><span class="n">fire!</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@weapon</span><span class="o">.</span><span class="n">low_ammo?</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:fire_and_reload</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the &#8216;if&#8217; conditionally is not met, it will fire the default show page which corresponds to the name of the definition</p>

<figure class='code'><figcaption><span>Custom Resource Routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RailsForZombies</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:zombies</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:weapons</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">put</span> <span class="ss">:toggle_condition</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="ss">:member</span>
</span><span class='line'>      <span class="n">put</span> <span class="ss">:reload</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="ss">:member</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are sending the entire @weapon object</p>

<figure class='code'><figcaption><span>Rendering JSON and options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeaponsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@weapon</span> <span class="o">=</span> <span class="no">Weapon</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:weapon</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@weapon</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1">#location option-- an API best practice on where to find the URL of the resource</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@weapon</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="ss">:created</span><span class="p">,</span> <span class="n">location</span><span class="p">:</span> <span class="vi">@weapon</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@weapon</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are only interested in the ammo attribute of the weapon JSON object. This limits the amount of data we are sending. We don&#8217;t want to send more than we need. <em>Data isn&#8217;t free.</em></p>

<figure class='code'><figcaption><span>Json with Options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeaponsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">reload</span>
</span><span class='line'>    <span class="vi">@weapon</span> <span class="o">=</span> <span class="no">Weapon</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@weapon</span><span class="o">.</span><span class="n">ammo</span> <span class="o">&lt;</span> <span class="mi">30</span>
</span><span class='line'>      <span class="vi">@weapon</span><span class="o">.</span><span class="n">reload</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:ammo_to_reload</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@weapon</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="n">only</span><span class="p">:</span> <span class="ss">:ammo</span><span class="p">),</span> <span class="n">status</span><span class="p">:</span> <span class="ss">:ok</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@weapon</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="n">only</span><span class="p">:</span> <span class="ss">:ammo</span><span class="p">),</span> <span class="n">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>More JSON options in the controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@weapon</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="n">except</span><span class="p">:</span> <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:updated_at</span><span class="o">]</span><span class="p">,</span> <span class="kp">include</span><span class="p">:</span> <span class="ss">:zombie</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Important</em>
The JSON object you send back doesn&#8217;t need to correspond to a real world object. The slow part is always opening up the connection. So you would rather send as much as you can per connection rather than send two requests.</p>

<h3>Routes</h3>

<p>there is a :member route
:  which acts on a single resource
There is a :collection route
:  which acts on a group of resouces</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveModel/Serializers/JSON.html#method-i-as_json">as_json</a></p>

<figure class='code'><figcaption><span>Nested Options in the Model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Zombie</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:weapons</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">as_json</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">options</span> <span class="o">||</span>
</span><span class='line'>    <span class="c1">#this is obviously nested. a little counter intuitive on how this is set up</span>
</span><span class='line'>      <span class="p">{</span><span class="n">only</span><span class="p">:</span> <span class="ss">:name</span><span class="p">,</span> <span class="kp">include</span><span class="p">:</span> <span class="p">{</span><span class="n">weapons</span><span class="p">:</span> <span class="p">{</span><span class="n">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:ammo</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span><span class="p">}}})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#condition&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;&lt;%= @weapon.condition %&gt;&quot;</span><span class="p">).</span><span class="nx">effect</span><span class="p">(</span><span class="s2">&quot;highlight&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have a bad habit of putting > in my equations which seem to break things&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#ammo&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;&lt;%= @weapon.ammo %&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="k">if</span> <span class="err">@</span><span class="nx">weapon</span><span class="p">.</span><span class="nx">ammo</span> <span class="o">&gt;=</span> <span class="mi">30</span> <span class="o">%&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#reload_form&#39;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Coffee Script</h3>

<p><a href="http://jashkenas.github.com/coffee-script/">Documentation</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&#39;div#reload_form form&#39;</span><span class="p">).</span><span class="nx">submit</span> <span class="nf">(event) -&gt;</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">form = </span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">url = </span><span class="nx">form</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;action&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">ammo = </span><span class="nx">$</span><span class="p">(</span><span class="s">&#39;#ammo_to_reload&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>      <span class="nv">type: </span><span class="s">&#39;put&#39;</span>
</span><span class='line'>      <span class="nv">url: </span><span class="nx">url</span>
</span><span class='line'>      <span class="nv">data: </span><span class="p">{</span><span class="nv">ammo_to_reload: </span><span class="nx">ammo</span><span class="p">}</span>
</span><span class='line'>      <span class="nv">dataType: </span><span class="s">&#39;json&#39;</span>
</span><span class='line'>      <span class="nv">success: </span><span class="nf">(json) -&gt;</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s">&#39;#ammo&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">ammo</span><span class="p">).</span><span class="nx">effect</span><span class="p">(</span><span class="s">&quot;highlight&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s">&#39;#reload_form&#39;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">()</span> <span class="k">if</span> <span class="nx">json</span><span class="p">.</span><span class="nx">ammo</span> <span class="o">&gt;=</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL DB Design]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/05/mysql-db-design/"/>
    <updated>2012-09-05T11:51:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/05/mysql-db-design</id>
    <content type="html"><![CDATA[<p><a href="http://code.google.com/edu/tools101/mysql.html">MySQL Google</a></p>

<p><em>Data normalization</em>
:  This is the process we go through to develop a design that is free of redundant data and that can be consistently and correctly modified</p>

<p><em>primary keys</em> uniquely identify a record in a table, and <em>foreign keys</em> are used to relate tables
- Every record must have a unique primary key which should not be reused once deleted</p>

<p><em>Referential integrity</em>
:  The data in a foreign key needs to match the primary key in some record of the original table. Referential integrity assures there are no broken links between tables. Note that if you delete a record in the original table, for example, you delete one of the customers from the customer table, referential integrity requires that you delete all references to that customer in the order table.</p>

<h3>MySQL Exercises</h3>

<ol>
<li>Start up MySQL with</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -uroot -ppassword</span></code></pre></td></tr></table></div></figure>


<p>Creating a table&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create table customer (cust_no int not null auto_increment, name varchar(40),
</span><span class='line'>address varchar(40), phone varchar(12), primary key(cust_no));</span></code></pre></td></tr></table></div></figure>


<p>&#8220;varchar&#8221; which means variable-length strings. The numbers following &#8220;varchar&#8221; in the command above indicate maximum length for the data stored in the field. We also set up cust_no to be the primary key.</p>

<p>The orders table&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create table orders (order_no int not null auto_increment, FK_cust_no int not null, 
</span><span class='line'>foreign key(FK_cust_no) references customer(cust_no), primary key(order_no));</span></code></pre></td></tr></table></div></figure>


<p>There are only two fields in this table. The order_no field is a primary key, and is an integer, not null and it will auto increment. The cust_no field is a foreign key. We have named it FK_cust_no in the orders table to distinguish it from the cust_no field in the customer table.</p>

<p><em>A foreign key is a field that references a primary key in another table.</em> In the command, we indicate that the FK_cust_no field is a foreign key referencing the cust_no field in customer, indicated by the &#8220;foreign key(FK_cust_no) references customer(cust_no)&#8221; part of the command. By setting the table up this way, MySQL will enforce constraints&#8211; any order that we enter into the orders table must reference a valid customer in the customer table. If we enter a cust_no in orders that does not exist in customers, an error will result.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[omniauth]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/04/omniauth/"/>
    <updated>2012-09-04T12:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/04/omniauth</id>
    <content type="html"><![CDATA[<p><a href="http://sleekd.com/tutorials/setting-up-omniauth-authentication-with-facebook/">facebook</a></p>

<p><a href="https://github.com/intridea/omniauth">The Gem</a></p>

<p>Omninauth is just</p>

<figure class='code'><figcaption><span>opening the connection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@graph</span> <span class="o">=</span> <span class="no">Koala</span><span class="o">::</span><span class="no">Facebook</span><span class="o">::</span><span class="no">API</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">oauth_access_token</span><span class="p">)</span>
</span><span class='line'><span class="c1">#for an hour or so I wasn&#39;t loading the proper access_token. </span>
</span><span class='line'><span class="c1">#the problem was I wasn&#39;t loading it as a string!!</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[routes of the app]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/23/routes-of-the-app/"/>
    <updated>2012-08-23T12:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/23/routes-of-the-app</id>
    <content type="html"><![CDATA[<h3>The plan for the refactor</h3>

<ol>
<li>Multiple errors are being mass assigned a unique tag</li>
<li><p>multiple tags are being assigned to an error</p></li>
<li><p>individual tags are assigned to an individual error</p></li>
<li>individual tags are being removed from an error</li>
</ol>


<p>Invidual Tag and Error</p>

<pre><code>DELETE /errors/id/tags/id - Remove this tag from that error
POST /errors/id/tags/id - Adding this tag to that error
</code></pre>

<p>Multiple Tags to an Error</p>

<pre><code>PUT /errors/id/tags -
</code></pre>

<p>Update an Error</p>

<pre><code># Sure, it could also accept tags tag_tokens=
PUT /errors/id
</code></pre>

<p>Multiple Errors are Assigned One Tag</p>

<pre><code>POST /tags/id/errors
{
    error_ids =&gt; [],
}

Supply a Tag ID in the URL along with an array of error_ids.

DELETE /tags/id/errors
</code></pre>

<h3>Creating the controllers</h3>

<p>tags_controller is responsible for updating tags_controller
the errors controller is responsible for updating errors
-the errors/tags controller is responsible for update tags on an error</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day14]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/20/haw-day14/"/>
    <updated>2012-08-20T12:10:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/20/haw-day14</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Debug Method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allVals</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// location.reload()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look up dataTypes &#8211; text, json, script (js), xml, html
This the request type format that we want it in.</p>

<h3>JQuery Token Input</h3>

<p>http://railscasts.com/episodes/258-token-fields
need to make sure the controller responds to .json
-the default has it nested in an @tags key. To remove that we need to map it to its attributes like so&#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@tags</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">attributes</span><span class="p">}</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>prePoulation was an issue as well</p>

<figure class='code'><figcaption><span>Symobol to Proc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">].</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="p">}</span> <span class="c1">#=&gt; [&quot;1&quot;, &quot;2&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To Jquery plugin to gem</p>

<p>query isn&#8217;t searching properly in the tags controller
remove the submit button for tag tokens</p>

<p>f.text_field options for onAdd or on Remove</p>

<p>put the :controller => :error, :action => :resolve_on_airbrake on the fix button
or gather all the errors tagged with fixed and move this task to a background job&#8230;</p>

<p>sidekiq runs on redis
create a worker folder
??needs to be serialized into redis?
sidekiq will run if there is an error: can disable the retry option with an option
pool thread limits the number of jobs that can be run</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day13]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/17/haw-day13/"/>
    <updated>2012-08-17T13:43:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/17/haw-day13</id>
    <content type="html"><![CDATA[<p>Checkboxes</p>

<p>return default goes at the end
preventDefault() goes at the beginning</p>

<p>return false goes at the end</p>

<p>we can import the deploys with client.deploys(&#8216;project#&#8217;).first</p>

<p>You can also pass local variables into partials, making them even more powerful and flexible. For example, you can use this technique to reduce duplication between new and edit pages, while still keeping a bit of distinct content:</p>

<p>new.html.erb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1&gt;New zone&lt;/h1&gt;
</span><span class='line'>&lt;%= error_messages_for :zone %&gt;
</span><span class='line'>&lt;%= render :partial =&gt; "form", :locals =&gt; { :zone =&gt; @zone } %&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Specifying a class in a link_to</h3>

<figure class='code'><figcaption><span>Using Twitter Bootstrap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn-group pull-right&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%=link_to &quot; Refresh Errors&quot;, errors_import_path, :class =</span><span class="o">&gt;</span> <span class="s1">&#39;btn icon-refresh btn-success&#39;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day12]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/16/haw-day12/"/>
    <updated>2012-08-16T10:19:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/16/haw-day12</id>
    <content type="html"><![CDATA[<p>js buttons on tag show pages
fix checkboxes/mass assigning tags
deploy- avi</p>

<h3>respond_to</h3>

<p>This is basically a glorified case statement&#8230;</p>

<p>if no action is specified the default is the action of the namespace</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tag</span>
</span><span class='line'>    <span class="c1">#some code</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span><span class="n">redirect_to</span> <span class="ss">:back</span><span class="p">}</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it looks for tag.js as the default&#8230;</p>

<p>BUG:
tell firefox not to autocomplete</p>

<p>checkboxes
get all the values
submit to server</p>

<p>loop through the elements
gather all the values (which are the ids)
find errors by ids
push in tag name signal</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery-air-intermediate]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-intermediate/"/>
    <updated>2012-08-15T15:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-intermediate</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Retriving the href</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tabs ul li:last a&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tabs ul li:last a&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;flights&#39;</span><span class="p">)</span> <span class="c1">//this would be from an html5 data tag</span>
</span></code></pre></td></tr></table></div></figure>


<p>event delegation-
it can be method chained and performs faster than live
$(document).delegate</p>

<p><strong><em>Don&#8217;t forget the brackets on the selector!!</em></strong></p>

<h3>eq selector</h3>

<p>eq(element#) - a selector</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ol.econ­omy-class li.ro­w:eq(1) ol li:eq­(3)&#39;</span><span class="p">).</span><span class="nx">html</span><span class="err">­</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ol.econ­omy-class li.ro­w:eq(1) ol li:eq­(3) a&#39;</span><span class="p">).</span><span class="nx">a</span><span class="err">­</span><span class="nx">ttr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="err">­</span><span class="p">);</span>
</span><span class='line'><span class="c1">// to access the href you need to specify the a tag</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ol.econ­omy-class li.ro­w:eq(1) ol li:eq­(3) a&#39;</span><span class="p">).</span><span class="nx">d</span><span class="err">­</span><span class="nx">ata</span><span class="p">(</span><span class="s1">&#39;seat&#39;</span><span class="err">­</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.seating-chart a.available&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a.available&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;selected&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;selected&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bind Element</h3>

<p>jQuery bind() function is used to attach an event handler to elements, while the unbind() is used to detached an existing event handler from elements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.seating-chart a.available&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">click</span><span class="o">:</span> <span class="nx">selectSeat</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to list multiple events for each element. NOTE the different syntax, this becomes like a MAP now (very similar to a hash)</p>

<h3>Unbind Element</h3>

<p>Let’s imagine the following scenario&#8230;
The user clicks on a “vote” button.
Some AJAX calls are performed.
After a successful AJAX call you setup a cookie to deny further votes from this machine.
So one possible solution is to unbind the click event&#8230;</p>

<p>Have something happen on a click event, but only once! Unbind the click handler after the element has been clicked once.</p>

<figure class='code'><figcaption><span>Once and only once&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#my-selector&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'>       <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Clicked and unbound!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Jquery Air</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">selectSeat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.selected&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;selected&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;selected&#39;</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectSeat</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#seatSelected&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;seat&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#confirm-seat&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.seating-chart li a.available&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">selectSeat</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Live Event</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a.confirm-upgrade&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">confirmUpgrade</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bind binds to the event one time
Live will look for that event now or in the future and will catch it and call the right function</p>

<h3>Delegate</h3>

<figure class='code'><figcaption><span>Delegate > live</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#flights a&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectFlight</span><span class="p">);</span>
</span><span class='line'><span class="c1">// is the same as</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;#flights a&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectFlight</span><span class="p">);</span>
</span><span class='line'><span class="c1">// this is too general. It would be better if you just checked inside a specific element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="err">#</span><span class="nx">tabs</span> <span class="nx">div</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;#flights a&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectFlight</span><span class="p">);</span>
</span><span class='line'><span class="c1">// check inside the element rather than the entire page</span>
</span></code></pre></td></tr></table></div></figure>


<p>Delegate can be method chained and it is more performant</p>

<h3>Ajax</h3>

<p>Video2
$.get and $.ajax are alternatives. $.ajax is slightly more
cache: false option ensures that your browser won&#8217;t cache the html for every request
Error handling
Loading div - call beforeSend the AJAX invoked then hide it in the complete:
If it returns successfully - success: and if not - error:</p>

<h3>Mistake I keep making</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fetchFirstClassConfirm</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">flight_id</span> <span class="o">=</span> <span class="mi">815</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;/flights/&#39;</span> <span class="o">+</span> <span class="nx">flight_id</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#confirm-first-class&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">result</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//I have a big problem missing the &#39;&#39; in the selector!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery-air-beginner]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-beginner/"/>
    <updated>2012-08-15T15:34:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-beginner</id>
    <content type="html"><![CDATA[<p>The DOM is a node structure or tree
has HTML tag, head tag, title child, body tag, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find all h1s</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find all ps</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p#final&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find the paragraph with ID final</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//these return arrays with the elements inside</span>
</span><span class='line'><span class="c1">//if the search doesn&#39;t return anything, then it returns an empty array []</span>
</span><span class='line'><span class="c1">// be careful- this empty array is considered truthy</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1, p.plan&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//returns an array with both elements-- one string, seperated by commas</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">,</span> <span class="s2">&quot;p.plan&quot;</span><span class="p">)</span> <span class="c1">// THIS WON&#39;T WORK</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p:first&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//returns the first p it encounters</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p.first&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//looks for the p.first node</span>
</span></code></pre></td></tr></table></div></figure>


<p>To select children elements use a space between the parent and child selector&#8230;
For example, to select all the A tags that are children of a tag with id = foo, you&#8217;d do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#foo a&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//in the exercise</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul#first_class li&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Select all the rows and seats in first class, everything with an &lt;LI&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can go as many levels deep as you want when selecting children</li>
<li>For example, to select all A tags that have two <div> parents, you&#8217;d do this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div div a&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//in the exercise:</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul li ul li&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Find all the window seats (a & d in first class, and a & f in economy)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li.a, ul#first_class li.d, ul#economy_class li.f&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>can pass in a map which is like a hash in ruby
key are seperated from values by colons</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">belts</span> <span class="o">=</span> <span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Turn on the fasten seatbelt sign?&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Seatbelts: &#39;</span> <span class="o">+</span> <span class="nx">belts</span><span class="p">);</span>
</span><span class='line'><span class="c1">//can string multiple calls together like above</span>
</span></code></pre></td></tr></table></div></figure>


<p>having trouble with the syntax of closing the parentheses.</p>

<h3>Why JS?</h3>

<p>HTML is for structure
CSS is for presentation
Javascript is for interaction &#8211; it shouldn&#8217;t take over the duties of the other two</p>

<pre><code>use .css() with reservation. better to manipulate the class and IDs 
</code></pre>

<p>.addClass()
.removeClass() //if you do this with no parameters it will strip it of all css classes</p>

<p>hasClass() #=> true /false</p>

<p>do/undo toggle pattern
(&#8216;p:first&#8217;).toggleClass(&#8220;bigger&#8221;):</p>

<p>.show()
.hide()
.toggle()</p>

<p>Document ready waits for the DOM to download then the DOM comes through. When it&#8217;s finished the ready event fires</p>

<p><strong><em>JSON</em></strong> is just a javascript map that gets passed around</p>

<p>DOM and CSS communicate through classes and IDs
use .css() with reservation. better to manipulate the class and IDs thereby delegating the responsbility to the css</p>

<h3>Common queries</h3>

<p>.text() => query text
.html() => queries html
.prepend() => inserts inside the taget object before
.append() => inserts inside the target object after
.before() => add element before selection
.after() => add element after selection
.remove => pulls the target from the DOM
to move an object remove it while storing it in a var and the insert it where you&#8217;d like (remember vars don&#8217;t require &#8217; &#8216;s )</p>

<h3>event bubbling</h3>

<p>JS is triggered by the environment or the user
if someone clicks on a span, the JS engine asks if anyone is listening for that click, or a click on the paragraph or the whole body&#8211; <strong><em>it walked up the DOM tree looking for event handlers</em></strong></p>

<h3>Functions</h3>

<p>function optionalname (parameters) {instructions}</p>

<figure class='code'><figcaption><span>For Instance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">popWarning</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Warning: &quot;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>    
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anonymous Function
:  Just a function that isn&#8217;t given a name
so just function (parameters) {instructions}</p>

<figure class='code'><figcaption><span>Anon e.g. of previous function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Warning: &quot;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>    
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since it has no name this can&#8217;t be called by another function. Instead it is passed in to another function.</p>

<figure class='code'><figcaption><span>Doc Ready</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;The DOM is ready!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Got it&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>This: using this in javascript</h3>

<p>This refers to the current object (usually just a plain DOM element)
Since it&#8217;s not a jquery element, we need to wrap it in $(this)</p>

<figure class='code'><figcaption><span>Using this</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Document ready and Timing</h3>

<p>If wrapped in a $(document).ready() the JS won&#8217;t start looking though the document until every thing has been downloaded.</p>

<figure class='code'><figcaption><span>Named Functions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">increment_weight</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">display</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#gross_weight span#display&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">weight</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">display</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span> <span class="c1">//notice parseInt doesn&#39;t need a $</span>
</span><span class='line'>  <span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span> <span class="o">+</span> <span class="mi">50</span> <span class="p">;</span>
</span><span class='line'>  <span class="nx">display</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">weight</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a#weight_down&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// this code is run when a#weight_down is clicked</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">current_weight</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;span#display&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">//make sure you pull out the number, see the parseInt below</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">current_lbs</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">current_weight</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#display&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">current_lbs</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="c1">// this prevents it from following the link</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hover</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#plane_features li&#39;</span><span class="p">).</span><span class="nx">hover</span><span class="p">(</span>
</span><span class='line'>  <span class="c1">//the hover accepts two functions- the on-hover and off-hover</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(){</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;feature_hover&#39;</span><span class="p">);},</span>
</span><span class='line'>  <span class="c1">//note the &#39;,&#39; at the end of the line</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(){</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;feature_hover&#39;</span><span class="p">)}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be refactored as&#8230;.</p>

<figure class='code'><figcaption><span>Refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#plane_features li a&#39;</span><span class="p">).</span><span class="nx">hover</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(){</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_hover&quot;</span><span class="p">);}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>toggleClass</h3>

<p>Needs to be called on <em>this</em></p>

<p>This is what I had&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#plane_features li a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_selected&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//this is wrong... it needs to be THIS</span>
</span><span class='line'>      <span class="p">};</span> <span class="c1">// missed a closing parens here too</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>The Answer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#plane_features li a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_selected&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>KeyPress</h3>

<p>Put the focus on the entire body, because you aren&#8217;t sure what the focus will be when the key is pressed.</p>

<p>By defining the object with event e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>we get access to the <em>Event Object</em> which helps us with such things as:
- event.which - has a numeric code for the key which is pressed
- event has other attributes like pageX, pageY and target.</p>

<h3>If statement</h3>

<figure class='code'><figcaption><span>IF</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">){</span><span class="nx">instructions</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span> <span class="c1">//why no ; here?</span>
</span></code></pre></td></tr></table></div></figure>


<p>so&#8230;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">102</span><span class="p">){</span><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;fantastic&quot;</span><span class="p">)};</span>
</span><span class='line'><span class="p">}</span> <span class="c1">//why no ; here?</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">keydown</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">83</span><span class="p">){</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li:first&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_selected&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="c1">//still not ; here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>event.stopPropogation</h3>

<p>call .stopPropogation in the handler to prevent the event from bubbling up the DOM tree</p>

<h3>Animation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#altitude&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">(</span><span class="s2">&quot;slow&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// takes &quot;slow&quot;, &quot;fast&quot;, and number in milliseconds as a parameter</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works with hide, the show and toggle functions
.slideUp(&#8220;slow&#8221;)
.slideDown()
.slideToggle()
.fadeOut()
.fadeIn()
.fadeToggle()</p>

<h3>True Ajax</h3>

<p>Sending and receiving information from the server via XMLHttpRequests
- best way to do that is with the .load() function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;span.number&#39;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="err">/flights/824/gate);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This load request will retrieve that address from the server and then inject it into the selected element an it and then the DOM will show that update</p>

<p>Attach a click event listener to the Refresh button that uses ajax to load &#8216;/nearby_flights&#8217; and places the response into the Nearby Flights list. Don&#8217;t forget to prevent the default link behavior.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a#refresh&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;ul#nearby_flights&quot;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="s1">&#39;/nearby_flights&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day11]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/15/haw-day11/"/>
    <updated>2012-08-15T11:34:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/15/haw-day11</id>
    <content type="html"><![CDATA[<h3>return false;</h3>

<p>needed to prevent the confirm box cancel from going ahead with the action anyway&#8230;
I tried <a href="http://stackoverflow.com/questions/1469875/calling-another-jquery-function-if-confirm-is-true">.preventDefault()</a> first but it didn&#8217;t work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day10]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/14/haw-day10/"/>
    <updated>2012-08-14T12:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/14/haw-day10</id>
    <content type="html"><![CDATA[<h3>Code Clean Up</h3>

<p>if they are submitting tag_names (a comma seperated list of tag values) pass that data to tag_names=
but if they are submitting a single tag_name, such as slug pass that to a different method&#8230;</p>

<figure class='code'><figcaption><span>Structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:airbrake_error</span><span class="o">][</span><span class="ss">:tag_slug</span><span class="o">]</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:tag_slug</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span><span class="ss">:airbrake_error</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:tag_slug</span> <span class="o">=&gt;</span> <span class="s2">&quot;Signal&quot;</span><span class="p">},</span> <span class="ss">:tag_slug</span> <span class="o">=&gt;</span> <span class="s2">&quot;Signal&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://teachmetocode.com/articles/ruby-on-rails-nifty-generators/">nifty generators</a></p>

<p>layouts/application.html</p>

<p>total and index errors page are the same except for the buttons</p>

<p>validations on signal and noise</p>

<p>not clearing tags</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forms]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/14/forms/"/>
    <updated>2012-08-14T10:49:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/14/forms</id>
    <content type="html"><![CDATA[<h3>Forms</h3>

<p>forms are a collection of elements
text element cant live by itself
the entire sign up for needs to be submitted to one place
group form elements together and you wrap them in a form</p>

<p>where its going has nothing to do with the information that it is passing in</p>

<p>every web request as a request and a response
a request has to go somewhere&#8211; that&#8217;s urls&#8211; that&#8217;s the address
forms pass along data for where we are going&#8211; go here and tell the server this</p>

<p><a href="htmlhttp://www.w3schools.com/tags/tag_input.asp">Input tags</a></p>

<p><strong><em>the name in the form is the key of the params hash</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#The html 
</span><span class='line'>&lt;input type="text", name="tag"&gt;
</span><span class='line'>#in the controller
</span><span class='line'>@airbrake_error.add_tags(params[:tag])</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#if the form contains </span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">text_field_tag</span><span class="p">(</span><span class="ss">:query</span><span class="p">)</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="c1">#then you would be able to get the value of this field in the controller with params[:query].</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>text_field_tag :name of the tag and then the prefilled value</p></li>
<li><p>f.text_field :comments is NESTED in airbrake error which is represented by f</p></li>
<li><p>The form doesn&#8217;t need a name&#8211; it is the wrapper. The input elements DO need names.</p></li>
</ul>


<p><a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions">Understanding naming parameter conventions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day9]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/13/haw-day9/"/>
    <updated>2012-08-13T10:25:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/13/haw-day9</id>
    <content type="html"><![CDATA[<p><a href="http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid/">Customer Validators on Mongoid</a></p>

<p>HTML and CSS Lessons:
:  A div is block level element commonly used to identify large sections of a website, helping build the layout and design.
:  A span on the other hand, is an inline element commonly used to identify smaller sections of text within a block level element, such as a paragraph.</p>

<p><a href="http://css-tricks.com/the-css-box-model/">The box model:</a>
Every element on a page is a rectangular box.</p>

<p><a href="http://coding.smashingmagazine.com/2007/05/01/css-float-theory-things-you-should-know/">Float Theory:</a></p>

<p><a href="http://learn.shayhowe.com/html-css/building-forms">Building Forms</a>
<a href="http://diveinto.html5doctor.com/">HTML5 Madness</a></p>

<p>state machine
acts as state machine
aasm gem</p>

<p>form_for
fields_for &#8211; to switch the model in the form &#8211; like embedding one forms for into another.</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Accepts nested attributes railscast</a></p>

<p><a href="http://www.tutorialspoint.com/ruby/ruby_operators.htm">Ruby operators</a></p>
]]></content>
  </entry>
  
</feed>

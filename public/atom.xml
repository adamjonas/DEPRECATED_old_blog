<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-08-23T16:23:56-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[routes of the app]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/23/routes-of-the-app/"/>
    <updated>2012-08-23T12:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/23/routes-of-the-app</id>
    <content type="html"><![CDATA[<h3>The plan for the refactor</h3>

<ol>
<li>Multiple errors are being mass assigned a unique tag</li>
<li><p>multiple tags are being assigned to an error</p></li>
<li><p>individual tags are assigned to an individual error</p></li>
<li>individual tags are being removed from an error</li>
</ol>


<p>Invidual Tag and Error</p>

<pre><code>DELETE /errors/id/tags/id - Remove this tag from that error
POST /errors/id/tags/id - Adding this tag to that error
</code></pre>

<p>Multiple Tags to an Error</p>

<pre><code>PUT /errors/id/tags -
</code></pre>

<p>Update an Error</p>

<pre><code># Sure, it could also accept tags tag_tokens=
PUT /errors/id
</code></pre>

<p>Multiple Errors are Assigned One Tag</p>

<pre><code>POST /tags/id/errors
{
    error_ids =&gt; [],
}

Supply a Tag ID in the URL along with an array of error_ids.

DELETE /tags/id/errors
</code></pre>

<h3>Creating the controllers</h3>

<p>tags_controller is responsible for updating tags_controller
the errors controller is responsible for updating errors</p>

<pre><code>the errors/tags controller is responsible for update tags on an error
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day14]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/20/haw-day14/"/>
    <updated>2012-08-20T12:10:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/20/haw-day14</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Debug Method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allVals</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// location.reload()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look up dataTypes &#8211; text, json, script (js), xml, html
This the request type format that we want it in.</p>

<h3>JQuery Token Input</h3>

<p>http://railscasts.com/episodes/258-token-fields
need to make sure the controller responds to .json
-the default has it nested in an @tags key. To remove that we need to map it to its attributes like so&#8211;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@tags</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">attributes</span><span class="p">}</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>prePoulation was an issue as well</p>

<figure class='code'><figcaption><span>Symobol to Proc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">].</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="p">}</span> <span class="c1">#=&gt; [&quot;1&quot;, &quot;2&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To Jquery plugin to gem</p>

<p>query isn&#8217;t searching properly in the tags controller
remove the submit button for tag tokens</p>

<p>f.text_field options for onAdd or on Remove</p>

<p>put the :controller => :error, :action => :resolve_on_airbrake on the fix button
or gather all the errors tagged with fixed and move this task to a background job&#8230;</p>

<p>sidekiq runs on redis
create a worker folder
??needs to be serialized into redis?
sidekiq will run if there is an error: can disable the retry option with an option
pool thread limits the number of jobs that can be run</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day13]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/17/haw-day13/"/>
    <updated>2012-08-17T13:43:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/17/haw-day13</id>
    <content type="html"><![CDATA[<p>Checkboxes</p>

<p>return default goes at the end
preventDefault() goes at the beginning</p>

<p>return false goes at the end</p>

<p>we can import the deploys with client.deploys(&#8216;project#&#8217;).first</p>

<p>You can also pass local variables into partials, making them even more powerful and flexible. For example, you can use this technique to reduce duplication between new and edit pages, while still keeping a bit of distinct content:</p>

<p>new.html.erb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;h1&gt;New zone&lt;/h1&gt;
</span><span class='line'>&lt;%= error_messages_for :zone %&gt;
</span><span class='line'>&lt;%= render :partial =&gt; "form", :locals =&gt; { :zone =&gt; @zone } %&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Specifying a class in a link_to</h3>

<figure class='code'><figcaption><span>Using Twitter Bootstrap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn-group pull-right&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%=link_to &quot; Refresh Errors&quot;, errors_import_path, :class =</span><span class="o">&gt;</span> <span class="s1">&#39;btn icon-refresh btn-success&#39;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day12]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/16/haw-day12/"/>
    <updated>2012-08-16T10:19:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/16/haw-day12</id>
    <content type="html"><![CDATA[<p>js buttons on tag show pages
fix checkboxes/mass assigning tags
deploy- avi</p>

<h3>respond_to</h3>

<p>This is basically a glorified case statement&#8230;</p>

<p>if no action is specified the default is the action of the namespace</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tag</span>
</span><span class='line'>    <span class="c1">#some code</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span><span class="n">redirect_to</span> <span class="ss">:back</span><span class="p">}</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it looks for tag.js as the default&#8230;</p>

<p>BUG:
tell firefox not to autocomplete</p>

<p>checkboxes
get all the values
submit to server</p>

<p>loop through the elements
gather all the values (which are the ids)
find errors by ids
push in tag name signal</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery-air-intermediate]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-intermediate/"/>
    <updated>2012-08-15T15:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-intermediate</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Retriving the href</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tabs ul li:last a&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#tabs ul li:last a&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;flights&#39;</span><span class="p">)</span> <span class="c1">//this would be from an html5 data tag</span>
</span></code></pre></td></tr></table></div></figure>


<p>event delegation-
it can be method chained and performs faster than live
$(document).delegate</p>

<p><strong><em>Don&#8217;t forget the brackets on the selector!!</em></strong></p>

<h3>eq selector</h3>

<p>eq(element#) - a selector</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ol.econ­omy-class li.ro­w:eq(1) ol li:eq­(3)&#39;</span><span class="p">).</span><span class="nx">html</span><span class="err">­</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ol.econ­omy-class li.ro­w:eq(1) ol li:eq­(3) a&#39;</span><span class="p">).</span><span class="nx">a</span><span class="err">­</span><span class="nx">ttr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="err">­</span><span class="p">);</span>
</span><span class='line'><span class="c1">// to access the href you need to specify the a tag</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ol.econ­omy-class li.ro­w:eq(1) ol li:eq­(3) a&#39;</span><span class="p">).</span><span class="nx">d</span><span class="err">­</span><span class="nx">ata</span><span class="p">(</span><span class="s1">&#39;seat&#39;</span><span class="err">­</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.seating-chart a.available&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a.available&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;selected&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;selected&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bind Element</h3>

<p>jQuery bind() function is used to attach an event handler to elements, while the unbind() is used to detached an existing event handler from elements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.seating-chart a.available&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">click</span><span class="o">:</span> <span class="nx">selectSeat</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows you to list multiple events for each element. NOTE the different syntax, this becomes like a MAP now (very similar to a hash)</p>

<h3>Unbind Element</h3>

<p>Let’s imagine the following scenario&#8230;
The user clicks on a “vote” button.
Some AJAX calls are performed.
After a successful AJAX call you setup a cookie to deny further votes from this machine.
So one possible solution is to unbind the click event&#8230;</p>

<p>Have something happen on a click event, but only once! Unbind the click handler after the element has been clicked once.</p>

<figure class='code'><figcaption><span>Once and only once&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#my-selector&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'>       <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Clicked and unbound!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Jquery Air</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">selectSeat</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.selected&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;selected&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;selected&#39;</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectSeat</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#seatSelected&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;seat&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#confirm-seat&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.seating-chart li a.available&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">selectSeat</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Live Event</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a.confirm-upgrade&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">confirmUpgrade</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bind binds to the event one time
Live will look for that event now or in the future and will catch it and call the right function</p>

<h3>Delegate</h3>

<figure class='code'><figcaption><span>Delegate > live</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#flights a&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectFlight</span><span class="p">);</span>
</span><span class='line'><span class="c1">// is the same as</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;#flights a&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectFlight</span><span class="p">);</span>
</span><span class='line'><span class="c1">// this is too general. It would be better if you just checked inside a specific element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="err">#</span><span class="nx">tabs</span> <span class="nx">div</span><span class="p">).</span><span class="nx">delegate</span><span class="p">(</span><span class="s2">&quot;#flights a&quot;</span><span class="p">,</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="nx">selectFlight</span><span class="p">);</span>
</span><span class='line'><span class="c1">// check inside the element rather than the entire page</span>
</span></code></pre></td></tr></table></div></figure>


<p>Delegate can be method chained and it is more performant</p>

<h3>Ajax</h3>

<p>Video2
$.get and $.ajax are alternatives. $.ajax is slightly more
cache: false option ensures that your browser won&#8217;t cache the html for every request
Error handling
Loading div - call beforeSend the AJAX invoked then hide it in the complete:
If it returns successfully - success: and if not - error:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery-air-beginner]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-beginner/"/>
    <updated>2012-08-15T15:34:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/15/jquery-air-beginner</id>
    <content type="html"><![CDATA[<p>The DOM is a node structure or tree
has HTML tag, head tag, title child, body tag, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find all h1s</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find all ps</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p#final&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find the paragraph with ID final</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//these return arrays with the elements inside</span>
</span><span class='line'><span class="c1">//if the search doesn&#39;t return anything, then it returns an empty array []</span>
</span><span class='line'><span class="c1">// be careful- this empty array is considered truthy</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1, p.plan&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//returns an array with both elements-- one string, seperated by commas</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">,</span> <span class="s2">&quot;p.plan&quot;</span><span class="p">)</span> <span class="c1">// THIS WON&#39;T WORK</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p:first&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//returns the first p it encounters</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p.first&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//looks for the p.first node</span>
</span></code></pre></td></tr></table></div></figure>


<p>To select children elements use a space between the parent and child selector&#8230;
For example, to select all A tags that are children of a tag with id = foo, you&#8217;d do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#foo a&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//in the exercise</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul#first_class li&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Select all the rows and seats in first class, everything with an &lt;LI&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can go as many levels deep as you want when selecting children</li>
<li>For example, to select all <a> tags that have two <div> parents, you&#8217;d do this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div div a&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//in the exercise:</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul li ul li&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Find all the window seats (a & d in first class, and a & f in economy)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li.a, ul#first_class li.d, ul#economy_class li.f&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>can pass in a map which is like a hash in ruby
key are seperated from values by colons</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">belts</span> <span class="o">=</span> <span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Turn on the fasten seatbelt sign?&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Seatbelts: &#39;</span> <span class="o">+</span> <span class="nx">belts</span><span class="p">);</span>
</span><span class='line'><span class="c1">//can string multiple calls together like above</span>
</span></code></pre></td></tr></table></div></figure>


<p>having trouble with the syntax of closing the parentheses.</p>

<h3>Why JS?</h3>

<p>HTML is for structure
CSS is for presentation
Javascript is for interaction &#8211; it shouldn&#8217;t take over the duties of the other two</p>

<pre><code>use .css() with reservation. better to manipulate the class and IDs 
</code></pre>

<p>.addClass()
.removeClass() //if you do this with no parameters it will strip it of all css classes</p>

<p>hasClass() #=> true /false</p>

<p>do/undo toggle pattern
(&#8216;p:first&#8217;).toggleClass(&#8220;bigger&#8221;):</p>

<p>.show()
.hide()
.toggle()</p>

<p>Document ready waits for the DOM to download then the DOM comes through. When it&#8217;s finished the ready event fires</p>

<p><strong><em>JSON</em></strong> is just a javascript map that gets passed around</p>

<p>DOM and CSS communicate through classes and IDs
use .css() with reservation. better to manipulate the class and IDs thereby delegating the responsbility to the css</p>

<h3>Common queries</h3>

<p>.text() => query text
.html() => queries html
.prepend() => inserts inside the taget object before
.append() => inserts inside the target object after
.before() => add element before selection
.after() => add element after selection
.remove => pulls the target from the DOM
to move an object remove it while storing it in a var and the insert it where you&#8217;d like (remember vars don&#8217;t require &#8217; &#8216;s )</p>

<h3>event bubbling</h3>

<p>JS is triggered by the environment or the user
if someone clicks on a span, the JS engine asks if anyone is listening for that click, or a click on the paragraph or the whole body&#8211; <strong><em>it walked up the DOM tree looking for event handlers</em></strong></p>

<h3>Functions</h3>

<p>function optionalname (parameters) {instructions}</p>

<figure class='code'><figcaption><span>For Instance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">popWarning</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Warning: &quot;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>    
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anonymous Function
:  Just a function that isn&#8217;t given a name
so just function (parameters) {instructions}</p>

<figure class='code'><figcaption><span>Anon e.g. of previous function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Warning: &quot;</span> <span class="o">+</span> <span class="nx">message</span><span class="p">);</span>    
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since it has no name this can&#8217;t be called by another function. Instead it is passed in to another function.</p>

<figure class='code'><figcaption><span>Doc Ready</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;The DOM is ready!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Got it&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>This: using this in javascript</h3>

<p>This refers to the current object (usually just a plain DOM element)
Since it&#8217;s not a jquery element, we need to wrap it in $(this)</p>

<figure class='code'><figcaption><span>Using this</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Document ready and Timing</h3>

<p>If wrapped in a $(document).ready() the JS won&#8217;t start looking though the document until every thing has been downloaded.</p>

<figure class='code'><figcaption><span>Named Functions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">increment_weight</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">display</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#gross_weight span#display&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">weight</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">display</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span> <span class="c1">//notice parseInt doesn&#39;t need a $</span>
</span><span class='line'>  <span class="nx">weight</span> <span class="o">=</span> <span class="nx">weight</span> <span class="o">+</span> <span class="mi">50</span> <span class="p">;</span>
</span><span class='line'>  <span class="nx">display</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">weight</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a#weight_down&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// this code is run when a#weight_down is clicked</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">current_weight</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;span#display&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">//make sure you pull out the number, see the parseInt below</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">current_lbs</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">current_weight</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#display&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">current_lbs</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="c1">// this prevents it from following the link</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hover</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#plane_features li&#39;</span><span class="p">).</span><span class="nx">hover</span><span class="p">(</span>
</span><span class='line'>  <span class="c1">//the hover accepts two functions- the on-hover and off-hover</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(){</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;feature_hover&#39;</span><span class="p">);},</span>
</span><span class='line'>  <span class="c1">//note the &#39;,&#39; at the end of the line</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(){</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;feature_hover&#39;</span><span class="p">)}</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be refactored as&#8230;.</p>

<figure class='code'><figcaption><span>Refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#plane_features li a&#39;</span><span class="p">).</span><span class="nx">hover</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(){</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_hover&quot;</span><span class="p">);}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>toggleClass</h3>

<p>Needs to be called on <em>this</em></p>

<p>This is what I had&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#plane_features li a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_selected&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//this is wrong... it needs to be THIS</span>
</span><span class='line'>      <span class="p">};</span> <span class="c1">// missed a closing parens here too</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>The Answer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#plane_features li a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_selected&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>KeyPress</h3>

<p>Put the focus on the entire body, because you aren&#8217;t sure what the focus will be when the key is pressed.</p>

<p>By defining the object with event e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>we get access to the <em>Event Object</em> which helps us with such things as:
- event.which - has a numeric code for the key which is pressed
- event has other attributes like pageX, pageY and target.</p>

<h3>If statement</h3>

<figure class='code'><figcaption><span>IF</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">){</span><span class="nx">instructions</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span> <span class="c1">//why no ; here?</span>
</span></code></pre></td></tr></table></div></figure>


<p>so&#8230;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">102</span><span class="p">){</span><span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;fantastic&quot;</span><span class="p">)};</span>
</span><span class='line'><span class="p">}</span> <span class="c1">//why no ; here?</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">keydown</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">which</span> <span class="o">==</span> <span class="mi">83</span><span class="p">){</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li:first&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;feature_selected&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="c1">//still not ; here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>event.stopPropogation</h3>

<p>call .stopPropogation in the handler to prevent the event from bubbling up the DOM tree</p>

<h3>Animation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div#altitude&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">(</span><span class="s2">&quot;slow&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// takes &quot;slow&quot;, &quot;fast&quot;, and number in milliseconds as a parameter</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works with hide, the show and toggle functions
.slideUp(&#8220;slow&#8221;)
.slideDown()
.slideToggle()
.fadeOut()
.fadeIn()
.fadeToggle()</p>

<h3>True Ajax</h3>

<p>Sending and receiving information from the server via XMLHttpRequests
- best way to do that is with the .load() function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;span.number&#39;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="err">/flights/824/gate);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This load request will retrieve that address from the server and then inject it into the selected element an it and then the DOM will show that update</p>

<p>Attach a click event listener to the Refresh button that uses ajax to load &#8216;/nearby_flights&#8217; and places the response into the Nearby Flights list. Don&#8217;t forget to prevent the default link behavior.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a#refresh&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;ul#nearby_flights&quot;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="s1">&#39;/nearby_flights&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day11]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/15/haw-day11/"/>
    <updated>2012-08-15T11:34:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/15/haw-day11</id>
    <content type="html"><![CDATA[<h3>return false;</h3>

<p>needed to prevent the confirm box cancel from going ahead with the action anyway&#8230;
I tried <a href="http://stackoverflow.com/questions/1469875/calling-another-jquery-function-if-confirm-is-true">.preventDefault()</a> first but it didn&#8217;t work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day10]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/14/haw-day10/"/>
    <updated>2012-08-14T12:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/14/haw-day10</id>
    <content type="html"><![CDATA[<h3>Code Clean Up</h3>

<p>if they are submitting tag_names (a comma seperated list of tag values) pass that data to tag_names=
but if they are submitting a single tag_name, such as slug pass that to a different method&#8230;</p>

<figure class='code'><figcaption><span>Structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:airbrake_error</span><span class="o">][</span><span class="ss">:tag_slug</span><span class="o">]</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:tag_slug</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span><span class="ss">:airbrake_error</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:tag_slug</span> <span class="o">=&gt;</span> <span class="s2">&quot;Signal&quot;</span><span class="p">},</span> <span class="ss">:tag_slug</span> <span class="o">=&gt;</span> <span class="s2">&quot;Signal&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://teachmetocode.com/articles/ruby-on-rails-nifty-generators/">nifty generators</a></p>

<p>layouts/application.html</p>

<p>total and index errors page are the same except for the buttons</p>

<p>validations on signal and noise</p>

<p>not clearing tags</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forms]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/14/forms/"/>
    <updated>2012-08-14T10:49:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/14/forms</id>
    <content type="html"><![CDATA[<h3>Forms</h3>

<p>forms are a collection of elements
text element cant live by itself
the entire sign up for needs to be submitted to one place
group form elements together and you wrap them in a form</p>

<p>where its going has nothing to do with the information that it is passing in</p>

<p>every web request as a request and a response
a request has to go somewhere&#8211; that&#8217;s urls&#8211; that&#8217;s the address
forms pass along data for where we are going&#8211; go here and tell the server this</p>

<p><a href="htmlhttp://www.w3schools.com/tags/tag_input.asp">Input tags</a></p>

<p><strong><em>the name in the form is the key of the params hash</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#The html 
</span><span class='line'>&lt;input type="text", name="tag"&gt;
</span><span class='line'>#in the controller
</span><span class='line'>@airbrake_error.add_tags(params[:tag])</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#if the form contains </span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">text_field_tag</span><span class="p">(</span><span class="ss">:query</span><span class="p">)</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="c1">#then you would be able to get the value of this field in the controller with params[:query].</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>text_field_tag :name of the tag and then the prefilled value</p></li>
<li><p>f.text_field :comments is NESTED in airbrake error which is represented by f</p></li>
<li><p>The form doesn&#8217;t need a name&#8211; it is the wrapper. The input elements DO need names.</p></li>
</ul>


<p><a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions">Understanding naming parameter conventions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day9]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/13/haw-day9/"/>
    <updated>2012-08-13T10:25:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/13/haw-day9</id>
    <content type="html"><![CDATA[<p><a href="http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid/">Customer Validators on Mongoid</a></p>

<p>HTML and CSS Lessons:
:  A div is block level element commonly used to identify large sections of a website, helping build the layout and design.
:  A span on the other hand, is an inline element commonly used to identify smaller sections of text within a block level element, such as a paragraph.</p>

<p><a href="http://css-tricks.com/the-css-box-model/">The box model:</a>
Every element on a page is a rectangular box.</p>

<p><a href="http://coding.smashingmagazine.com/2007/05/01/css-float-theory-things-you-should-know/">Float Theory:</a></p>

<p><a href="http://learn.shayhowe.com/html-css/building-forms">Building Forms</a>
<a href="http://diveinto.html5doctor.com/">HTML5 Madness</a></p>

<p>state machine
acts as state machine
aasm gem</p>

<p>form_for
fields_for &#8211; to switch the model in the form &#8211; like embedding one forms for into another.</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Accepts nested attributes railscast</a></p>

<p><a href="http://www.tutorialspoint.com/ruby/ruby_operators.htm">Ruby operators</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day8]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/10/haw-day8/"/>
    <updated>2012-08-10T11:45:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/10/haw-day8</id>
    <content type="html"><![CDATA[<p>To run the seed task in heroku staging&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku run rake db:seed --remote staging</span></code></pre></td></tr></table></div></figure>


<p><a href="https://devcenter.heroku.com/articles/multiple-environments">staging environment set-up</a>
<a href="http://mikewilliamson.wordpress.com/2010/07/02/my-git-cheatsheet/">other clues to creating a staging set up on heroku</a></p>

<p><a href="http://stackoverflow.com/questions/8298389/using-tablesorter-how-can-i-format-a-column-after-the-sort-is-applied">sorting the date properly using hidden fields with table sorter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day7]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/09/haw-day7/"/>
    <updated>2012-08-09T10:11:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/09/haw-day7</id>
    <content type="html"><![CDATA[<p>Goals:
add text field to all tags index page
figure out why fix button doesn&#8217;t work on errors index and why none work on show pages</p>

<p>Way to call a method in the view:</p>

<p>action in the controller
a route that maps to the to the controller and action
can i just not call &lt;% import %> or something?
ajax can ping errors/import</p>

<p>progress bars for import are in the</p>

<p><a href="http://ruby.zigzo.com/2011/10/02/flash-messages-twitters-bootstrap-css-framework/">flash message:</a>
In the helpers/application_helper.rb</p>

<p>in the layouts/application.html.erb</p>

<figure class='code'><figcaption><span>Refresh Errors</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span> <span class="o">&lt;%=</span><span class="n">link_to</span> <span class="s2">&quot;Refresh Errors&quot;</span><span class="p">,</span> <span class="n">errors_import_path</span><span class="sx">%&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We put the link_to inside the a class. But it seems to that the A tag is open</p>

<figure class='code'><figcaption><span>Adding flash messages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">flash_class</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">level</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:notice</span> <span class="k">then</span> <span class="s1">&#39;info&#39;</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:error</span> <span class="k">then</span> <span class="s1">&#39;error&#39;</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:alert</span> <span class="k">then</span> <span class="s1">&#39;warning&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>delayed job - backend server
<em>if it takes a variable it uses a colon and needs are parameter&#8230;</em>
pop up and alert box</p>

<figure class='code'><figcaption><span>Button:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span> <span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Refresh Errors&quot;</span><span class="p">,</span> <span class="s2">&quot;errors_import_path&quot;</span> <span class="sx">%&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="c1">#this is the path that is the abstraction of the path in rakeroutes</span>
</span></code></pre></td></tr></table></div></figure>


<p>attr_accessbile is ignored in mongoid</p>

<p>document
in the the view we added</p>

<p>LESSONS:
In the controller I was calling trying to find the Tag by ID. The correct way is below&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_by_slug</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Routes</h3>

<p>We always need a route when we are calling an action&#8230;
So if there is a dynamic variable (like ID&#8211; always indicated with a colon) in the route, it needs a paramater passed in!</p>

<p>DO NOT Hardcode, use the alias name. Sometimes this means that you need to name it</p>

<figure class='code'><figcaption><span>Use the :as to name the route path</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;errors/:id/tag_general&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;errors#tag_general&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="s1">&#39;tag_general_error&#39;</span>
</span><span class='line'><span class="c1">#now this can be referred to as the tag_general_error_path</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>adding images to octopress</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">img</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">claudiolassala</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">wordpress</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mi">2011</span><span class="o">/</span><span class="mo">05</span><span class="o">/</span><span class="n">routes</span><span class="o">.</span><span class="n">png</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>redrirect_to :back</em></strong> brings you back to the original page. This was useful for destroying a tag name and then redirecting to the tag index.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day6]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/08/haw-day6/"/>
    <updated>2012-08-08T11:47:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/08/haw-day6</id>
    <content type="html"><![CDATA[<p>Coffee Script
<a href="http://railscasts.com/episodes/267-coffeescript-basics">Rails Cast</a></p>

<p>ISSUES:
Ran into problems with a conflict bewtween the .js table sorter and checkbox select all .js
??Does it have to be loaded before the html table is created?</p>

<p>Checkboxes always use input tags</p>

<h3>Psudo Selectors:</h3>

<p>p:first - first paragrapah
input:checkbox - all checkboxes
input:text_field - all text fields
a:hidden - all hidden links</p>

<p>.attr( attributeName )
- Returns: String
- Description: Get the value of an attribute for the first element in the set of matched elements.</p>

<p>jquery token input - when you aren&#8217;t editing the tag
- when you click in that box we have autocomplete
- bulk assign -</p>

<ul>
<li>resolve the error in airbrake from our app</li>
<li>allow comments</li>
<li>resolved or fixed button</li>
</ul>


<p>dont allow signal and noise
capture info on when the last deploy was&#8230;
if the deploy was more recent than the fixed tag than</p>

<p>refresh error button to import errors &#8211; put notice on success or failure to import
main errors page a drop down filter based on tag</p>

<p>FEEDBACK:
button refreshes import immedately
show tags page&#8230; with edits
comment field added for each error
formatting the error message
fix was deployed with button - shows the fixed errors as repeats after a deploy
mutually exclusive signal and noise</p>

<p>filters as multi select
stats on front page
-!total error counts
-!avg errors per day
last week to this week -snapshot</p>

<p>v2:
custom tags in bulk
setting up filters - if front end bug assignment</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/07/jquery/"/>
    <updated>2012-08-07T11:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/07/jquery</id>
    <content type="html"><![CDATA[<h3>The DOM:</h3>

<p>the web browser remembers the HTML tags, their attributes, and the order in which they appear in the file—this representation of the page is called the Document Object Model, or DOM for short. (js and jquery the missing manual, p127)</p>

<p>Repel -</p>

<p>everything with remote true should have their submit button hijacked and exectured with ajax
jquery is to rails what ruby is js</p>

<figure class='code'><figcaption><span>src</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">&quot;URL&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>[XHR](</span><a href='https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest?redirectlocale=en-US&redirectslug=XMLHttpRequest)'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//To create an instance of XMLHttpRequest, simply do this:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>xhr- used to be just xml</p>

<p>READ: <a href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications">ajax jesse james garrett</a>
AJAX = Asynchronous JavaScript + XML
Ajax incorporates:
- standards-based presentation using XHTML and CSS;
- dynamic display and interaction using the Document Object Model;
- data interchange and manipulation using XML and XSLT;
- asynchronous data retrieval using XMLHttpRequest;
- and JavaScript binding everything together.</p>

<p>adaptive path
elements of user experience</p>

<p>js is all an event model</p>

<p>predictable DOM</p>

<p><a href="http://css-tricks.com/the-difference-between-id-and-class/">###Difference between li/#b and li.b?###</a></p>

<p>/# => ids &#8211;> IDs are unique
- Each element can have only one ID
- Each page can have only one element with that ID</p>

<p>dot b => class names &#8211;> are NOT unique
- You can use the same class on multiple elements.
- You can use multiple classes on the same element.</p>

<h3>Crazy Selector for our app</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;tr#error_&lt;%error.id %&gt; input:submit[value=&#39;Noise&#39;]&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">confirm</span><span class="p">(</span><span class="s2">&quot;Are you sure?&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// input:submit[value=&#39;Noise&#39;]&quot; are you kidding me?</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TODO]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/07/todo/"/>
    <updated>2012-08-07T10:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/07/todo</id>
    <content type="html"><![CDATA[<p>lambdas, procs
   <a href="http://www.youtube.com/watch?v=VBC-G6hahWA&amp;feature=related">http://www.youtube.com/watch?v=VBC-G6hahWA&amp;feature=related</a>
   <a href="http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/">http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/</a></p>

<p>inject
<a href="http://blog.jayfields.com/2008/03/ruby-inject.html">http://blog.jayfields.com/2008/03/ruby-inject.html</a>
<a href="http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/">http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/</a></p>

<p>need to understand select better</p>

<p>namespacing==></p>

<p>class Dog
  Species = [&#8220;Poodle&#8221;]
 end</p>

<p> Dog::Species
 Species is a Constant within the Dog class. Species could be a class it could be a module, but it is a child of Dog.</p>

<p> make list of common many to many relationships, one to many relationships</p>

<p>active resource versus active record
active record is an ORM- it wraps the database
active resource wraps the restful web app with Ruby classes and work with them like Active Record models.</p>

<p>mass assignment and the .build(params[:user_name])</p>

<p>Coffee script</p>

<p>HTML &amp; CSS reading</p>

<p><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">javascript the good parts</a></p>

<p>Ternary (shortened if statement) Syntax
Ternary syntax is the same in Ruby as most languages. The following sample will print “The variable is 10″ if var is equal to 10. Otherwise it will print “The variable is Not 10″.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">print</span> <span class="err">“</span><span class="no">The</span> <span class="n">variable</span> <span class="n">is</span> <span class="err">”</span> <span class="o">+</span> <span class="p">(</span><span class="n">var</span> <span class="o">==</span> <span class="mi">10</span> <span class="o">?</span> <span class="err">“</span><span class="mi">10</span><span class="err">″</span> <span class="p">:</span> <span class="err">“</span><span class="no">Not</span> <span class="mi">10</span><span class="err">″</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day5]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/06/haw-day5/"/>
    <updated>2012-08-06T10:23:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/06/haw-day5</id>
    <content type="html"><![CDATA[<p>GOALS:
Refactor code, figure out the jquery ajax checkboxes.
ship v1 by the end of the day</p>

<p><a href="http://khelll.com/blog/ruby/ruby-dynamic-method-calling/">send method</a>
<a href="http://philcrissman.com/2009/06/26/rubys-objectsend-can-call-private-and-protected-methods/">send method to call private method</a></p>

<figure class='code'><figcaption><span>Code that finally worked&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;action&quot;</span><span class="p">,</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;controller&quot;</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_created_at&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:error_class</span> <span class="o">=&gt;</span> <span class="s2">&quot;error_class&quot;</span><span class="p">,</span> <span class="ss">:error_message</span> <span class="o">=&gt;</span> <span class="s2">&quot;error_message&quot;</span><span class="p">,</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="s2">&quot;file&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_id&quot;</span><span class="p">,</span> <span class="ss">:line_number</span> <span class="o">=&gt;</span> <span class="s2">&quot;line_number&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:most_recent_notice_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_most_recent_notice_at&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:notice_hash</span> <span class="o">=&gt;</span> <span class="s2">&quot;notice_hash&quot;</span><span class="p">,</span> <span class="ss">:notices_count</span> <span class="o">=&gt;</span> <span class="s2">&quot;notices_count&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:project_id</span> <span class="o">=&gt;</span> <span class="s2">&quot;project_id&quot;</span><span class="p">,</span> <span class="ss">:rails_env</span> <span class="o">=&gt;</span> <span class="s2">&quot;rails_env&quot;</span><span class="p">,</span> <span class="ss">:resolved</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_resolved&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:search_index_me</span> <span class="o">=&gt;</span> <span class="s2">&quot;search_index_me&quot;</span><span class="p">,</span> <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_updated_at&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">errors</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span> <span class="c1">#each error is a hash</span>
</span><span class='line'>      <span class="n">airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span> <span class="c1">#this needs to be outside the following loop or it will create a new object during every loop...</span>
</span><span class='line'>      <span class="n">actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">airbrake_action</span><span class="p">,</span> <span class="n">our_action</span><span class="o">|</span> <span class="c1">#aa is a sym key, oa is a string value</span>
</span><span class='line'>       <span class="n">airbrake_error</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">our_action</span><span class="si">}</span><span class="s2">=&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">error</span><span class="o">[</span><span class="n">airbrake_action</span><span class="o">]</span><span class="p">)</span><span class="c1"># SEND method here</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span> <span class="c1">#see below</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Other use of send&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_updater</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@airbrake_errors</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updater_actions</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;notices_count&quot;</span><span class="p">,</span> <span class="s2">&quot;action&quot;</span><span class="p">,</span> <span class="s2">&quot;controller&quot;</span><span class="p">,</span> <span class="s2">&quot;error_class&quot;</span><span class="p">,</span> <span class="s2">&quot;file&quot;</span><span class="p">,</span> <span class="s2">&quot;line_number&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s2">&quot;airbrake_most_recent_notice_at&quot;</span><span class="p">,</span> <span class="s2">&quot;notice_hash&quot;</span><span class="p">,</span> <span class="s2">&quot;airbrake_resolved&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s2">&quot;airbrake_updated_at&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@airbrake_errors</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">airbrake_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">airbrake_id</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">original_error</span> <span class="o">=</span> <span class="vi">@airbrake_errors</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">airbrake_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">airbrake_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">updater_actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span>
</span><span class='line'>          <span class="n">original_error</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">action</span><span class="si">}</span><span class="s2">=&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="nb">self</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">action</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>          <span class="n">original_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>TODO:
inject method</p>

<p>Per Dave:
-one form that is ignore, one that signal, one that is the tags
-remote true- a flag that going to submit the form via ajax</p>

<p><a href="http://guides.rubyonrails.org/form_helpers.html">Remote True:</a>
Unlike other forms making an asynchronous file upload form is not as simple as providing form_for with :remote => true. With an Ajax form the serialization is done by JavaScript running inside the browser and since JavaScript cannot read files from your hard drive the file cannot be uploaded. The most common workaround is to use an invisible iframe that serves as the target for the form submission.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day4]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/03/haw-day4/"/>
    <updated>2012-08-03T16:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/03/haw-day4</id>
    <content type="html"><![CDATA[<p>Error:
&#8220;SystemStackError: stack level too deep&#8221;
This means that you have entered an infinite loop. e.g. you have called something on itself.</p>

<p>Need to understand inject&#8230;
http://blog.jayfields.com/2008/03/ruby-inject.html</p>

<p>struggling with this&#8230;</p>

<figure class='code'><figcaption><span>Trying to make this work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="n">action</span><span class="p">,</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="n">controller</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_created_at</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:error_class</span> <span class="o">=&gt;</span> <span class="n">error_class</span><span class="p">,</span> <span class="ss">:error_message</span> <span class="o">=&gt;</span> <span class="n">error_message</span><span class="p">,</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">airbrake_id</span><span class="p">,</span> <span class="ss">:line_number</span> <span class="o">=&gt;</span> <span class="n">line_number</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:most_recent_notice_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_most_recent_notice_at</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:notice_hash</span> <span class="o">=&gt;</span> <span class="n">notice_hash</span><span class="p">,</span> <span class="ss">:notices_count</span> <span class="o">=&gt;</span> <span class="n">notices_count</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:project_id</span> <span class="o">=&gt;</span> <span class="n">project_id</span><span class="p">,</span> <span class="ss">:rails_env</span> <span class="o">=&gt;</span> <span class="n">rails_env</span><span class="p">,</span> <span class="ss">:resolved</span> <span class="o">=&gt;</span> <span class="n">airbrake_resolved</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:search_index_me</span> <span class="o">=&gt;</span> <span class="n">search_index_me</span><span class="p">,</span> <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_updated_at</span><span class="o">]</span>
</span><span class='line'>    <span class="n">actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">airbrake_action</span><span class="p">,</span> <span class="n">our_action</span><span class="o">|</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">our_action</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="n">airbrake_action</span><span class="o">]</span>
</span><span class='line'>        <span class="n">airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span>
</span><span class='line'>        <span class="n">airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>This is the original&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:action</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">controller</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:controller</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_created_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:created_at</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">error_class</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:error_class</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">error_message</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:error_message</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">file</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_id</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">line_number</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:line_number</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_most_recent_notice_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:most_recent_notice_at</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">notice_hash</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:notice_hash</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">notices_count</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:notices_count</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">project_id</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:project_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">rails_env</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:rails_env</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_resolved</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:resolved</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">search_index_me</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:search_index_me</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_updated_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:updated_at</span><span class="o">]</span>
</span><span class='line'>        <span class="c1"># airbrake.send(&quot;#{key}=&quot;, value)</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3/"/>
    <updated>2012-08-02T10:55:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3</id>
    <content type="html"><![CDATA[<p>Rolled back git using the sha</p>

<p>used the fresh method to collect the fresh errors in an array. then we used the flatten method to un-nest the array to acccess the objects.</p>

<p>changed the interface to show the airbrake IDs so that we can differentiate the errors with the same name</p>

<p>p291
form_tag issues an HTTP request that replaces all the content in the browser.
form_remote_tag issues an HTTP request, but processes the results with JavaScript
rather than having the browser render them directly.</p>

<p>nav
filtering
all errors inbox
checkboxes(which don&#8217;t work but do display) - have the route for signal</p>

<p>event driven programming</p>

<p>dom fields</p>

<p>cmd option i - to open the</p>

<p>collect all values
submit the request, submit the values manually
raise params.inspect</p>

<p>GOAL OF THE IMPORTER:
import a new set of airbrake errors</p>

<p>if the id is NOT uniq then update the attributes but do not display or save in mongoid memory</p>

<p>identify what is uniq with the present method
if uniq ignore
if NOT uniq then update attributes
makes sure the newly imported error will not save &#8211;> validation should take care of this</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day2]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/01/haw-day2/"/>
    <updated>2012-08-01T11:31:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/01/haw-day2</id>
    <content type="html"><![CDATA[<p>builder pattern versus the inheritance pattern</p>

<p>no diff between slugs and permalinks</p>

<p>To install a gem from a fork</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'</span></code></pre></td></tr></table></div></figure>


<p>add validation to prevent slug nil</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD
</span><span class='line'># could also reset to a specific point in time
</span><span class='line'>git reset --hard &lt;sha&gt;</span></code></pre></td></tr></table></div></figure>


<p>HEAD is the current version</p>

<p>delete local branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -d initial-error-tagging
</span><span class='line'>#to delete the remote...
</span><span class='line'>♕ git push origin :initial-error-tagging</span></code></pre></td></tr></table></div></figure>


<p>GOALS:
1. normalize the tag_names DONE</p>

<ol>
<li>should be able to mark the error as ignore and rerun the importer and when it&#8217;s reimported it should still be marked as ignored&#8230;.</li>
<li>inbox not show you errors with tag ignore</li>
<li>if we reimport these errors they need to maintain their tags (is this )
does the count update?</li>
</ol>


<p> look into scopes&#8211; need to filter ignore off the index
read about named scopes on mongoid
http://mongoid.org/en/mongoid/docs/querying.html#scoping
desired code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">not_ignored</span>
</span><span class='line'><span class="c1">#or better yet</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">fresh</span> <span class="c1"># =&gt; to get a list of errors that haven&#39;t been ignored.</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>li needs to build a show page of each error&#8217;s attributes</li>
</ol>


<p>NOTES:
Scoping - so scoping is like a filter
<a href="http://mongoid.org/en/mongoid/docs/querying.html#scoping">Mongoid scoping macro</a></p>

<figure class='code'><figcaption><span>Filtering/Scope</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tag</span><span class="o">.</span><span class="n">not_in</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;fresh&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:airbrake_errors</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">airbrake_errors</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autocomplete for tags:
<a href="http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid">http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid</a></p>

<p><a href="http://railsforum.com/viewtopic.php?id=2151">Select all checkboxes</a>
<a href="http://www.rorexperts.com/select-and-unselect-all-checkboxes-by-selecting-single-check-t1614.html">or</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[haw-day1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1/"/>
    <updated>2012-07-31T15:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1</id>
    <content type="html"><![CDATA[<h3>Deploying to Heroku</h3>

<p>Make sure to modify the <a href="https://devcenter.heroku.com/articles/mongohq#mongoid">mongoid.yml file</a> to config the production environment.</p>

<p><strong><em>2 major issues with the mongoid deploy:</em></strong></p>

<ol>
<li>Issue with ruby version was the first error we encountered&#8230; need to keep in that <em>mongoid only supports 1.9.3</em> this ended up being a big issue.</li>
</ol>


<p>In &#8211;> heroku logs &#8211;tail:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActionView::Template::Error (undefined method `[]' for nil:NilClass):
</span><span class='line'> 11:   &lt;/thead&gt;  
</span><span class='line'> 10:     &lt;/tr&gt;
</span><span class='line'> 12: 
</span><span class='line'> 13:   &lt;% @airbrake_errors.each_with_index do |a_e, index| %&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The other issue was to reconfigure the setting below from false to true as the</li>
</ol>


<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">ActionView</span><span class="o">::</span><span class="no">Template</span><span class="o">::</span><span class="no">Error</span> <span class="p">(</span><span class="n">images</span><span class="o">/</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="mi">144</span><span class="n">x144</span><span class="o">-</span><span class="n">precomposed</span><span class="o">.</span><span class="n">png</span> <span class="n">isn</span><span class="s1">&#39;t precompiled):</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> &lt;%= favicon_link_tag &#39;</span><span class="n">images</span><span class="o">/</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="mi">144</span><span class="n">x144</span><span class="o">-</span><span class="n">precomposed</span><span class="o">.</span><span class="n">png</span><span class="s1">&#39;, :rel =&gt; &#39;</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="n">precomposed</span><span class="s1">&#39;, :type =&gt; &#39;</span><span class="n">image</span><span class="o">/</span><span class="n">png</span><span class="s1">&#39;, :sizes =&gt; &#39;</span><span class="mi">144</span><span class="n">x144</span><span class="s1">&#39; %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> app/views/layouts/application.html.erb:19:in `_app_views_layouts_application_html_erb___1957659516384225917_21931620&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rewriting the writer</h3>

<figure class='code'><figcaption><span>Change the tag writer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#the find_or_create_by wasn&#39;t creating unique tag names</span>
</span><span class='line'>      <span class="c1">#the reason was because we were linking too many methods together</span>
</span><span class='line'>      <span class="c1">#mongoid is finicky</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># was changed to...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># but we discoved that the tags were no disappearing if they were left off the form</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">#later we added this line because tags were persisting even if we tried to edit them.</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>the last td was changed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&lt;</span><span class="sx">% @airbrake_errors.each_with_index </span><span class="k">do</span> <span class="o">|</span><span class="n">a_e</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;tr&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="sx">%= a_e.tags.collect{ |tag|</span>
</span><span class='line'><span class="sx">         link_to(tag.name, tag_path(tag)) #=</span><span class="o">&gt;</span> <span class="s2">&quot;&lt;a href=&quot;</span><span class="n">adasda</span><span class="s2">&quot;&gt;Tag&lt;/a&gt;&quot;</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html_safe</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">     &lt;/td&gt;</span>
</span><span class='line'>      <span class="c1"># this needs to be better understood-- TODO</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTTP Authentication</h3>

<p><a href="http://stackoverflow.com/questions/3839167/is-there-a-way-to-set-up-simple-http-authentication-for-an-app-on-heroku">This did it</a>.</p>

<h3>Pushing the seed file to heroku</h3>

<figure class='code'><figcaption><span>the last td was changed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♕</span> <span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:seed</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>

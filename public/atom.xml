<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2012-12-18T21:13:17-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cache layer]]></title>
    <link href="http://www.adamjonas.com/blog/cache-layer/"/>
    <updated>2012-12-18T17:02:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/cache-layer</id>
    <content type="html"><![CDATA[<p>I was asked today to diagram the cache layer in Gitbo and stammered my way through an answer that was at-best vague and at-worst inaccurate. Our cache layer lives between the Github API and our Octokit Wrapper. We pull in the data on an authenticated user from the API and serialize the data in the user model (which allows us to access the data in multiple views). In a future refactor, we should probably be doing this in the wrapper model or even a memcache manager model.</p>

<p>Given the fact that I didn&#8217;t fully grasp the cache system that I had a heavy hand in designing, I did a little more research on the subject&#8230; The cache storage system in Rails is very modular. It uses the file system to store the cache by default, but can be customized as we did. We used <a href="https://github.com/mperham/dalli">Dalli</a> instead of <code>mem_cache_store</code> because it has support for memcached&#8217;s binary protocol. (I believe Dalli will be the default in Rails 4.)</p>

<h3>Methods</h3>

<p>From the <a href="http://guides.rubyonrails.org/caching_with_rails.html#activesupport-cache-store">documentation</a>, the main methods to call are <code>read</code>, <code>write</code>, <code>delete</code>, <code>exist?</code>, and <code>fetch</code>. The <code>fetch</code> method accepts a block and will either return an existing value from the cache or write the result to the cache if none exists.</p>

<h3>Page Caching:</h3>

<p>This allows the request for a page to be served by the webserver (nginx in our case), without ever having to hit the Rails stack. Obviously, this is highly performant, but cannot be used across all situations (e.g. where authentication is required or any actions that have before filters).</p>

<h3>Action Caching:</h3>

<p>This is similar to page caching except the incoming web request hits the Rails stack to allow the before-filters to run before the cache is served. This is the best option for when authentication and other restrictions need to be run while still serving the result of the output from a cached copy.</p>

<h3>Fragment Caching:</h3>

<p>This allows a fragment of view logic to be wrapped in a cache block and served out of the cache store when the next request comes in. We tried running this for our indexed table views, but we need to work on bettering our server-side processing before this can be fully implemented.</p>

<h3>SQL Caching:</h3>

<p>This caches the results returned by each query so that if Rails encounters the same query again for that request, it will use the cached result rather than running the query against the database again.</p>

<h3>Need to the look into&#8230;</h3>

<p>In the future, I&#8217;d like to look how we might be better able to use <code>Rack::Cache</code> to better take advantage of HTTP caching regarding freshness (expires, cache-control) and/or validation (last-modified, ETags).</p>

<h3>Further Reading:</h3>

<ul>
<li><a href="http://code.google.com/p/memcached/wiki/TutorialCachingStory">Memcache Wiki</a></li>
<li><a href="http://guides.rubyonrails.org/caching_with_rails.html">Rails Guide on Caching</a></li>
<li><a href="https://github.com/rtomayko/rack-cache">Rack cache</a></li>
<li><a href="http://nubyonrails.com/articles/memcached-basics-for-rails">Memcached basics for Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Climate and Quality]]></title>
    <link href="http://www.adamjonas.com/blog/code-climate-and-quality/"/>
    <updated>2012-12-13T11:10:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/code-climate-and-quality</id>
    <content type="html"><![CDATA[<h2>Bryan Helmkamp, founder of Code Climate</h2>

<h3>Static Analysis</h3>

<ul>
<li>object design issues</li>
<li>code style</li>
<li>potential bugs</li>
<li>security vulnerabilities</li>
<li>conformance with conventions</li>
</ul>


<p>Churn:</p>

<ul>
<li><p><a href="http://ablogaboutcode.com/2012/02/27/understanding-the-law-of-demeter/">Understanding the law of demeter</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Remote_procedure_call">remote procedure call</a></p></li>
<li><p>Could get read-only access to the repo so that we wouldn&#8217;t need to pull down issues via the api? Would use fetches to stay up to date.</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Composite_pattern">Composite pattern</a></p></li>
<li><p>be holistic about accomplishing 80% of a problem with 20% of the work. Understand why you are</p></li>
<li><p>Game of four book. Domain driven design.</p></li>
<li><a href="https://github.com/brynary/webrat">Webrat</a></li>
<li><p>Conferences and meetups</p></li>
<li><p>Feedback on Gitbo</p>

<ul>
<li>upvote bookmarklet. missing upvote button.</li>
<li>&lt;moveable.ink></li>
<li>before i take pledges, get the owner to approve.</li>
<li>high activity&#8230; post comment to the issue if there is a pledge.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marketing Your App]]></title>
    <link href="http://www.adamjonas.com/blog/marketing-your-app/"/>
    <updated>2012-12-12T09:48:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/marketing-your-app</id>
    <content type="html"><![CDATA[<p>Sr. Hacker @ Ordr.in</p>

<ul>
<li>FakeGirlfriend.co</li>
<li><p>Co-creator of world of Fourcraft</p></li>
<li><p><a href="http://blog.rickyrobinett.com/">Ricky&#8217;s Blog</a></p></li>
<li><a href="http://www.helpareporter.com/">Help a reporter out</a></li>
<li><a href="http://www.garysguide.com/jobs?region=newyork">Gary&#8217;s Guide</a></li>
<li><a href="http://hackweekends.com/city-detail.html?city=New%20York">Hack Weekends</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Gitbo]]></title>
    <link href="http://www.adamjonas.com/blog/testing-gitbo/"/>
    <updated>2012-12-11T19:18:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/testing-gitbo</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md">Factory Girl</a></li>
</ul>


<figure class='code'><figcaption><span>Defining Attributes in FactoryGirl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">provider</span> <span class="s2">&quot;github&quot;</span>
</span><span class='line'>    <span class="n">uid</span>  <span class="s2">&quot;xxxx5826&quot;</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;Adam Jonas&quot;</span>
</span><span class='line'>    <span class="n">nickname</span> <span class="s2">&quot;ajonas04&quot;</span>
</span><span class='line'>    <span class="n">email</span> <span class="s2">&quot;francestown@gmail.com&quot;</span>
</span><span class='line'>    <span class="n">image</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>    <span class="n">token</span> <span class="s2">&quot;xxxxx&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>config.include FactoryGirl::Syntax::Methods</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[advanced sinatra]]></title>
    <link href="http://www.adamjonas.com/blog/advanced-sinatra/"/>
    <updated>2012-12-10T13:14:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/advanced-sinatra</id>
    <content type="html"><![CDATA[<h3>Sinatra</h3>

<ul>
<li><p>Sinatra is a DSL for creating a web</p></li>
<li><p>Sinatra is library, not a framework (rails is a framework)</p></li>
<li><p><a href="http://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library">difference between lib and framework</a></p></li>
<li><p><a href="http://martinfowler.com/bliki/InversionOfControl.html">inversion of control</a> by Martin Fowler</p>

<ul>
<li>Sinatra supports inline templates</li>
<li>variables are passed in via @instance variables</li>
<li>Filters</li>
<li>Helpers: takes a block and then anything defined are available in the templates</li>
<li>Configuration: looks at the rack env variable and executes code based on the env</li>
<li><a href="http://www.mnot.net/cache_docs/">cache docs</a></li>
<li>By default don&#8217;t have sessions. Need to config sessions.</li>
<li><p>Testing -> a lot of the tests that come with rails aren&#8217;t in sinatra</p>

<ul>
<li>test with rack-test</li>
</ul>
</li>
<li><p>classic app -></p>

<ul>
<li>all the routes are in one file, it is straight Ruby code</li>
</ul>
</li>
<li><p>Modular app -></p>

<ul>
<li>don&#8217;t want to pollute the Object namespace</li>
<li>combinging multiple Sinatra apps in a single process</li>
<li>use Sinatra app as middleware</li>
</ul>
</li>
<li><p>Supports extensions</p>

<ul>
<li>could be helpers, routes, configurations pacakged into a Gem and used on other apps</li>
</ul>
</li>
<li><p>Registered</p>

<ul>
<li>when the app is registered is has a method (<code>def self.registered(app)</code>) that allows config settings</li>
</ul>
</li>
<li><p>extensions</p>

<ul>
<li><a href="http://www.sinatrarb.com/extensions.html">writing extensions</a></li>
<li><a href="http://www.sinatrarb.com/extensions-wild.html">using extensions</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sinatra vs. Rails</h3>

<ul>
<li>when to use Sinatra&#8230;

<ul>
<li><p>Thick client web applications for performance or heavily visualizations</p>

<ul>
<li>majority of the logic is on the client, not on the server</li>
<li>sinatra serves things really fast</li>
</ul>
</li>
<li><p>API servers for iOS/Android/Javascript Apps</p></li>
<li>HTML5 Mobile Apps (<a href="http://www.jqtouch.com/">jq touch</a> or jquery mobile)</li>
</ul>
</li>
</ul>


<h3>Rack</h3>

<ul>
<li><a href="http://m.onkey.org/ruby-on-rack-1-hello-rack">Hello Rack</a></li>
</ul>


<h3>Gems</h3>

<ul>
<li><a href="http://middlemanapp.com/getting-started/welcome/">Middleman Gem</a></li>
<li>Sprockets- pretty much the asset pipeline</li>
</ul>


<h3>Sinatra integrated into Rails</h3>

<ul>
<li>it is all Rack under the hood so you use <code>mount</code> in the route file and then all the urls defined in the sinatra app are available in the rails app</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[script bootstrap]]></title>
    <link href="http://www.adamjonas.com/blog/script-bootstrap/"/>
    <updated>2012-12-10T11:16:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/script-bootstrap</id>
    <content type="html"><![CDATA[<h3>Zach Holman&#8217;s Slides on <a href="http://zachholman.com/talk/ruby-patterns">setting up a boostrap script</a></h3>

<ul>
<li>dependency check

<ul>
<li>is MySQL installed</li>
<li>is redis running</li>
</ul>
</li>
<li>bundler

<ul>
<li>bundle install \
&#8211;binstubs \
&#8211;local \
&#8211;path=vendor/gems \
&#8211;without=production</li>
</ul>
</li>
<li>db creation

<ul>
<li>rake db:create</li>
</ul>
</li>
<li>db migration

<ul>
<li>rake db:migrate</li>
</ul>
</li>
<li>db seeding

<ul>
<li><a href="https://github.com/rtomayko/replicate">script/replicate-repo</a></li>
</ul>
</li>
<li>static page compilation

<ul>
<li>404,500</li>
</ul>
</li>
<li>language compilation

<ul>
<li>python, c, erlang</li>
</ul>
</li>
</ul>


<h3>Check to see if we need bundle install</h3>

<figure class='code'><figcaption><span>Need to bundle install?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">md5</span>       <span class="o">&lt;&lt;</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;Gemfile&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">checksum</span>  <span class="o">=</span> <span class="n">md5</span><span class="o">.</span><span class="n">hexdigest</span>
</span><span class='line'><span class="n">installed</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;.bundle/checksum&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/holman/hopper/blob/master/script/bootstrap">Some examples</a></li>
</ul>


<h3>Using Foreman</h3>

<ul>
<li><a href="http://blog.daviddollar.org/2011/05/06/introducing-foreman.html">An Intro</a></li>
</ul>


<h3>Permission Issues</h3>

<ul>
<li><p>Once we changed the server script and we pushed, the permission issue went away. <a href="http://shalinjain.com/index.php/2009/05/27/scriptserver-permission-denied-ruby-on-rails-error">This is how we changed the permission</a> in the first place.</p></li>
<li><p><a href="http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/">Git Script To Show Largest Pack Objects</a></p></li>
</ul>


<h3>script prompt</h3>

<figure class='code'><figcaption><span>Slick Prompts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">echo</span> <span class="s2">&quot;the database will now be created, migrated and seeded&quot;</span>
</span><span class='line'><span class="n">echo</span> <span class="s2">&quot;the current default is sqlite, if you&#39;d like to customize your db settings&quot;</span>
</span><span class='line'><span class="n">echo</span> <span class="s2">&quot;update the config/database.yml file&quot;</span>
</span><span class='line'><span class="n">echo</span> <span class="s2">&quot;when finished, you may continue...&quot;</span>
</span><span class='line'><span class="n">read</span> <span class="o">-</span><span class="nb">p</span> <span class="s2">&quot;continue (y/n)?&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="vg">$REPLY</span> <span class="o">!=</span> <span class="s2">&quot;y&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s2">&quot;Exiting...&quot;</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">fi</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conways Game of Life]]></title>
    <link href="http://www.adamjonas.com/blog/conways-game-of-life/"/>
    <updated>2012-12-08T11:23:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/conways-game-of-life</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/1720932/create-two-dimensional-arrays-and-access-sub-arrays-in-ruby">Initializing new arrays</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js Intro]]></title>
    <link href="http://www.adamjonas.com/blog/backbone-dot-js-intro/"/>
    <updated>2012-12-07T14:57:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/backbone-dot-js-intro</id>
    <content type="html"><![CDATA[<h3>Intro with <a href="http://www.youtube.com/watch?v=PqtYcHyyWJA">Nick Gauthier</a></h3>

<ul>
<li><p>7min 3seconds</p></li>
<li><p>Backbone is a library, not a framework</p>

<ul>
<li>it is injectable, like Jquery</li>
</ul>
</li>
<li><p>Ember is much larger and does more for you, but in backbone you call the shots</p></li>
<li><p>Router</p>

<ul>
<li>Bind urls to actions with hashbang route or pushstate route</li>
<li>if you have a route that it recognizes it triggers your code</li>
<li>extend backbone default router</li>
<li>looks at a route and triggers an action -> like Rails</li>
</ul>
</li>
<li><p>Views</p>

<ul>
<li>When you instantiate a view, you create a new DOM element

<ul>
<li>The view&#8217;s job is to listen to events, like jQuery to trigger actions</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>Listens for a click&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="err">\\</span><span class="nx">code</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;click .pet&quot;</span><span class="o">:</span> <span class="s2">&quot;woof&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="err">\\</span><span class="nx">more</span> <span class="nx">code</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic GIF on Github]]></title>
    <link href="http://www.adamjonas.com/blog/dynamic-gif-on-github/"/>
    <updated>2012-12-07T13:06:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/dynamic-gif-on-github</id>
    <content type="html"><![CDATA[<ol>
<li><p>How is the GIF embedded in the markdown?</p></li>
<li><p>Where can I see it?</p></li>
<li>TravisCI</li>
<li>The only .png match points to Repositories#show</li>
<li><p><code>repo = service(:find_repo, params).run</code> -> line 31 in the repo controller, this must be how it is done.</p></li>
<li><p>How do we dynamically generate a png in ruby</p></li>
</ol>


<h3><a href="https://github.com/citrus/magick_title#readme">Magick_title</a></h3>

<ul>
<li><code>MagickTitle.say("Hello")</code> builds a PNG that predictably says &#8220;Hello&#8221;</li>
<li><p>the gifs on github are 13 pixels tall</p></li>
<li><p>svg image url</p></li>
<li>Moveable ink</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Oriented Design Sandi Metz]]></title>
    <link href="http://www.adamjonas.com/blog/object-oriented-design-sandi-metz/"/>
    <updated>2012-12-07T12:31:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/object-oriented-design-sandi-metz</id>
    <content type="html"><![CDATA[<h3>Solid Object Oriented Design</h3>

<p><a href="http://vimeo.com/12350535">Video of Sandi Metz</a></p>

<h3>Less the path to better design</h3>

<p><a href="http://vimeo.com/26330100">Video</a></p>

<ul>
<li><p>Code needs to work today just once, but needs to be easy to change forever</p>

<ul>
<li>purpose of design is reduce the cost of change</li>
</ul>
</li>
<li><p>Patterns are prescriptions</p>

<ul>
<li>patterns work at the correct dosage</li>
</ul>
</li>
<li><p>principles</p>

<ul>
<li>SOLID</li>
<li>Demeter</li>
</ul>
</li>
<li><p>Need diagnostics</p>

<ul>
<li>need simple ways to judge the goodness of code (the inverse of Bob Martin&#8217;s list of ailments)</li>
</ul>
</li>
<li><p>4 Diagnostics : True</p>

<ol>
<li>Code should be <em>transparent</em></li>
<li><em>Reasonable</em>: cost of making any change should be to proportional to its value</li>
<li>Code should be <em>useable</em> -> if you wrote the code, you should be able to reuse it</li>
<li><em>Exemplary</em> -> more code like this would be good for your app</li>
</ol>
</li>
<li><p>These principles tell you when to quit</p></li>
<li><p>Don&#8217;t be a know-it-all</p></li>
<li><p>Code is more stable when the objects communicate less</p>

<ul>
<li>For example, all the work that goes into building and curating bounties belongs in the bounty class and not in the issue class, even though bounties belong to issues

<blockquote><p>managing dependencies is at the center of design. Depend on things that are more stable than you are.</p></blockquote></li>
<li>early on in an app, you actually don&#8217;t know which is more stable

<ul>
<li>embrace uncertainty. If two objects must collaborate and you don&#8217;t know who is more uncertain. Then you need to make them know as a little of each other as possible. <em>A directive to decouple.</em></li>
</ul>
</li>
<li>Don&#8217;t have to guess what changes will come. Loosen the coupling so that when a change came (and we didn&#8217;t know what the change was) it would be ok.</li>
</ul>
</li>
<li><p>It&#8217;s Ducks all the way down</p></li>
<li>identify the underlying abstractions, from trip&#8217;s point of view it just wants to be prepared</li>
<li>preparer is an agreement about the public interface of an idea -> it&#8217;s a <em>duck type</em></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">preparer</span><span class="p">(</span><span class="n">preparers</span><span class="p">)</span>
</span><span class='line'>  <span class="n">preparers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">preparer</span><span class="o">|</span>
</span><span class='line'>    <span class="n">preparer</span><span class="o">.</span><span class="n">prepare_trip</span><span class="p">(</span><span class="nb">self</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#then each class has it&#39;s own prepare_trip(trip) method which sends back a prepared trip.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Abstractions are more stable than concretions. It is the duck type.

<ul>
<li>You can trade the unpredictability for the constancy for what you want.</li>
<li>We share no code, there are no modules</li>
</ul>
</li>
</ul>


<h3>Trip expects preparers and prepares trust that they can pass the object to that called them</h3>

<ul>
<li><p>Trustworthy objects</p>

<ul>
<li>Understand more about themselves and what they want and know less about what others do</li>
<li>Depend less on concretions and more on abstractions</li>
</ul>
</li>
<li><p>The space between objects</p></li>
<li>When objects have space around them they have room to move</li>
<li>Design allows you to put off design decision until you know more about the application</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elastic search]]></title>
    <link href="http://www.adamjonas.com/blog/elastic-search/"/>
    <updated>2012-12-02T10:21:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/elastic-search</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/karmi/tire">Ruby API and DSL for the ElasticSearch search engine</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>elasticsearch -f -D es.config=/usr/local/opt/elasticsearch/config/elasticsearch.yml
</span><span class='line'>Unable to find a $JAVA_HOME at "/usr", continuing with system-provided Java...
</span><span class='line'>No Java runtime present, requesting install.</span></code></pre></td></tr></table></div></figure>


<p><code>Load: true</code> will load the active record object as opposed to the</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day37]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day37/"/>
    <updated>2012-11-30T10:12:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day37</id>
    <content type="html"><![CDATA[<ul>
<li><p>click around without being authenticated</p>

<h2>- modal prompt</h2></li>
<li><p>upload repo</p>

<ul>
<li>user stories of issues that needs to be fixed</li>
</ul>
</li>
<li>as a fixer

<ul>
<li>user story of finding an issue

<ul>
<li>sort by popularity/ bounty$</li>
</ul>
</li>
<li>fix an issue

<ul>
<li>notify bounty issuer</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ul>


<p>tech challenges
  - sidekiq
  - memcache</p>

<ul>
<li><code>git reset --hard &lt;tag/branch/commit id&gt;</code></li>
<li><code>git branch -D bugfix</code></li>
</ul>


<figure class='code'><figcaption><span>None of this worked&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;i#index_upvote.icon-arrow-up&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;icon-arrow-up icon-circle-arrow-up&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// $(&#39;i#index_downvote.icon-arrow-down&#39;).removeClass().addClass(&#39;icon-arrow-down&#39;);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;i#index_downvote.icon-arrow-down&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;icon-circle-arrow-down icon-arrow-down &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// $(&#39;i#index_upvote.icon-arrow-up&#39;).removeClass().addClass(&#39;icon-arrow-up&#39;);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;i#index_upvote.icon-arrow-up, i#index_downvote.icon-arrow-down&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$parent</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">up</span> <span class="o">=</span> <span class="nx">$parent</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s1">&#39;icon-arrow-up&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;i.icon-arrow-down&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;icon-circle-arrow-down icon-arrow-up&quot;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;i.icon-arrow-down&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>This Did It in Vote Js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$upvoteIcon</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;tr#issue_&lt;%= @issue.id %&gt; i#upvote-icon-&lt;%= @issue.id %&gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$downvoteIcon</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;tr#issue_&lt;%= @issue.id %&gt; i#down-vote-icon-&lt;%= @issue.id %&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;%</span> <span class="k">if</span> <span class="nx">params</span><span class="p">[</span><span class="o">:</span><span class="nx">direction</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;upvote&quot;</span> <span class="o">%&gt;</span>
</span><span class='line'>  <span class="nx">$downvoteIcon</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;icon-arrow-down&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;icon-circle-arrow-down&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$upvoteIcon</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;icon-arrow-up&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;icon-circle-arrow-up&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="nx">elsif</span> <span class="nx">params</span><span class="p">[</span><span class="o">:</span><span class="nx">direction</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;downvote&quot;</span> <span class="o">%&gt;</span>
</span><span class='line'>  <span class="nx">$downvoteIcon</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;icon-arrow-down&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;icon-circle-arrow-down&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$upvoteIcon</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;icon-arrow-up&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;icon-circle-arrow-up&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CSS IDs</h3>

<ul>
<li>SO that badge class was overwritten in an attempt to make them bigger. A fix is to simply assign the overwrite to an id and then call it on the element.</li>
</ul>


<figure class='code'><figcaption><span>This Did It in Vote Js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span><span class="nx">endorsement</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">code</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">span</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;endorsement&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;badge badge-success&quot;</span><span class="o">&gt;</span><span class="nx">Endorsed</span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day36]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day36/"/>
    <updated>2012-11-29T10:30:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day36</id>
    <content type="html"><![CDATA[<p><code>$ rake db:migrate:down VERSION=20080930121212</code></p>

<h3>Lessons Learned</h3>

<ul>
<li>We were having trouble adding styling to the vote button after a click, like on stackoverflow.

<ul>
<li>the javascript was located in the vote.js file and would only trigger after the second event

<ul>
<li><em>ANSWER:</em> The vote is only created after the vote button is clicked the first time, thus if we moved it to issue.js it would work fine.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Merging an upstream and updating the gem</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ git fetch upstream
</span><span class='line'>♕ git merge upstream/master
</span><span class='line'>#resolve your conflicts
</span><span class='line'>
</span><span class='line'>#bundle update gem --source git_user_name
</span><span class='line'>bundle update octokit --source ajonas04</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>A Simple Click Event</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a.upvote&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s2">&quot;selected&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://www.w3resource.com/twitter-bootstrap/modals-tutorial.php">Twitter bootstrap modal tutorial</a></li>
</ul>


<p>Data-backdrop:</p>

<blockquote><p>Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn&#8217;t close the modal on click.</p></blockquote>

<h2>Andrew Koch VP of Product Management @ Lot18</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day35]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day35/"/>
    <updated>2012-11-28T09:13:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day35</id>
    <content type="html"><![CDATA[<ul>
<li>Goal:

<ul>
<li>if there is a no bounty div</li>
<li>dont just render the TR for that bounty</li>
<li>rather render the entire bounty table for that issue and insert that</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//the [0] is to make sure the element has something in it</span>
</span><span class='line'><span class="c1">//it is the equivalent to a .exists? method</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#bounties_table&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'><span class="c1">//this adds the tr object defined in the controller</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bounties_table tbody&#39;</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="s2">&quot;&lt;%= j render(@bounty) %&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//replace with requires that you pass in the HTML-- not a selector</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#no_bounty&quot;</span><span class="p">).</span><span class="nx">replaceWith</span><span class="p">(</span><span class="s2">&quot;&lt;%= j render &#39;bounties/bounties_table&#39;, :issue =&gt; @bounty.issue %&gt;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//the j escape is necessary to render the html</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comparing the inputs&#8230;.</p>

<figure class='code'><figcaption><span>Pulling out values for two different forms</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;button#pledge&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pageValue</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bounty_price_page&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">modalValue</span><span class="p">(</span><span class="nx">pageValue</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">modalValue</span><span class="p">(</span><span class="nx">pageValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#create-bounty&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">modal</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bounty_price&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">modal</span><span class="p">)</span><span class="o">!=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">pageValue</span><span class="p">)){</span>
</span><span class='line'>      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;span#error&#39;</span><span class="p">).</span><span class="nx">replaceWith</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;label label-important&quot;&gt;Please Enter The Same Value&lt;/span&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><a href="http://www.elasticsearch.org/">elastic search</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Serialization">Serialization</a></p>

<ul>
<li><a href="http://api.rubyonrails.org/classes/ActiveModel/Serializers/JSON.html">rails documentation</a></li>
<li><a href="http://railscasts.com/episodes/322-rabl?view=asciicast">rabl</a></li>
<li><p><a href="http://jonathanjulian.com/2010/04/rails-to_json-or-as_json/">to_json</a></p></li>
<li><p><a href="https://github.com/features/projects/issues">pull request to solve an issue</a></p></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day34]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day34/"/>
    <updated>2012-11-27T19:14:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day34</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="https://github.com/apneadiving/Google-Maps-for-Rails">Google Maps for Rails</a></p>

<ul>
<li><a href="http://www.youtube.com/watch?v=Yg5-33zedqM">screencast</a></li>
</ul>
</li>
<li><p><a href="http://jsonviewer.stack.hu/">json viewer</a></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Handhistory</span><span class="o">.</span><span class="n">find_each</span><span class="p">(</span><span class="ss">:batch_size</span> <span class="o">=&gt;</span> <span class="mi">100000</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">hand</span><span class="o">|</span>
</span><span class='line'>  <span class="n">bb</span> <span class="o">=</span> <span class="n">hand</span><span class="o">.</span><span class="n">gametype</span><span class="o">.</span><span class="n">bigblind</span>
</span><span class='line'>  <span class="c1">#etc</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>add indexes</li>
<li><p>database driver connects database to active record</p>

<ul>
<li>for example sqlite3 gem</li>
</ul>
</li>
<li><p><a href="http://www.highcharts.com/">high charts</a> -> javascript lib</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day33]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day33/"/>
    <updated>2012-11-26T10:04:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day33</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://rubular.com/r/TicDjjCz2S">http://rubular.com/r/TicDjjCz2S</a></p></li>
<li><p>Httparty:</p>

<ul>
<li><a href="https://github.com/jnunemaker/httparty/blob/master/examples/whoismyrep.rb">https://github.com/jnunemaker/httparty/blob/master/examples/whoismyrep.rb</a></li>
<li><a href="http://blog.teamtreehouse.com/its-time-to-httparty">http://blog.teamtreehouse.com/its-time-to-httparty</a></li>
</ul>
</li>
<li><p>JQuery:</p>

<ul>
<li><a href="http://www.unheap.com/section/inputs-forms/input-sliders/">http://www.unheap.com/section/inputs-forms/input-sliders/</a></li>
</ul>
</li>
<li><p>JRating:</p>

<ul>
<li><a href="http://www.myjqueryplugins.com/jquery-plugin/jrating">http://www.myjqueryplugins.com/jquery-plugin/jrating</a></li>
</ul>
</li>
<li><p>Stars:</p>

<ul>
<li><a href="http://jsfiddle.net/leaverou/CGP87/light/">http://jsfiddle.net/leaverou/CGP87/light/</a></li>
</ul>
</li>
</ul>


<p>Submitting a <a href="http://forum.jquery.com/topic/how-to-submit-form-on-click-radio-button-with-jquery-mobile">radio button</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;:radio&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><a href="http://stackoverflow.com/questions/1716965/ruby-and-nil-object">passing in local variables to a partial</a></p></li>
<li><p>rounding <code>34567.89.round(1)  #=&gt; 34567.9</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Resources]]></title>
    <link href="http://www.adamjonas.com/blog/bootstrap-resources/"/>
    <updated>2012-11-26T10:03:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/bootstrap-resources</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://www.bootstraphero.com/the-big-badass-list-of-twitter-bootstrap-resources">Bootstrap Resources Grand-Daddy</a>

<ul>
<li><a href="http://charliepark.org/bootstrap_buttons/">http://charliepark.org/bootstrap_buttons/</a></li>
<li><a href="http://bootswatch.com/">http://bootswatch.com/</a></li>
<li><a href="https://github.com/addyosmani/jquery-ui-bootstrap/">https://github.com/addyosmani/jquery-ui-bootstrap/</a></li>
<li><a href="http://fortawesome.github.com/Font-Awesome/">http://fortawesome.github.com/Font-Awesome/</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem Hunting]]></title>
    <link href="http://www.adamjonas.com/blog/gem-hunting/"/>
    <updated>2012-11-24T20:47:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/gem-hunting</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://gems.github.com/list.html">All gems on Github</a></li>
</ul>


<p>gems.each do |gem|
  curl &#8220;https://rubygems.org/api/v1/gems/#{gem}.json&#8221;
  nickname = output[:homepage_url].split(&#8216;/&#8217;)[-2]
end</p>

<p>curl https://rubygems.org/api/v1/gems/capybara.json</p>

<p>{&#8220;name&#8221;:&#8221;capybara&#8221;,&#8221;downloads&#8221;:2336729,&#8221;version&#8221;:&#8221;2.0.1&#8221;,&#8221;version_downloads&#8221;:5523,&#8221;platform&#8221;:&#8221;ruby&#8221;,&#8221;authors&#8221;:&#8221;Jonas Nicklas&#8221;,&#8221;info&#8221;:&#8221;Capybara is an integration testing tool for rack based web applications. It simulates how a user would interact with a website&#8221;,&#8221;project_uri&#8221;:&#8221;http://rubygems.org/gems/capybara&#8221;,</p>

<p>&#8220;gem_uri&#8221;:&#8221;http://rubygems.org/gems/capybara-2.0.1.gem&#8221;,</p>

<p>&#8220;homepage_uri&#8221;:&#8221;http://github.com/jnicklas/capybara&#8221;,</p>

<p>&#8220;wiki_uri&#8221;:null,&#8221;documentation_uri&#8221;:null,&#8221;mailing_list_uri&#8221;:null,&#8221;source_code_uri&#8221;:null,&#8221;bug_tracker_uri&#8221;:null,&#8221;dependencies&#8221;:{&#8220;development&#8221;:[{&#8220;name&#8221;:&#8221;cucumber&#8221;,&#8221;requirements&#8221;:&#8221;>= 0.10.5&#8221;},{&#8220;name&#8221;:&#8221;fuubar&#8221;,&#8221;requirements&#8221;:&#8221;>= 0.0.1&#8221;},{&#8220;name&#8221;:&#8221;launchy&#8221;,&#8221;requirements&#8221;:&#8221;>= 2.0.4&#8221;},{&#8220;name&#8221;:&#8221;rake&#8221;,&#8221;requirements&#8221;:&#8221;>= 0&#8221;},{&#8220;name&#8221;:&#8221;rspec&#8221;,&#8221;requirements&#8221;:&#8221;>= 2.2.0&#8221;},{&#8220;name&#8221;:&#8221;sinatra&#8221;,&#8221;requirements&#8221;:&#8221;>= 0.9.4&#8221;},{&#8220;name&#8221;:&#8221;yard&#8221;,&#8221;requirements&#8221;:&#8221;>= 0.5.8&#8221;}],&#8221;runtime&#8221;:[{&#8220;name&#8221;:&#8221;mime-types&#8221;,&#8221;requirements&#8221;:&#8221;>= 1.16&#8221;},{&#8220;name&#8221;:&#8221;nokogiri&#8221;,&#8221;requirements&#8221;:&#8221;>= 1.3.3&#8221;},{&#8220;name&#8221;:&#8221;rack&#8221;,&#8221;requirements&#8221;:&#8221;>= 1.0.0&#8221;},{&#8220;name&#8221;:&#8221;rack-test&#8221;,&#8221;requirements&#8221;:&#8221;>= 0.5.4&#8221;},{&#8220;name&#8221;:&#8221;selenium-webdriver&#8221;,&#8221;requirements&#8221;:&#8221;~> 2.0&#8221;},{&#8220;name&#8221;:&#8221;xpath&#8221;,&#8221;requirements&#8221;:&#8221;~> 1.0.0&#8221;}]}}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day32]]></title>
    <link href="http://www.adamjonas.com/blog/fis-day32/"/>
    <updated>2012-11-20T11:12:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/fis-day32</id>
    <content type="html"><![CDATA[<h3>Git Services</h3>

<ul>
<li><a href="https://help.github.com/articles/post-receive-hooks">Service Hooks</a></li>
<li><a href="https://github.com/github/github-services">github services repo</a></li>
</ul>


<h2>Dan Integration Tests</h2>

<ul>
<li>test an app end to end</li>
<li>deal with your libs and your code</li>
<li><p>hit external services</p>

<ul>
<li>unit tests may not test bad arguments</li>
<li>bad db queries or scope</li>
<li>issues with external service</li>
</ul>
</li>
<li><p>Unit tests are fast</p></li>
<li><p>speed</p>

<ul>
<li>don&#8217;t use external services like the DB, that is what mocks and stubs are for</li>
</ul>
</li>
<li><p>mocks, stubs and <a href="https://github.com/freerange/mocha">mocha</a></p></li>
<li><p>controller specs -> unit tests for controllers</p>

<ul>
<li>we have 20:1 Unit:integration test ratio</li>
</ul>
</li>
</ul>


<h3>Factory Girl</h3>

<ul>
<li>reuseable test data</li>
<li>defines attributes for a class</li>
<li>can define relationships, like a user has an address</li>
<li><code>FactoryGirl.create(:user)</code></li>
<li><code>FactoryGirl.build(:user)</code></li>
<li><code>FactoryGirl.build_stubbed(:user)</code></li>
<li><code>FactoryGirl.attributes_for(:user)</code></li>
</ul>


<h3>Mocha-> stubs and mocks</h3>

<ul>
<li><a href="http://gofreerange.com/mocha/docs/">RDoc</a></li>
<li>stubs -> sit in for this method, whenever you call this method, return this val

<ul>
<li>user.bank_balance => returns 100.

<ul>
<li><code>MyClass.stub(:x =&gt; "ABC")</code></li>
</ul>
</li>
</ul>
</li>
<li><p>mocks -> like stubs, but must be called the specified number of times</p>

<ul>
<li>a mock if it is called or not called will fail a test</li>
<li>use when you need something that is a little more specific

<ul>
<li><code>MyClass.expects(:y).with("arg").returns("ABC")</code></li>
</ul>
</li>
</ul>
</li>
<li><p><code>Mocha::Configuation.prevent(:stubbing_non_existent_method)</code></p></li>
</ul>


<h3>In Summary</h3>

<ul>
<li>Test basic behavior with intergration tests</li>
<li>Test complex behavior with unit tests</li>
</ul>


<h2>Kevin</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">args</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">selector</span><span class="p">),</span> <span class="n">attrs</span><span class="o">|</span>
</span><span class='line'>  <span class="n">attrs</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">job_doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/ostruct/rdoc/OpenStruct.html">open struct object</a></p>

<ul>
<li><a href="http://www.rubyquiz.com/quiz81.html">ruby quiz on open struct</a></li>
</ul>
</li>
<li><p><a href="http://amsul.github.com/pickadate.js/">Datepicker</a></p></li>
</ul>


<h3>Libraries to look at for Gitbo</h3>

<ul>
<li><a href="https://github.com/ender-js/Ender">Ender</a></li>
<li><a href="https://github.com/twitter/bower">Bower</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching]]></title>
    <link href="http://www.adamjonas.com/blog/caching/"/>
    <updated>2012-11-20T11:11:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/caching</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://www.mnot.net/cache_docs/">Caching tutorial</a></li>
<li><a href="http://tomayko.com/writings/things-caches-do">Things caches do</a></li>
</ul>


<h1>Fragment Caching- RailsCast 90</h1>

<p><strong>Fragment caching is done at the the view level</strong></p>

<ul>
<li>Change dev environment file to:

<ul>
<li><code>config.action_controller.perform_caching = true</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>Wrap the div with cache tag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="s2">&quot;recent_articles&quot;</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;div id=&quot;recent_articles&quot;&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Recent</span> <span class="no">Articles</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">  #more code</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>cache will change in every url</li>
</ul>


<h3>Expiring fragment cache</h3>

<p>in the articles controller#show</p>

<ul>
<li>in the controller

<ul>
<li>expire_fragment(&#8220;recent_articles&#8221;)

<ul>
<li>move into a sweeper like in episode 89</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>auto-expiring fragment cache</p>

<figure class='code'><figcaption><span>Wrap the div you want to cache with cache tags</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="vi">@article</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">#behind the scenes this is going to call .cache_key on the model</span>
</span><span class='line'><span class="sx">  #see below for cache_key explanation</span>
</span><span class='line'><span class="sx">#powerful way to auto-expire by loading an object</span>
</span><span class='line'><span class="sx">&lt;div id=&quot;article&quot;&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%= @article.name %&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">content</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;p&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= link_to &quot;Edit&quot;, edit_article_path %&gt; |</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Browse Articles&quot;</span><span class="p">,</span> <span class="n">articles_path</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/p&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cache_key</h3>

<figure class='code'><figcaption><span>Wrap the div you want to cache with cache tags</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">cache_key</span> <span class="c1">#=&gt; articles/1-2012083083433 </span>
</span><span class='line'><span class="c1">#-&gt; name of the model, id of the model, and updated timestamp</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">touch</span> <span class="c1">#now it will have different cache key</span>
</span><span class='line'><span class="c1">#because it is looking for a cache with a different name</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t need to litter expire_cache all over the model</p>

<figure class='code'><figcaption><span>The Touch Option expires the cache if it&#8217;s changed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:article</span><span class="p">,</span> <span class="n">touch</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means it will update the article when a commment is changed.</p>

<h3>Caching a fragment when you aren&#8217;t passing in an object</h3>

<figure class='code'><figcaption><span>This is cached as recent_articles</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="s2">&quot;recent_articles&quot;</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;div id=&quot;recent_articles&quot;&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Recent</span> <span class="no">Articles</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">  &lt;ul&gt;</span>
</span><span class='line'><span class="sr">  &lt;% @recent_articles.each do |article| %&gt;</span>
</span><span class='line'><span class="sr">    &lt;% cache [&quot;recent&quot;, article] do %&gt;</span>
</span><span class='line'><span class="sr">#can cache here as well!</span>
</span><span class='line'><span class="sr">#namespaced with &quot;recent&quot;, but passing in the article object</span>
</span><span class='line'><span class="sr">#creates a unique key based on the elements passed into the array</span>
</span><span class='line'><span class="sr">      &lt;li&gt;&lt;%= link_to article.name, article %&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;% end %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>When the &#8220;recent_articles&#8221; cache is generated, it will generate a cache for each object in the list in addition to the full &#8220;recent_articles&#8221; cache.

<ul>
<li>normal behavior will just read the recent articles cache</li>
<li>but editing behavior of the objects will expire the cache.</li>
</ul>
</li>
</ul>


<h3>How frag caches are stored</h3>

<ul>
<li>Rails comes with a built in centralized caching mechnism called rails.cache

<ul>
<li>can read and write from

<ul>
<li>`Rails.cache.read(&#8216;views/recent_articles&#8217;)</li>
<li>default is memory store, but want to use redis or memcahce

<ul>
<li>config is done in the env/production</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>Memcached Dalli- RailsCast 380</h1>

<ul>
<li><a href="http://code.google.com/p/memcached/wiki/NewStart">Memcache wiki</a></li>
<li>Use dalli, don&#8217;t use memcache_store</li>
</ul>


<p><code>brew install memcached</code></p>

<p><code>gem dalli</code></p>

<ul>
<li><p>enable caching in the dev environment -></p>

<ul>
<li>change to: <code>perform_caching = true</code></li>
<li>config.cache_store = :dalli_store

<ul>
<li>should do this in production as well.

<ul>
<li>Rails.cache will show that this is now a dalli store</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Rails.cache.fetch(:bar) { sleep 1; 2}</code></p>

<ul>
<li>fetch a cache or execute the block</li>
</ul>
</li>
<li><code>Rails.cache.read_multi(:bar, :foo)</code> -> can fetch multiple requests once, instead of going individually.</li>
<li><p><code>Rails.cache.stats</code> -> shows the amt of info store, number of times it reached it&#8217;s limit, etc.</p></li>
<li><p><strong>Memcached is not a persistance store.</strong> If you stop the process you lose it.</p></li>
<li><p><code>Rails.cache.write(:bar, 1, expires_in: 5.seconds)</code></p>

<ul>
<li>will expire in 5 seconds</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>product.category.name to product.category_name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">category_name</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="o">[</span><span class="ss">:category</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">5</span><span class="o">.</span><span class="n">minutes</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">category</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>If you want a cache to expire on update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:products</span>
</span><span class='line'>  <span class="n">after_update</span> <span class="ss">:flush_name_cache</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">flush_name_cache</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="o">[</span><span class="ss">:category</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="ss">:name</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">name_changed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Need to add memcached on the server side as well</li>
</ul>


<h1>HTTP Caching</h1>

<h1>Etag</h1>

<ul>
<li>Etag: unique string based on the content in the response body

<ul>
<li>etag changes based on the csrf token</li>
</ul>
</li>
<li>When the browser caches the response it will assign the etag to it

<ul>
<li>get a 304 not modified, not a 200 ok

<ul>
<li>request will be the same speed on the server side</li>
</ul>
</li>
<li>Can speed up the server side by customizing how an etag is generated</li>
</ul>
</li>
<li></li>
</ul>


<figure class='code'><figcaption><span>Customize how an etag is generated</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expires_in</span> <span class="mi">5</span><span class="o">.</span><span class="n">minutes</span>
</span><span class='line'>  <span class="n">fresh_when</span> <span class="vi">@product</span><span class="p">,</span> <span class="kp">public</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>fresh_when

<ul>
<li>checks whether the etag passed into the request matches the etag for the product and of it does it gives a 304 not modified</li>
<li>otherwise it will show the render template with the full action</li>
</ul>
</li>
<li>this technique isn&#8217;t going to work well if there is a respond_to block</li>
</ul>


<figure class='code'><figcaption><span>Etag and a repond_to block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">stale?</span> <span class="n">etag</span><span class="p">:</span> <span class="vi">@product</span>
</span><span class='line'>    <span class="n">repond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="c1">#.....</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Etag can accept multiple objects</p>

<figure class='code'><figcaption><span>Customize how an etag is generated</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fresh_when</span> <span class="o">[</span><span class="vi">@product</span><span class="p">,</span> <span class="n">current_user</span><span class="o">]</span>
</span><span class='line'>  <span class="c1">#passing in multiple </span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Last_modified</h3>

<figure class='code'><figcaption><span>Customize how an etag is generated</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fresh_when</span> <span class="vi">@product</span><span class="p">,</span> <span class="n">last_modified</span><span class="p">:</span> <span class="vi">@product</span><span class="o">.</span><span class="n">updated_at</span>
</span><span class='line'>  <span class="c1">#this includes a timestamp in the header of last modified</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="c1">#from this</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@products</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="c1">#this runs the db query before it is neccessary</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#this waits until we are sure it is needed</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@products</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">scoped</span>
</span><span class='line'>  <span class="c1">#this waits until we are sure the all command is needed</span>
</span><span class='line'>    <span class="n">fresh_when</span> <span class="n">last_modified</span><span class="p">:</span> <span class="vi">@products</span><span class="o">.</span><span class="n">maximum</span><span class="p">(</span><span class="ss">:updated_at</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#only fetching one values to determine if the cache is up to date</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="c1">#which means that it doesn&#39;t have to render the whole view template</span>
</span><span class='line'><span class="c1">#and doesn&#39;t have to end up fetching all the products from the DB</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Should benchmark to see if you get a big performance boost</strong></li>
</ul>


<h3>Cache-Control</h3>

<ul>
<li>Set options on how caching should behave

<ul>
<li>validation</li>
<li>max-age</li>
<li>private

<ul>
<li>cache only stored for one user usually in the web browser and not a shared store like a proxy</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>Max-age</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">expires_in</span> <span class="mi">5</span><span class="o">.</span><span class="n">minutes</span>
</span><span class='line'><span class="c1">#this sets the max-age </span>
</span><span class='line'>  <span class="n">fresh_when</span> <span class="vi">@product</span><span class="p">,</span> <span class="kp">public</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="c1">#this public: true makes it available to multiple users</span>
</span><span class='line'><span class="c1">#through a proxy</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><a href="https://github.com/rtomayko/rack-cache">rack-cache</a> -></p>

<ul>
<li>sits on your server between a user requests and a rails app backend</li>
<li>rack cache has to be enabled in the dev environment and restart the server</li>
</ul>
</li>
<li><p>warning public to true because this given request is stored for every user.</p>

<ul>
<li><code>&lt;%= csrf_meta_tag unless response.cache_control[:public] %&gt;</code></li>
<li>should do for flash messages too</li>
</ul>
</li>
<li><p>avoid premature optimization, figure out what you need to cache</p></li>
<li>only set public to true only if you don&#8217;t have sensitive info on the page.</li>
</ul>


<h2>In the wild</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#sessions controller</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Octokit</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:oauth_token</span> <span class="o">=&gt;</span> <span class="n">auth</span><span class="o">.</span><span class="n">credentials</span><span class="o">.</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">load_cache_info</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#user model</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#this is the cache writter. Fetch is like a find_or_create</span>
</span><span class='line'><span class="k">def</span> <span class="nf">load_cache_info</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">nickname</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">expires_in</span><span class="p">:</span> <span class="mi">24</span><span class="o">.</span><span class="n">hours</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span> <span class="ss">:repos</span> <span class="o">=&gt;</span> <span class="n">client</span><span class="o">.</span><span class="n">repositories</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">nickname</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">repo</span><span class="o">|</span> <span class="n">repo</span><span class="o">.</span><span class="n">name</span> <span class="p">},</span>
</span><span class='line'>      <span class="ss">:following</span> <span class="o">=&gt;</span> <span class="n">client</span><span class="o">.</span><span class="n">following</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">nickname</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="n">user</span><span class="o">.</span><span class="n">login</span> <span class="p">},</span>
</span><span class='line'>      <span class="ss">:starred</span> <span class="o">=&gt;</span> <span class="n">client</span><span class="o">.</span><span class="n">starred</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">nickname</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">repo</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">repo</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">login</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">repo</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#this reads the cache which looks like a big hash</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user_cache</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">nickname</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cached_starred</span>
</span><span class='line'>  <span class="n">user_cache</span><span class="o">[</span><span class="ss">:starred</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cached_following</span>
</span><span class='line'>  <span class="n">user_cache</span><span class="o">[</span><span class="ss">:following</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cached_repos</span>
</span><span class='line'>  <span class="n">user_cache</span><span class="o">[</span><span class="ss">:repos</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-23T20:30:37-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gregg Pollack]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/gregg-pollack/"/>
    <updated>2012-10-23T15:00:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/gregg-pollack</id>
    <content type="html"><![CDATA[<h3>Transparency</h3>

<ul>
<li><p>Client closer to the team</p>

<ul>
<li>short feedback cycles

<ul>
<li>show work on a weekly basis</li>
</ul>
</li>
</ul>
</li>
<li><p>Understanding the why of your work</p>

<ul>
<li>clients often don&#8217;t know what they really want

<ul>
<li><p>ask questions</p>

<p>  In order to<em><strong><em>,
  as a </em></strong>,
  I want to </em>__.</p></li>
</ul>
</li>
</ul>
</li>
<li><p>Code is a craft.</p>

<ul>
<li>consulting is more challenging than a startup

<ul>
<li>scratching someone else&#8217;s itch is more challenging</li>
</ul>
</li>
</ul>
</li>
<li><p>There are things that you can delegate</p></li>
<li><p>Starting a book club- for both your company and those around you.</p></li>
<li><p>Use <a href="http://skitch.com/">Skitch</a> and <a href="http://www.techsmith.com/jing.html">Jing is like skitch for screencasting</a> to show off your work and improve feedback.</p></li>
<li><p><strong>Ask a company about their core values&#8230;</strong></p></li>
</ul>


<h3>Estimates</h3>

<ul>
<li>go to user stories right away</li>
<li>show the estimates of the of the features, not of the tasks that contribute to the feature</li>
<li>get away from big estimates immediately - we don&#8217;t show the granular estimates</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 reasons to quit your job and learn to code]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/3-reasons-to-quit-your-stupid-job-and-learn-to-code/"/>
    <updated>2012-10-23T13:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/3-reasons-to-quit-your-stupid-job-and-learn-to-code</id>
    <content type="html"><![CDATA[<p>In the first five minutes of my first programming class I knew I was in trouble. I didn&#8217;t know what a method was. I didn&#8217;t know what an array was. My teacher babbled on about controllers and TCP packets as I nervously glanced around wondering if I was the only with that pit in my stomach.</p>

<p>After class I went up to <a href="http://flatironschool.com/#people">Avi</a> and told him of my situation. He offered two choices: a refund <strong><em>or</em></strong> I could push through and take the class as many times as needed. At this point, I don&#8217;t think I&#8217;ll be getting my money back.</p>

<h2>Come on, you know you want to&#8230;</h2>

<p><strong>1. You probably aren&#8217;t that happy with your job.</strong>
There are lots of people who are perfectly happy with their jobs. The chances are, you aren&#8217;t one of them. I can&#8217;t believe how many of the people in my life complain about something they do a minimum of 8 hours a day. Few take action to make a change. Don&#8217;t let your future be defined by inaction.</p>

<p><strong>2. Tech is about as close to a meritocracy as you are going to find.</strong>
Unless you are the beneficiary of exceptional privilege, you probably wish that people would judge you on your merits rather than your: race, origin, sexual orientation, gender, hairstyle, or the color of your socks. In tech, people actually care about your skills. One&#8217;s pedigree means little in the absence of substance. It is how life should be. The best books should be read the most. The best actors should get the leading roles. The best candidate should get the job. In tech this actually happens.</p>

<p><strong>3. You don&#8217;t have to be a leecher anymore&#8230;</strong>
Since my Dad first popped in that AOL floppy disk in the mid-90s, I have been a consumer of the internet. I&#8217;ve sucked down untold hours of <a href="http://mlb.com">baseball news</a> and <a href="http://gawker.com/5952338/had-a-ruff-day-this-dog-video-is-guaranteed-to-improve-your-mood">dog videos</a>. <a href="http://www.flickr.com/photos/alanchan/"><img class="right" src="http://ajonas.herokuapp.com/images/aoldisk.jpg" width="250" title="AOL Floppy" ></a> I&#8217;ve used web applications to communicate with my family and plan my social life. I&#8217;ve logged onto the internet nearly every day of the second-half of my life. I decided last year that I was done being a suck on the system. <a href="http://mldraft.com">Mldraft</a> was my first attempt to contribute something and it wasn&#8217;t great. The experience did, however, fundamentally change my perspective on being a consumer. I&#8217;ll be a leecher no more and neither should you.</p>

<blockquote><p>The time for ideas is over.</p>

<pre><code> -[Joe Devenuta, Flatiron School class of 2012](https://twitter.com/dhh)
</code></pre></blockquote>

<p>There are so many resources to get started. There are so many <a href="http://ajonas.herokuapp.com/blog/2012/10/10/code-school-vs-treehouse-vs-code-academy/">online tutorials</a> and <a href="http://www.meetup.com/nyc-on-rails/">Meetups</a>. You don&#8217;t need to be a math whiz or a hermit to be a programmer. If you have ever learned a foreign language; if you have ever spent hours at a time trying to master a song on guitar; if you have ever spent a full afternoon improving your free throw then you can learn to code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day14]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/fis-day14/"/>
    <updated>2012-10-23T09:45:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/fis-day14</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>DHH- you know who he is.</p>

<p>Stubs:
A method stub is an implementation that returns a pre-determined value. Method stubs can be declared on test doubles or real objects using the same syntax. rspec-mocks supports 3 forms for declaring method stubs:</p>

<p><a href="http://www.martinfowler.com/articles/mocksArentStubs.html">Mocks aren&#8217;t stubs</a></p>

<figure class='code'><figcaption><span>RSpec Hooks</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rspec/expectations&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;before and after callbacks&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;before all&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;before each&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;after each&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;after all&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;gets run in order&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.relishapp.com/rspec/rspec-core/v/2-2/docs/hooks/before-and-after-hooks">before and after hooks</a></p>

<h3>Git Error</h3>

<figure class='code'><figcaption><span>RSpec Hooks</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">You</span> <span class="n">asked</span> <span class="n">me</span> <span class="n">to</span> <span class="n">pull</span> <span class="n">without</span> <span class="n">telling</span> <span class="n">me</span> <span class="n">which</span> <span class="n">branch</span> <span class="n">you</span>
</span><span class='line'><span class="n">want</span> <span class="n">to</span> <span class="n">rebase</span> <span class="n">against</span><span class="p">,</span> <span class="ow">and</span> <span class="s1">&#39;branch.master.merge&#39;</span> <span class="k">in</span>
</span><span class='line'><span class="n">your</span> <span class="n">configuration</span> <span class="n">file</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">tell</span> <span class="n">me</span><span class="p">,</span> <span class="n">either</span><span class="o">.</span> <span class="no">Please</span>
</span><span class='line'><span class="n">specify</span> <span class="n">which</span> <span class="n">branch</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">use</span> <span class="n">on</span> <span class="n">the</span> <span class="n">command</span> <span class="n">line</span> <span class="ow">and</span>
</span><span class='line'><span class="n">try</span> <span class="n">again</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="s1">&#39;git pull &lt;repository&gt; &lt;refspec&gt;&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">See</span> <span class="n">git</span><span class="o">-</span><span class="n">pull</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">details</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">If</span> <span class="n">you</span> <span class="n">often</span> <span class="n">rebase</span> <span class="n">against</span> <span class="n">the</span> <span class="n">same</span> <span class="n">branch</span><span class="p">,</span> <span class="n">you</span> <span class="n">may</span> <span class="n">want</span> <span class="n">to</span>
</span><span class='line'><span class="n">use</span> <span class="n">something</span> <span class="n">like</span> <span class="n">the</span> <span class="n">following</span> <span class="k">in</span> <span class="n">your</span> <span class="n">configuration</span> <span class="n">file</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="n">branch</span> <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">remote</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">nickname</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">merge</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">remote</span><span class="o">-</span><span class="n">ref</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">rebase</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;&lt;nickname&gt;&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">url</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">fetch</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">refspec</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/11407161/cant-pull-without-saying-which-branch-to-rebase-against">see</a></p>

<p><a href="http://en.wikipedia.org/wiki/Ted_Nelson">hypertext was coined by</a></p>

<h2>Rails Lecture</h2>

<p>as a client you identify your attributes to a webserver in your headers
in theory, you don&#8217;t need anything in the header.</p>

<ul>
<li>a request must have a url and a method</li>
<li>a response has it&#8217;s own headers

<ul>
<li>shows the kind of content type</li>
<li>displays the body and the content (like the HTML)</li>
</ul>
</li>
<li>hypertext transfer protocol (http)</li>
</ul>


<h3>HTTP verbs:</h3>

<ul>
<li>get: retrieve</li>
<li>post: submits data- appropriate if you are submitting entirely new data</li>
<li>put: update</li>
<li>delete: delete this resource</li>
<li>head: asks for response like a GET but without the body</li>
<li>trace, options, connect, patch: we don&#8217;t care about</li>
</ul>


<h3>Convention over configuration</h3>

<p><strong>Naming Scheme</strong>
table: songs
model: song.rb
controller: songs_controller.rb
views: songs/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal Design Patterns and Gotchas]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/22/personal-design-patterns/"/>
    <updated>2012-10-22T09:47:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/22/personal-design-patterns</id>
    <content type="html"><![CDATA[<p>For when I get in trouble?</p>

<ul>
<li>Do I want to be accessing an attribute of an object or the object itself?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day13]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13/"/>
    <updated>2012-10-21T19:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;It is much easier to optimize correct code than it is to correct optimized code.&#8221;</p></blockquote>

<h3>POTD Uncle Bob</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Robert_Cecil_Martin">Wikipedia</a></li>
<li><a href="http://agilemanifesto.org/">Agile manifesto</a></li>
</ul>


<h3>Nate Westheimer</h3>

<ul>
<li>? What kind of startups would you like to work at?</li>
<li>? Since we are starting with a blank slate, what would you spend your time learning? Mobile? What skills will ensure you will be valuable for the next few years?</li>
<li>? why choose mysql over other db options, how do you make other architectural decisions since you may not have a bird&#8217;s eye view?</li>
<li>? controlling feature creep - where i live based on the photos&#8211; necessary? A: intuition</li>
</ul>


<p><strong>Mentions:</strong></p>

<ul>
<li><a href="http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html">comparing pictures</a></li>
<li>imagemagick- gem for manipulating photos</li>
<li><a href="http://stu.mp/2004/06/a-quick-bitmask-howto-for-programmers.html">bit mask</a></li>
<li>vertical color palette is spits out top 5 colors out my <a href="http://www.imagemagick.org/script/index.php">imagemagick</a></li>
<li><a href="http://www.merbivore.com/">merb</a>- a product people love because it&#8217;s simple</li>
<li><a href="http://digital-photography-school.com/using-exif-data">exif</a> data in the photos</li>
<li><a href="http://www.amazon.com/iWoz-Computer-Invented-Personal-Co-Founded/dp/0393330435/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1350920465&amp;sr=1-1&amp;keywords=iwoz">IWOZ</a> by Steve Wozniak</li>
<li><a href="http://www.amazon.com/Soul-New-Machine-Tracy-Kidder/dp/0316491977">soul of the new machine</a></li>
</ul>


<h3>TDD</h3>

<p>Setup and tear down methods come with every test suite.</p>

<ul>
<li>CLI application for the dynamic</li>
<li>test the job board classes, using SQL joins&#8211; class called job and a class called company</li>
<li>test the student class in the dynamic site</li>
<li>focus on Sinatra- put a front end on the job board</li>
<li>find what they scraped and build an end all be all of job scrapers.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile with  Matt Salerno]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/19/agile-with-matt-salerno/"/>
    <updated>2012-10-19T13:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/19/agile-with-matt-salerno</id>
    <content type="html"><![CDATA[<h2>Agile is&#8230;</h2>

<p><strong><em>is about getting input from your environment</em></strong></p>

<ul>
<li>many agile dev techniques, come from Toyota and lean manufacturing

<ul>
<li>if they were based on 1000 cars a day metric and the suppliers or demand change, Toyota needed to avoid</li>
</ul>
</li>
</ul>


<p><em>split the process into small parts to reduce waste and inefficiency</em></p>

<ul>
<li>set up frequent opportunities for assessment and feedback</li>
<li>plan only as far ahead as you need to. Your environment WILL change.</li>
<li>break the process down into the smallest possible units</li>
</ul>


<h3>Small Pieces</h3>

<ul>
<li>break the task down and break the time frames down</li>
<li>sprints: in an avg dev shop, a sprint might be from 2-3 weeks

<ul>
<li>for a day project, we use sprints from</li>
</ul>
</li>
</ul>


<p><strong>Get feedback so that you can fail faster</strong></p>

<h3>Process</h3>

<ol>
<li>sprint planning session</li>
<li>sprint</li>
<li>retrospective</li>
</ol>


<h3>Stories</h3>

<p>Epic > stories > task</p>

<ul>
<li>Story = what is this code going to do?

<ul>
<li>break the story down into tasks to make that happen</li>
</ul>
</li>
</ul>


<h3>Planning session</h3>

<ul>
<li>beginning of the project, you start out with a planning session.

<ul>
<li>the client and the user can identify the NEED TO HAVES and WANT TO HAVES

<ul>
<li>which stories are we going to pull out from the backlog</li>
</ul>
</li>
<li>reduce you waste because the client is going to change their mind</li>
</ul>
</li>
</ul>


<h3>Agile is sort of the like:</h3>

<ul>
<li>~= small git commits</li>
<li>~= TDD</li>
</ul>


<p><strong><em>Nice job <a href="https://twitter.com/seldomatt">Matt</a></em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day12]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/19/fis-day12/"/>
    <updated>2012-10-19T09:36:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/19/fis-day12</id>
    <content type="html"><![CDATA[<h3>POTD: Tim Berners-Lee</h3>

<ul>
<li>physicist</li>
<li>invented the world wide web in 1989 @ <a href="http://public.web.cern.ch/public/">Cern</a></li>
<li><a href="http://en.wikipedia.org/wiki/Marshall_McLuhan">Marshall_McLuhan</a></li>
</ul>


<h3>Modules</h3>

<p><strong>Dogs and humans can both run, so should they inherit from runner or runnable?</strong></p>

<p>We put this shared behavior into a module so that the class can include or <strong>mixin</strong> modules.</p>

<p>modules can include other modules</p>

<p>include - is for the instance methods
extend - is for the class methods</p>

<p>super - call the same exact message on the class above</p>

<figure class='code'><figcaption><span>Simple Inheritance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'> <span class="kp">attr_accessor</span> <span class="ss">:legs</span>
</span><span class='line'>
</span><span class='line'> <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">legs_count</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@leg</span> <span class="o">=</span> <span class="n">legs_count</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Human</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:hair_color</span> <span class="c1">#this is an additional accessor</span>
</span><span class='line'>  <span class="c1">#and doesn&#39;t over-ride any #other attr_accessor</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#this overides the initialize in the Animal class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#super sexy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>The Builder Pattern</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Movement</span><span class="o">::</span><span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Human</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Movement</span><span class="o">::</span><span class="no">Animal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Movement</span><span class="o">::</span><span class="no">Human</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ERB</h3>

<p>The <a href="http://www.ruby-doc.org/stdlib-1.9.3/">standard library</a> is separate because you can release ruby and the standard lib without updating the release of the other</p>

<p>&lt;%=  %> (known as a delimiter) is like interpolation for a template</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;erb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="c1">#EOF = end of file</span>
</span><span class='line'><span class="n">template</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span>
</span><span class='line'><span class="sh"> the value of x is: &lt;%= x %&gt;</span>
</span><span class='line'><span class="no">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span> <span class="c1">#the value of x is :42</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">24</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span> <span class="c1">#the value of x is: 24</span>
</span></code></pre></td></tr></table></div></figure>


<p>binding - is equal to the current scope - return to me everything in the universe that happened at this point in time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heroku deployment]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/18/heroku-deployment/"/>
    <updated>2012-10-18T11:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/18/heroku-deployment</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Initialize the repository
</span><span class='line'>$ git init
</span><span class='line'>
</span><span class='line'># Add new files to the repo
</span><span class='line'>$ git add .
</span><span class='line'>
</span><span class='line'># See the status
</span><span class='line'>$ git status
</span><span class='line'>
</span><span class='line'># Commit the changes with the commit message "testing"
</span><span class='line'>$ git commit -m "testing"
</span><span class='line'>
</span><span class='line'># Create a new Heroku app
</span><span class='line'>$ heroku create
</span><span class='line'>
</span><span class='line'># Rename the Heroku app
</span><span class='line'># Example: $ heroku rename tom-messages
</span><span class='line'>$ heroku rename &lt;name of url&gt;
</span><span class='line'>
</span><span class='line'># Add a (free) PostgreSQL database to your app
</span><span class='line'>$ heroku addons:add heroku-postgresql
</span><span class='line'>
</span><span class='line'># See the details of your new database
</span><span class='line'>$ heroku pg:info
</span><span class='line'>
</span><span class='line'># Promote your new database to the "DATABASE_URL" global constant
</span><span class='line'># Example: $ heroku pg:promote HEROKU_POSTGRESQL_BRONZE_URL
</span><span class='line'>$ heroku pg:promote &lt;YOUR_HEROKU_URL&gt;
</span><span class='line'>
</span><span class='line'># Push your repo to Heroku, start your app
</span><span class='line'>$ git push heroku master
</span><span class='line'>
</span><span class='line'># Open the app in your browser
</span><span class='line'>$ heroku open
</span><span class='line'>
</span><span class='line'># See your app's log, keep the stream open by using "--tail"
</span><span class='line'>$ heroku logs --tail
</span><span class='line'>
</span><span class='line'># Set up the database for first use, running "DataMapper.auto_migrate!"
</span><span class='line'># Example: $ http://ajonas.herokuapp.com/reset
</span><span class='line'>$ http://&lt;project-name&gt;.herokuapp.com/reset
</span><span class='line'>
</span><span class='line'># See your messages!
</span><span class='line'># Example: $ http://ajonas.herokuapp.com
</span><span class='line'>$ http://&lt;project-name&gt;-messages.herokuapp.com</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day11]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/18/fis-day11/"/>
    <updated>2012-10-18T09:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/18/fis-day11</id>
    <content type="html"><![CDATA[<h3>POTD: Adele Goldberg</h3>

<ul>
<li>developed smalltalk and design patterns</li>
<li>WIMP: windows, icons, menus, pointers.</li>
</ul>


<h3>Making the student pages dynamic</h3>

<p>user:</p>

<ul>
<li>go to any of the 20 pages and get unique content</li>
</ul>


<p>write tests:</p>

<ul>
<li>write failing test</li>
</ul>


<p>create a cms</p>

<ul>
<li>pull data: use db from</li>
<li>add data</li>
</ul>


<p>sinatra interact with db</p>

<ul>
<li>create erb views,</li>
<li>paths in sinatra</li>
</ul>


<p>sinatra front end
hash student</p>

<p>create a class called student so that the hash
student.find[1] - has all the</p>

<p>hardcode the data on the front end
while the backend is done by the other group</p>

<p>(column names are the key and values are the rows.)</p>

<p>Git co in a branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git co &lt;specific file&gt;
</span><span class='line'>#will pull in the file from the master branch</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day10]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/17/fis-day10/"/>
    <updated>2012-10-17T09:42:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/17/fis-day10</id>
    <content type="html"><![CDATA[<p>Yaml is more about structured data. Markdown is more about content.</p>

<p>Koans don&#8217;t really demonstrate variable scope.</p>

<p>Vint Cerf:</p>

<blockquote><p>built TCP</p></blockquote>

<h3>Programmer of the day</h3>

<p>Kent Beck:</p>

<ul>
<li>invented smalltalk</li>
<li>smalltalk design patterns, refactoring, test-driven development, extreme programming, the agile manifesto</li>
</ul>


<blockquote><p><strong>The nature of errors are unmet expectations</strong> you made an assumption and for some reason that is not longer true.</p></blockquote>

<h3>Test Driven Development</h3>

<p>define your expectation</p>

<ul>
<li><strong>writing tests is writing the code I wish I had</strong></li>
<li><strong>testing is not about quality assurance</strong></li>
</ul>


<p>If you are using a case statement your code isn&#8217;t object oriented.</p>

<p><a href="http://sqlite-ruby.rubyforge.org/sqlite3/faq.html">execute batch</a></p>

<h2>Ruby</h2>

<h3>Hooks</h3>

<figure class='code'><figcaption><span>initialize</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#by specifying that initialize </span>
</span><span class='line'>  <span class="c1">#in initialize its very much ok to use initialize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>class Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Artist</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">top_5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Artist</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>  <span class="c1">#this method is hard to read if you are scrolled all the way down.</span>
</span><span class='line'>  <span class="c1">#it doesn&#39;t explicitly say it&#39;s a class method in the method signature</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">top_5</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mini Library Project</h3>

<figure class='code'><figcaption><span>Lessons Learned</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="n">find_songs</span><span class="p">(</span><span class="n">library</span><span class="p">,</span> <span class="s2">&quot;Poker Face&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s2">&quot;Poker Face&quot;</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">e</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#notice that find_songs has an implicit receiver. Since it&#39;s not a </span>
</span><span class='line'><span class="c1">#class method, it has to be called OUTSIDE a class...</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ALSO</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">search_songs</span><span class="p">(</span><span class="n">library</span><span class="p">,</span> <span class="n">song</span><span class="p">)</span>
</span><span class='line'>    <span class="n">library</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">find_all</span> <span class="p">{</span> <span class="o">|</span><span class="n">ea_song</span><span class="o">|</span> <span class="n">ea_song</span> <span class="k">if</span> <span class="n">ea_song</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">song</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#make sure that I&#39;m calling the .find_all on an ATTRIBUTE of an object. &#39;Come on Jonas,&#39; you are better than that.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day9]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/16/fis-day9/"/>
    <updated>2012-10-16T09:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/16/fis-day9</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Alan Kay</p>

<ul>
<li>think of programming and computers as metaphors</li>
<li>Created the GUI</li>
<li>GUI and object orientation are totally in line</li>
</ul>


<p>The hyperlink makes the internet unique. Embedding context and meta-data is what make the internet special.</p>

<h3>Object Orientation</h3>

<p>Chinese proverb:</p>

<blockquote><p>The beginning of wisdom is to call things by their right names.</p></blockquote>

<p>Defining new kinds of things and bringing these to code. We should be able to create our own things. Teach those things how to work. And use those things.</p>

<ul>
<li>class Names are arbitrary and simply point to a block of behaviors. They are just variables</li>
<li>the difference between variable types is the scope. The context in which they were created.</li>
<li>a class and a module represent the same behavior and scope gate</li>
<li>a constant defined in a class are only accessible in that class</li>
<li>classes can&#8217;t inherit from modules</li>
</ul>


<figure class='code'><figcaption><span>Namespacing with ::</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dog</span><span class="o">::</span><span class="no">Colors</span>
</span><span class='line'><span class="c1">#go into the name class and get me colors</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>An instance variable is totally dependent on which object you are referring to. Every time you assign an instance variable you are teaching properties to the object.

<ul>
<li>It is not the responsibility of each dog (snoopy, pluto, etc.) to know anything about any other dog.</li>
<li>It is the classes responsibility to know about the class, but not about each individual dog.</li>
</ul>
</li>
</ul>


<p><strong>classes are</strong> object, logic and data</p>

<p>method overriding- changing what a method does</p>

<h3>Referential integrity</h3>

<p>Foreign key relationships are described as parent/child relationships (customer being the parent, and customer_sales the child), and the record is said to be orphaned when its parent is no longer in existence.</p>

<p>Referential integrity can be compromised in three situations: when creating a new record, deleting a record or updating a record.</p>

<p>You can delete a record from customer and at the same time delete the record from the customer_sales table, using only one delete statement. This is called a cascading delete, where all associated records are deleted, &#8216;cascading&#8217; through the tables according to the foreign key relationships.</p>

<p>The standard options when deleting a foreign key are listed below:</p>

<ul>
<li>ON DELETE CASCADE</li>
<li>ON DELETE SET NULL</li>
<li>ON DELETE RESTRICT</li>
<li>ON DELETE NO ACTION</li>
<li>ON DELETE SET DEFAULT</li>
</ul>


<h3>Fun</h3>

<p><a href="http://en.wikipedia.org/wiki/Code_golf">Code golf</a> is a type of recreational computer programming competition in which participants strive to achieve the shortest possible code that implements a certain algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack and Sinatra]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/15/rack-and-sinatra/"/>
    <updated>2012-10-15T13:11:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/15/rack-and-sinatra</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/blacktm">Tom Black</a></p>

<h3>Programmer of the day</h3>

<p>John Carmack- creator of quake, doom</p>

<blockquote><p>Programming is not a zero-sum game. Teaching something to a fellow programmer doesn&#8217;t take it away from you. I&#8217;m happy to share what I can, because I&#8217;m in it for the love of programming.</p></blockquote>

<p><em>Think about solutions not syntax</em></p>

<p>Rack</p>

<blockquote><p>A modular web server interface</p></blockquote>

<p>Rack App</p>

<blockquote><p>a ruby object that responses to a call method, taking a single hash parameter and returning an array which contains the response status code, response headers</p></blockquote>

<p>Middleware</p>

<blockquote><p>stuff stuck in the middle of a process</p></blockquote>

<p>rack sits in the middle of your app and webserver</p>

<h3>Sinatra</h3>

<blockquote><p>is a dsl for quickly creating web applications in Ruby with minimal effort.</p></blockquote>

<p>Is just a facade
webserver -> middleware -> sinatra -> your app</p>

<p><em>Sinatra is closer to rack&#8217;s older brother than rails is to sinatra.</em></p>

<p>Rails is a full-stack web application framework.</p>

<p><a href="http://www.blacktm.com/docs/talks/building_web_apps_with_rack_and_sinatra">Project page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day8]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/15/fis-day8/"/>
    <updated>2012-10-15T09:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/15/fis-day8</id>
    <content type="html"><![CDATA[<p>Domain Models
TDD</p>

<p><a href="http://www.evolutionoftheweb.com/">Evolution of the web</a></p>

<p><a href="http://frozen-citadel-3574.herokuapp.com/blog/2012/10/09/string-concatenation-the-right-way-the-fastest-way/">String Concatenation the Right Way; the Fast and Furious Way</a></p>

<figure class='code'><figcaption><span>.upto method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">fizzbuzz</span><span class="p">(</span><span class="n">i</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Building a prime method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">expectation</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;true&quot;</span> <span class="k">if</span> <span class="n">expectation</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Integer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">self</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>          <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="nb">self</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">#=&gt; number is not prime</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="mi">1</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="mi">2</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="mi">3</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="o">!</span><span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="n">prime?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>SELF is always the receiver the method called on</strong></p>

<figure class='code'><figcaption><span>Dot Notation &#8211; calling on the right receiver</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="n">inspect</span> <span class="c1">#will break because &#39;inspect&#39; is being called on 4, not the range.</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span> <span class="n">is</span> <span class="n">the</span> <span class="n">proper</span> <span class="n">syntax</span>
</span></code></pre></td></tr></table></div></figure>


<p>each just returns the original array</p>

<figure class='code'><figcaption><span>inject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#=&gt; {:1=&gt;1, :2=&gt;4, :3=&gt;9}</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">squares</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">squares</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">i</span><span class="o">*</span><span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">squares</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Collect / Map</h3>

<p>each just returns the <strong>original array</strong>
We want to be expression oriented.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># this is NOT expression oriented</span>
</span><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="p">;</span> <span class="n">i</span><span class="p">}</span> <span class="c1">#i is a newline character #=&gt; [1,2,3]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>If you are chaining onto the return value, even if it is on one line.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">detect</span> <span class="p">(</span><span class="n">will</span> <span class="k">return</span> <span class="n">the</span> <span class="n">first</span> <span class="n">value</span> <span class="k">for</span> <span class="n">which</span> <span class="n">the</span> <span class="n">block</span> <span class="n">is</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>.select will return all, .detect will return the first.
.reject returns all the values for which the block is false (the opposite of select)</p>

<p>.select will return an empty array if no values are found, but .detect will return nil since it will only return one value&#8230;</p>

<p>.all? is sort of like a case statement except you get to use your own comparison</p>

<p><a href="http://foragoodstrftime.com/">string for time</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DCI]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/13/dci/"/>
    <updated>2012-10-13T17:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/13/dci</id>
    <content type="html"><![CDATA[<h3>tl;dr</h3>

<p><em>In DCI, Objects are viewed as whole objects rather than a composition of parts. e.g. fido is not seen as part class Animal and class MansBestFriend.</em></p>

<h3>What is DCI?</h3>

<ul>
<li>Data</li>
<li>Context</li>
<li>Interaction</li>
</ul>


<h3>What are its goals?</h3>

<ul>
<li>To improve the readability of object-oriented code by giving system behavior first-class status;</li>
<li>To cleanly separate code for rapidly changing system behavior (what the system does) from code for slowly changing domain knowledge (what the system is), instead of combining both in one class interface;</li>
<li>To help software developers reason about system-level state and behavior instead of only object state and behavior;</li>
<li>To support an object style of thinking that is close to peoples&#8217; mental models, rather than the class style of thinking that overshadowed object thinking early in the history of object-oriented programming languages.</li>
</ul>


<blockquote><p>The paradigm separates the domain model (data) from use cases (context) and roles that objects play (interaction). DCI is complementary to model–view–controller (MVC).</p></blockquote>

<h3>Why?</h3>

<p>Some objects do different things in different parts of your application. You cannot use inheritance to cover the varying behaviour as the behaviours should change back and forth. The object just behaves different depending on the context.</p>

<blockquote><p>DCI is about much more than just extending objects at runtime. It&#8217;s about capturing the end user&#8217;s mental model and reconstructing that into maintainable code.</p></blockquote>

<h3>What DCI is thought as, but isn&#8217;t</h3>

<p>#extend as the go-to means of adding methods to objects at runtime.</p>

<p>The important thing to know about DCI is that it&#8217;s about more than just code. It&#8217;s about process and people. It starts with principles behind Agile and Lean and extends those into code. The real benefit of following DCI is that it plays nicely with Agile and Lean. It&#8217;s about code maintainability, responding to change, and decoupling what the system does (its functionality) from what the system is (its data model).</p>

<h3>Data</h3>

<ul>
<li>The system are the actors

<ul>
<li>Object thinking instead of class thinking</li>
</ul>
</li>
<li>correspond closely to the model objects of MVC.</li>
</ul>


<blockquote><p>An example of a data object could be a bank account. Its interface would have basic operations for increasing and decreasing the balance and for inquiring about the current balance. The interface would likely not offer operations that involve transactions, or which in any way involve other objects or any user interaction. So, for example, while a bank account may offer a primitive for increasing the balance, it would have no method called deposit. Such operations belong instead in the interaction part of DCI.</p></blockquote>

<h3>Context</h3>

<p><em>the environment for which Data objects execute their Role. The goal of the Context is to connect Roles (what the system does) to Data objects (what the system is).</em></p>

<ul>
<li>How the system looks and starts -> the director</li>
<li>There is always at least one Context for every one user story</li>
<li>Identify objects and assign them roles at runtime</li>
<li>Use case functionality = data object with assigned roles combined.</li>
</ul>


<h3>Interaction</h3>

<ul>
<li>&#8220;What a system does&#8221; -> its role</li>
<li>Roles played by objects</li>
<li>stateless</li>
<li>Call methods on self (=playing object)</li>
<li>Interactions are generic</li>
</ul>


<h3>DCI in rails</h3>

<ul>
<li>data => ActiveRecord model: The Data should really only consist of persistence-level methods, never how the persisted data is used.

<ul>
<li>DCI suggests that we keep our core model classes very thin. Zero logic, only data, if anything.

<ul>
<li>The logic/ behavior should be kept in roles. In Ruby we can nicely use mixins for that</li>
</ul>
</li>
</ul>
</li>
<li>context => Controller action or separate workflow case: we trigger our Context within the Controller.</li>
<li>roles => Module to mix in</li>
</ul>


<p><img src="http://ajonas.herokuapp.com/images/MVC_DCI.jpeg" title="Rails: MVC and DCI" ></p>

<p>DCI reduces the number of objects in your project, but increases the number
of roles they play.</p>

<h3>Characteristics of DCI</h3>

<p><em>In DCI, Objects are viewed as whole objects rather than a compositon of parts. e.g. fido is not seen as part class Animal and class Friend.</em></p>

<ul>
<li>An object-oriented program is a complex and dynamic network of objects, in the same sense that relationships between real-world objects are complex and dynamic.</li>
<li>The object has its own identity independent of the use case; this is the Data facet of DCI.</li>
<li>Roles are aliased names for their objects but are never separate objects themselves; that would cause self schizophrenia.</li>
</ul>


<h3>In the Wild</h3>

<ul>
<li>DCI depends on a design process that separates use cases from the data model.</li>
<li>DCI can be thought of as an event-driven paradigm, where some event (as a human gesture in an MVC architecture) triggers a use case. The use case can be short-lived or long-lived. The events are called triggers, and they are handled in the environment in which DCI has been embedded. This environment may be the Controller of a conventional MVC architecture or any other system-level code.</li>
</ul>


<figure class='code'><figcaption><span>An over-simplified example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span><span class="p">;</span> <span class="k">end</span> <span class="c1"># Data</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Labrador</span> <span class="c1"># Role</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bark</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span> <span class="c1"># Context</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">extend</span> <span class="no">Labrador</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">bark</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Problems with DCI</h3>

<ol>
<li>It requires a large paradigm shift. It&#8217;s designed to compliment MVC (Model-View-Controller) so it fits well into Rails, but it requires you to move all your code outside the controller and model. As we all know, the Rails community has a fetish for putting code in models and controllers. The paradigm shift is large, something that would require a large refactor for some apps. However, DCI could probably be refactored in on a case-by-case basis allowing apps to gradually shift from &#8220;fat models, skinny controllers&#8221; to DCI.</li>
<li>It potentially carries performance degradations, due to the fact that objects are extended ad hoc.</li>
</ol>


<h3>History</h3>

<p>DCI arose largely as an outgrowth of Trygve Reenskaug&#8217;s work on role-based modeling. Trygve had long recognized that Roles played a central part in the way we think about objects, and that the class-based progression of programming language technology took away much of the motivation to think about the objects in a program. That in turn made it difficult to reason about the program at run time. Further, the fact that object-oriented programming languages offered only classes to express program logic left the programmer at the mercy of the structural layout of the data to delineate behavior, which is unnatural compared with a delineating behavior on Role boundaries.</p>

<h3>Sources</h3>

<ul>
<li><a href="https://speakerdeck.com/u/mordaroso/p/dci-and-ruby">Primary source</a> a presentation without sound. It didn&#8217;t help much.</li>
<li><a href="http://en.wikipedia.org/wiki/Data,_Context,_and_Interaction">wikipedia</a></li>
<li><a href="http://mikepackdev.com/blog_posts/24-the-right-way-to-code-dci-in-ruby">The Right Way to Code DCI in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day7]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/12/fis-day7/"/>
    <updated>2012-10-12T09:46:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/12/fis-day7</id>
    <content type="html"><![CDATA[<p>So this was on hacknews, but I thought this article was awesome: [Why the laptop has such a hard time catching on].(http://www.theatlantic.com/technology/archive/2012/09/why-the-first-laptop-had-such-a-hard-time-catching-on-hint-sexism/262220/)</p>

<h2>Beauty in code</h2>

<p><em>pythagoras</em>: beauty in numbers. He found the blacksmith&#8217;s sounds of hammers were beautiful. It was based on the proportion of the hammers&#8211; ended up being the basis of music theory. The ratios were also integrated into Greek Architecture.</p>

<p><em>Thomas Aquinas</em></p>

<ol>
<li>proportion</li>
<li>integrity (also have to be able to do the job they need to do and do it well)</li>
<li>Clarity (simplicity and clear)</li>
</ol>


<p>There is a balance between these three points:
if a command triggers something very powerful it violates the clarity requirement because so much is happening under the hood.</p>

<p>&#8220;Goodness is beauty in action&#8221;
It just so happens that learning how to write software better, happen to comply with the characteristics of beauty.</p>

<p>Elegance is about restraint</p>

<p>One isn&#8217;t perfect and the other isn&#8217;t wrong&#8211; it&#8217;s the tension between opposing sides is what makes it work. (think ying/yang &amp; star wars)</p>

<h2>Programmer of the Day</h2>

<p><em>Larry Wall:</em></p>

<ul>
<li>inventor of perl</li>
<li>optimized for human read-ability and not performance</li>
<li>modernists believe in a OR b, post-modern believe in AND ~> polymorphic interfaces</li>
</ul>


<p>Programming Virtues:</p>

<ul>
<li>laziness: build a script because we won&#8217;t accept the long process of manual task</li>
<li>impatient: things that are slow, you just won&#8217;t use</li>
<li>hubris: Belief in yourself to tackle a problem that no one else thinks is possible.</li>
</ul>


<h3>rsync</h3>

<p>How to move lots of files around. For moving files or music to a server since mac osx is so terrible at moving files.</p>

<h1>Ruby</h1>

<p><em>case statements</em> AKA switch it</p>

<p>case y #the condition you want to compare it against
when 3
when 2,4</p>

<p>just like y ===3
y===2 || y ===4</p>

<p>integers are immutable (so are booleans, nil, and symbols)</p>

<p><strong><em>When you have multiple branches of an if statement and you are comparing multiple values, then a case statement is probably more appropriate</em></strong></p>

<p>If statement is for controlling flow and when is for switching state.</p>

<p>?? Need to understand state</p>

<p><a href="http://worrydream.com">Brett Victor</a>.</p>

<h3>While</h3>

<p>is a ruby keyword. It&#8217;s a construct, not a method.</p>

<figure class='code'><figcaption><span>While e.g.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="n">x</span><span class="o">&lt;</span><span class="mi">10</span>
</span><span class='line'> <span class="nb">puts</span> <span class="n">x</span>
</span><span class='line'> <span class="n">x</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>building each with while</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array_length</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array_length</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="s2">&quot;yellow&quot;</span><span class="p">,</span> <span class="s2">&quot;green&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">each</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">color</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">color</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>??I&#8217;m not getting yield</p>

<p>[array][-1] -> called a negative index</p>

<p>literal constructors</p>

<ul>
<li>[1,2,nil, nil,5]</li>
<li>&#8221;&#8221;</li>
<li>{}</li>
<li>// -> regex</li>
</ul>


<p>Stopping a loop:</p>

<ul>
<li>the break keyword will exit the current loop.</li>
<li>return will break the loop but also return the value</li>
<li>next</li>
</ul>


<figure class='code'><figcaption><span>next keyword</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s2">&quot;Billy&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="k">next</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="s2">&quot;Billy&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">next</span> <span class="c1">#=&gt; &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>shout.upcase -> dot notation</p>

<figure class='code'><figcaption><span>||=</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">||=</span> <span class="mi">1</span> <span class="c1">#is the same as</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Helpful methods&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">position</span><span class="p">,</span> <span class="s1">&#39;insertion&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;find the w&quot;</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="c1">#=&gt; 9</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">scan</span> <span class="c1">#=&gt; returns all the matches</span>
</span><span class='line'><span class="o">.</span><span class="n">match</span> <span class="c1">#=&gt; returns the first it finds</span>
</span></code></pre></td></tr></table></div></figure>


<p>?? slug def
space is considered empty?</p>

<h3>&amp;&amp; vs and</h3>

<ul>
<li>use and for joining routines</li>
<li>use &amp;&amp; for conditions</li>
</ul>


<h3>Scope</h3>

<ul>
<li>something is in scope when the context it which it was defined and used is the same</li>
</ul>


<p>scope gates: anytime when you change the scope</p>

<p>blocks are scope gates. blocks have shared scope. If defined outside the block it is accessible in the block. Whatever is defined within the block is NOT accessible outside the block.</p>

<p>Methods have exclusive scope gates: are very strict. Parameters are the way to pass in info into a method.</p>

<p>You wouldn&#8217;t be able to reuse variables if you didn&#8217;t have scope&#8230;</p>

<h3>Hashes</h3>

<figure class='code'><figcaption><span>New Notation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="n">hello</span><span class="p">:</span> <span class="s2">&quot;World&quot;</span><span class="p">}</span> <span class="c1">#=&gt; {:hello =&gt; &quot;World&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can use anything has a key
weird_hash {</p>

<pre><code>[0]=&gt; "an array",
1=&gt; "number one"
"1"=&gt; "string one"
</code></pre>

<p>}
weird_hash[[0]]
weird_hash[1]
weird_hash[&#8220;1&#8221;]</p>

<p><strong>variables are just pointers they are things</strong></p>

<p>we use symbols because they are immutible</p>

<ul>
<li>Nesting
In general, we don&#8217;t need to go 3 levels deep.</li>
</ul>


<p><strong>Garbage collection refers to the ability to let go of memory</strong></p>

<p>When you iterate over over a hash you need to think of the :key=>value pair as one unit. Seperating doesn&#8217;t make sense.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">alphabet</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="n">alphabet</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">arr</span><span class="o">|</span>
</span><span class='line'>  <span class="n">arr</span> <span class="c1">#=&gt; [:a,1] [:a,2]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Useful methods on arrays</h3>

<ul>
<li>.compact -> remove all nil values</li>
<li>.uniq -> uniq values only</li>
<li>.flatten -> will remove nesting from an array</li>
<li>.join() -> join with a delimiter</li>
<li>.reverse</li>
<li>.reverse!</li>
<li>.insert</li>
<li>.pop() -> the argument it accepts is number of values it pops</li>
<li>.shift -> the reverse of pop - removes the first element</li>
<li><em>.pop is to shift was unshift is to push</em></li>
<li>.slice -> does not modify the original</li>
<li>.delete() -> index position and return the value</li>
<li>.index() -> position</li>
</ul>


<p>puts method.inspect is similar to print</p>

<p><em>pop is to shift was unshift is to push</em>
<a href="https://speakerdeck.com/u/mordaroso/p/dci-and-ruby">DCI presentationn</a></p>

<p><a href="https://speakerdeck.com/u/mattyoho/p/exploiting-the-resource-idiom">resource idiom</a></p>

<p><a href="https://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-ruby-could-do">10 Things You Didn&#8217;t Know Ruby Could do</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Ruby Gems]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/11/exploring-ruby-gems/"/>
    <updated>2012-10-11T19:37:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/11/exploring-ruby-gems</id>
    <content type="html"><![CDATA[<p>Tips pulled from:
<a href="http://railscasts.com/episodes/384-exploring-rubygems">RailsCast - Exploring Ruby Gems</a> and <a href="http://www.confreaks.com/videos/900-railsconf2012-how-to-find-valuable-gems">Finding Valuable Gems</a> with Nathan Bibler from Envy Labs.</p>

<h3><a href="https://www.ruby-toolbox.com/">Ruby toolbox</a></h3>

<ul>
<li>Look at popularity</li>
</ul>


<h3>Look at github repo directly</h3>

<ul>
<li>number of commits</li>
<li>checkout issue tracker

<ul>
<li>number of open issues vs. closed issues</li>
</ul>
</li>
</ul>


<h3>Search for the product on Rubygems.org</h3>

<ul>
<li>look for stable release</li>
<li>look at runtime dependencies&#8211;> there are lots of moving parts breaks often happen because of rails dependencies</li>
<li>use the gem file to control the version</li>
</ul>


<h3>Documentation</h3>

<ul>
<li>look at the project wiki</li>
<li>should also look at the rdocs</li>
</ul>


<h3>Source Code</h3>

<ul>
<li>can take a look at source code on github</li>
<li>can really dig in if you clone</li>
<li>use the cloc app lib to judge the number of lines of ruby code (brew install cloc if I don&#8217;t have it)</li>
<li>Look under the lib dir with the file that matches the gem name&#8211; e.g. devise.rb&#8211; usually provides a structure of the app and its dependencies</li>
<li>Next stop, a railtie file or rails.rb</li>
</ul>


<h3>Bibler Believes</h3>

<ul>
<li>documentation is the first thing to consider: reflects if they care about me as a user</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day6]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/11/fis-day6/"/>
    <updated>2012-10-11T09:46:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/11/fis-day6</id>
    <content type="html"><![CDATA[<h3>Programmer of the Day</h3>

<p>_Why the Lucky Stiff</p>

<p><a href="http://en.wikipedia.org/wiki/Nikola_Tesla">Tesla</a>:
1909 predicted the internet and wireless communication</p>

<h3>Scraping</h3>

<p><a href="http://www.andrewsturges.com/2011/09/how-to-harvest-web-data-using-ruby-and.html">Possible Workflow</a>
<a href="http://lostechies.com/rodpaddock/2011/04/11/hacking-websites-with-ruby-and-nokogiri/">NokoGiri</a>
<a href="https://github.com/luislavena/sqlite3-ruby">sqlite3</a> ruby gem</p>

<h3>Stuff I read</h3>

<p>One page script
<a href="http://coryschires.com/whats-the-difference-between-each-and-collect/">Difference between map and collect</a></p>

<p>CSS selectors are hard
<a href="http://www.w3schools.com/cssref/css_selectors.asp">need to keep this handy</a></p>

<p><em>DB prepare:</em>
If the same statement is going to be executed repeatedly, you can speed things up a bit by preparing the statement.</p>

<p><a href="http://blog.jayfields.com/2006/12/ruby-multiline-strings-here-doc-or.html">&lt;&lt;HEREDOC</a> <a href="http://blog.grayproductions.net/articles/working_with_multiline_strings">This one has some tricks in it</a></p>

<p>xpath: for very specific selectors</p>

<figure class='code'><figcaption><span>Multi Assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Symbol to proc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:text</span><span class="p">)</span>
</span><span class='line'><span class="c1"># equal to</span>
</span><span class='line'><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">text</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>.try</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="s2">&quot;attr&quot;</span><span class="p">,</span> <span class="s2">&quot;href&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In rails, but not in the ruby library.</p>

<p>SQL sanitation:</p>

<figure class='code'><figcaption><span>.try</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;INSERT INTO students (tagline, bio) VALUES (?, ?)&quot;</span><span class="p">,</span> <span class="s2">&quot;I&#39;m the ruby guy&quot;</span><span class="p">,</span> <span class="s2">&quot;I&#39;m awesome&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>DB drivers in SQLite3 does the sanitation.</p>

<figure class='code'><figcaption><span>Delete DB if it exists</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="s2">&quot;database.db&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s2">&quot;database.db&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Avi&#8217;s code</h3>

<p>nokogiri supports a &#8220;/div li.a&#8221; syntax, which is more common than the doc.css(&#8216;div li.a&#8217;)</p>

<h3>Mark Up Languages</h3>

<p>SGML -> standard generalized markup language
XML -> extensible markup language
HTML is an extension of XML.</p>

<p>dtd - document type definition
html5 is a new dtd published standards committee</p>

<h3>Ternary Operator</h3>

<p>logical expression (true or false)
this is good for the pattern:</p>

<figure class='code'><figcaption><span>Delete DB if it exists</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="kp">true</span> <span class="p">(</span><span class="k">do</span> <span class="n">this</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span> <span class="p">(</span><span class="n">that</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>reg ex are pretty much patterns&#8211; all languages implement them the same
Remember <a href="http://rubular.com/">rubular</a> for regular expressions (regex).</p>

<p>if you have email1 and email2 and phone1 and phone2, it&#8217;s time to break out another table. Store vertically, not horizontally.</p>

<p><strong>If you see an each block with a push in it, you should be using a collect</strong></p>

<p><a href="http://www.w3schools.com/cssref/css_selectors.asp">CSS Selector</a></p>

<ul>
<li>element1~element2

<ul>
<li>(e.g. p~ul)</li>
<li>Selects every <ul> element that are preceded by a <p> element</li>
</ul>
</li>
</ul>


<h3>Homework</h3>

<p>nice <a href="http://www.skorks.com/2009/08/how-a-ruby-case-statement-works-and-what-you-can-do-with-it/">case statement reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL DB talk from CTO of Behance]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/10/sql-db-talk-from-cto-of-behance/"/>
    <updated>2012-10-10T17:52:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/10/sql-db-talk-from-cto-of-behance</id>
    <content type="html"><![CDATA[<p><strong>Thanks to Chris Henry for taking the time to come down</strong></p>

<h3>Things examined</h3>

<p>lock_time the time the server will wait</p>

<p>rows examined</p>

<p>tmp_tables - creating these temp tables are bad</p>

<p><a href="http://en.wikipedia.org/wiki/Cartesian_product">cartisan product</a></p>

<p>indexes- once you created them run completed under the hood
can only use one index per table</p>

<p>Review: <a href="http://www.simple-talk.com/sql/performance/execution-plan-basics/">Query execution plan</a>
<a href="http://www.codeproject.com/Articles/9990/SQL-Tuning-Tutorial-Understanding-a-Database-Execu">more reading</a></p>

<ul>
<li>only way to get around this is to change the structre&#8211; i.e. denormalization</li>
</ul>


<h3>Indexes</h3>

<ul>
<li>cost per write -> re-indexing</li>
<li>Can use indexes to set constraints on your data</li>
</ul>


<p>Cardinality
: how chunky your data is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT COUNT(*) title FROM tags t INNER JOIN tags_entity_links tel ON t.id = tel.tag_id WHERE category = 1 AND title</span></code></pre></td></tr></table></div></figure>


<p>The tags are polymorphic:
tag table
id | tag_id | id_for_table | type</p>

<p>performance to denormalization
??performance or aggregate data</p>

<p>composite index</p>

<p>LEFT JOIN or RIGHT JOIN will show the nulls that wouldn&#8217;t be included in INNER JOIN</p>

<p>The NoSQL camp is a return to hierarchical data stores - a 40 year old</p>

<p>count or cache</p>

<p>three seperate databases = 3 apps</p>

<p>Testing:</p>

<pre><code>apache bench
watch the slow logs
cacti tool
load on the server
</code></pre>

<h3>Questions</h3>

<p>?? why mysql over postgres?</p>

<ul>
<li>right place right time</li>
</ul>


<p>MySQL:</p>

<ul>
<li>percona port makes the most sense for mysql-</li>
</ul>


<p>?? many proj has many tags - many to many - goes through what join table?</p>

<p>Look up:</p>

<ul>
<li>jumping words in the terminal</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn to Code Online: Code School vs. Treehouse vs. Codecademy]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/10/code-school-vs-treehouse-vs-code-academy/"/>
    <updated>2012-10-10T11:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/10/code-school-vs-treehouse-vs-code-academy</id>
    <content type="html"><![CDATA[<p>Like any n00b, I spent a lot of time learning the skills of programming online. Outside of random YouTube Videos (<a href="http://www.youtube.com/user/thenewboston">NewBoston</a> is worth your time), there are three well-known online products&#8211; <a href="http://www.codeschool.com/">Code School</a>, <a href="http://teamtreehouse.com/">Treehouse</a>, and <a href="http://www.codecademy.com/">Codecademy</a>. I&#8217;d estimate, I&#8217;ve spent around 80 hours on these sites. I don&#8217;t know if that is a lot or a little, but I do know that Code School is the clear winner&#8230;</p>

<p><img class="left" src="http://ajonas.herokuapp.com/images/codeschool.jpeg" title="Code School" ></p>

<h3>Codecademy</h3>

<p>(not to be confused with <a href="http://www.builtinchicago.org/blog/code-academy-evolves-starter-league-and-partners-37signals">Code Academy</a>) <a href="http://www.businessinsider.com/codecademy-1000000-users-2012-1">exploded on the scene last fall</a>, but really falls short in the <a href="http://programmingzen.com/2012/01/16/on-the-usability-of-codecademy/">usability</a> department and error feedback. To be fair, I only have spent time with their JavaScript courses, but it&#8217;s hard to past first impressions. Granted, Codecademy is run by a <a href="http://mashable.com/2012/07/25/zach-sims-codecademy/">couple of kids</a> and haven&#8217;t had the head start that Code School has on its interactive browser, but I found myself more than frustrated going through their lessons. If they spent less time, hammering my inbox with weekly emails and built a better interface, I&#8217;d be more likely to take a look at their newly updated and <a href="(http://www.crunchbase.com/company/codecademy">well funded site</a> (I&#8217;ve heard they added Ruby lessons). At least for now, Codecademy is FREE. So serious brownie points there.</p>

<p><img class="right" src="http://ajonas.herokuapp.com/images/codecademy.png" width="450" height="300" title="Codecademy Inbox" ></p>

<h3>Treehouse is&#8230;</h3>

<p>in a word, boring. Thankfully, I was able to guess most of the answers without struggling through the videos. I did spend, however, a portion of the time learning about subjects on the periphery. Their explanations of structs, I/O, and Ruby Core had slipped through the cracks of other beginner Ruby tutorials. I couldn&#8217;t get into the humor of <a href="http://www.youtube.com/watch?v=jQNXtyoyHic">Mike the Frog</a> or some of their other movie &#8220;rewards,&#8221; but I guess that really shouldn&#8217;t be the main motivating factor. While others thought it is silly, I like that <a href="https://twitter.com/jseifer">Jason Seifer</a> is such a goofball. He is the lone source of humor in an overall dry learning experience. Personally, I learn faster by doing and Treehouse falls short here. Though they do sprinkle in a few interactive quizzes, it just isn&#8217;t enough. If you are going to financially invent in your learning, I&#8217;d save it for&#8230;</p>

<p><img class="right" src="http://ajonas.herokuapp.com/images/small_Codecademy-Treehouse-Blog-Logo.png" title="Codecademy and Treehouse" ></p>

<h3>Code School</h3>

<p><strong>rocks</strong>. It has clearly been the best use of my time. The videos are much more in-depth and the interactive browser is the superior to everything else I&#8217;ve seen. The <a href="http://envylabs.com/">Envy Labs Team</a> goes into significantly more detail than their aforementioned competitors. Their material is engaging, challenging, and well thought-out. What I enjoyed most (besides the information of course) is the self-depreciating humor that dots their casts. Cheesy graphics and dedication to a theme, for example Zombie terminology, finds the right balance of hilarious and non-interfering entertainment. When I first took their beginner courses, I grumbled at the level of detail they covered. Now that I picked up a few things, Code School does an amazing job of covering the entire breadth of subjects within a topic. Maybe most importantly, the error feedback is actually useful as are their hints. My sole criticism is that there is a recognizable difference between <a href="https://twitter.com/greggpollack">Gregg Pollack</a> and the others characters. If he could navigate the office politics, Gregg should do all the casts.</p>

<p>Now in my 7th month of my programming career, <a href="http://shitavisays.tumblr.com/">Avi&#8217;s words</a> have more meaning than ever:</p>

<blockquote><p>&#8220;It&#8217;s not about learning the syntax. Anyone can learn that. Learning to program is learning how to communicate.&#8221; &#8211; Avi Flombaum</p></blockquote>

<p>If you are going to learn the syntax (which we DO need to do), Code School is very much worth it and <a href="http://paulstamatiou.com/code-school-learn-by-doing">I&#8217;m not the only one who thinks so</a>. But what do I know? Not that much. What do you think?</p>

<p>(Tip to <a href="https://twitter.com/davidbakertv">David Baker</a> for the subject.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day5]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/10/fis-day5/"/>
    <updated>2012-10-10T09:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/10/fis-day5</id>
    <content type="html"><![CDATA[<p>&#8220;Classes are state plus behavior, if you just want the behavior then use a module!&#8221;</p>

<figure class='code'><figcaption><span>This is no good: Singleton Object- class with one method on it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Random</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Underuse of modules&#8230;</p>

<h3>Programmer of the day</h3>

<p>Dan Bricklin</p>

<ul>
<li>inventor of the spreadsheet</li>
</ul>


<h3>Homework Review</h3>

<p>table names should be plaural (e.g.table USERS)</p>

<p>id INTEGER PRIMARY KEY -> always be called ID, is an integer and auto increments</p>

<p>&#8216;never use ruby for something SQL can do&#8217;</p>

<p>you want to group by integer values rather than string values</p>

<p>AS aliases the columns</p>

<p>subqueries- as long as a query returns one and only one value you can use that for another query</p>

<p><a href="http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html">Visual explanation of sql</a></p>

<h3>INDEXes</h3>

<ul>
<li>index a column when it is being used in columns or queries</li>
<li>should index foreign keys (they are not automatically indexed)</li>
<li>cost: everytime you add a record it has to reindex</li>
<li>indexes compromise the write speed in favor of read speed</li>
</ul>


<p>Two optimization steps:</p>

<ul>
<li>denormalize (add more columns)</li>
<li><p>index - optimize for write or read?</p>

<ul>
<li>the more indexes your keys are using the more efficient your DB will be</li>
</ul>
</li>
<li><p>You optimize the joins by denormalizing (and thus removing the need for joins) and indexing</p></li>
</ul>


<figure class='code'><figcaption><span>This is no good: Singleton Object- class with one method on it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="o">&lt;</span><span class="n">old</span> <span class="n">dir</span> <span class="nb">name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="kp">new</span> <span class="n">dir</span> <span class="nb">name</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>update in SQL</p>

<figure class='code'><figcaption><span>This is no good: Singleton Object- class with one method on it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">UPDATE</span> <span class="no">Persons</span>
</span><span class='line'><span class="no">SET</span> <span class="no">Address</span><span class="o">=</span><span class="s1">&#39;Nissestien 67&#39;</span><span class="p">,</span> <span class="no">City</span><span class="o">=</span><span class="s1">&#39;Sandnes&#39;</span>
</span><span class='line'><span class="no">WHERE</span> <span class="no">LastName</span><span class="o">=</span><span class="s1">&#39;Tjessem&#39;</span> <span class="no">AND</span> <span class="no">FirstName</span><span class="o">=</span><span class="s1">&#39;Jakob&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/2044467/how-to-update-two-tables-in-one-statement-in-sql-server-2005">Transaction</a></p>
]]></content>
  </entry>
  
</feed>

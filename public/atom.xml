<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2014-03-25T18:10:46-04:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[service objects versus concerns]]></title>
    <link href="http://www.adamjonas.com/blog/service-objects-versus-concerns/"/>
    <updated>2014-02-25T15:03:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/service-objects-versus-concerns</id>
    <content type="html"><![CDATA[<p><a href="http://www.adamjonas.com/blog/service-objects/">I wrote this</a> last May. Obviously, <a href="https://github.com/scottcreynolds">@scottcreynolds</a> doesn&#8217;t think it sunk in.</p>

<p>We were writing a URL sanitizer that stripped the user&#8217;s URL input of <code>http://</code> and <code>www</code> to store in the DB. Because we were using it for multiple models. I had viewed this &#8220;stipper&#8221; method as a behavior and thus had thought it belonged in the the DHH blessed concerns folder.</p>

<p>Scott disagreed:</p>

<blockquote><p>A concern or mixin should describe a <strong>behavior</strong> that is being given to the object. That&#8217;s the &#8220;able&#8221; nomenclature. A behavior is something like &#8220;it can support tags&#8221; or &#8220;it can be authenticated with a devise token&#8221;.</p></blockquote>

<p>What I should have seen was this is a utility method. He writes:</p>

<blockquote><p>What was being created here is a utility or service method, intended to be used across any entity in the system that chooses to sanitize a url. This is not a behavior that the object has. Yes, you could go so far as to say &#8220;this object can sanitize its urls&#8221; but that&#8217;s a bit of semantic gymnastics when what we&#8217;re really describing is a <strong>service object</strong> - something that provides a service to any part of the system that requires it. In this case, scrubbing user input.</p></blockquote>

<p>Something that may have helped me futher understand this was thinking about who was responsible for this sanitization. Is the Event object responsible for url sanitization?</p>

<blockquote><p>It might seem like a fine hair to split, but if we examine further, we see that we weren&#8217;t really adding a common behavior to the <code>event</code> and <code>admin_user</code> classes.</p>

<p>The <code>parseable</code> module as designed only handled the case where the thing it was being mixed into had a field called <code>website</code>. Including it in <code>event</code> would have done absolutely nothing because that field doesn&#8217;t exist. What an <code>event</code> does have, however, is a <code>registration_link</code>. Already, we can see that we haven&#8217;t truly identified a common <em>behavior</em> so much as a common <em>need</em> - hence a service object.</p>

<p>Finally, just in the naming we can tell that we&#8217;re not really describing what we mean. If a class includes a module <code>parseable</code>, that include line, in English, reads <code>an admin user is parseable</code>. To me that means something significantly different than <code>before save, strip some characters out of a field</code>. The module being described didn&#8217;t do what it claimed to do by its name.</p></blockquote>

<p>These things seem small, but they&#8217;re extremely important to care about because code bases grow and all you have in a dynamic language is your tests and your naming to help you understand the system a year from now. I could show you a rails project I just came into where no care was given to naming and structure, and you could spend days following the labyrinth of modules and classes and end up hoping the Minotaur finds you and eats you and spares you the hassle of figuring out what&#8217;s going on.</p>

<p>So in short, use concerns when extracting common behavior (active record finders, authentication, etc). Use service objects when extracting common needs.</p>

<p>Finally, a note on tests. It&#8217;s great we&#8217;re doing the cucumber, and doing it well, but we still need tests at model and controller levels too. If you make a new class/module it should have a test file and some tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pow config]]></title>
    <link href="http://www.adamjonas.com/blog/pow-config/"/>
    <updated>2014-02-19T16:01:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/pow-config</id>
    <content type="html"><![CDATA[<p>I had a bunch of issues getting pow up and running after I upgraded to Mavricks. I ended up not installing via the <code>curl</code> method that the <a href="http://pow.cx/">37signals suggests</a> as it wasn&#8217;t recognizing my rbenv and was running on my system ruby. So I uninstalled and tried it with <code>homebrew</code>, which required a different path in my <code>.powconfig</code> file. Just like the <a href="https://github.com/basecamp/pow/wiki/Troubleshooting#rbenv">troubleshooter</a> said it would via the <a href="https://github.com/basecamp/pow/issues/202#issuecomment-2640707">github issue</a>, this worked.</p>

<p>Final code: <code>export PATH="/usr/local/opt/rbenv/shims:/usr/local/opt/rbenv/bin:$PATH"</code></p>

<p>Boom! Smack! Pow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber with Scott]]></title>
    <link href="http://www.adamjonas.com/blog/cucumber-with-scott/"/>
    <updated>2014-02-17T15:09:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/cucumber-with-scott</id>
    <content type="html"><![CDATA[<p>The point of BDD is to build a system form a perspective of a user, rather than just as a developer.</p>

<h2>Login</h2>

<p>As a partner, I need to be able to login, so that I can update my upcoming events.</p>

<p>Need to deliver a story and prove that it works.</p>

<p>An integration test is any test that cross the boundries of a system</p>

<h3>Why cucumber</h3>

<ul>
<li>Gherkin language for feature files</li>
<li>rspec for tests</li>
<li>capybara to drive the browser</li>
</ul>


<p>The tools are the same just when with gherkin thrown on top
  - cucumber is platform and language agnostic</p>

<p>So a problem I have is when to test built in features of the framework or gem.</p>

<h2>Given, When, Then</h2>

<ul>
<li><p>same as Arrage, Act, Assert (which is what ALL tests do) in people talk</p></li>
<li><p>Arrage</p>

<p><code>let(:something) {do_something}</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">arrange_things</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Act, and Assert</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;does something when I do this&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">do_a_thing</span> <span class="c1">#=&gt; act</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">that_thing</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">something</span><span class="p">)</span> <span class="c1">#=&gt; assert</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Misc</h3>

<ul>
<li>user regex in the step file if you are going to reuse it</li>
<li>acceptance tests should be used to test large swatches rather than every permuation</li>
</ul>


<h3>tags</h3>

<ul>
<li><code>@pause</code> like a binding</li>
<li><code>@wip</code> won&#8217;t run unless specified to run</li>
<li>custom tags work too, so even then you&#8217;d run it with <code>cucumber -t @jonas</code></li>
<li>or you can run multiple tags at one time, e.g. <code>cucumber --tags @billing,@important</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber]]></title>
    <link href="http://www.adamjonas.com/blog/cucumber/"/>
    <updated>2014-02-17T11:34:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/cucumber</id>
    <content type="html"><![CDATA[<h2>Cucumber</h2>

<p>Cucumber is a BDD tool that supports Outside-in development by running plain text features or user stories as acceptance tests.</p>

<ul>
<li><a href="http://blog.codeship.io/2013/04/30/BDD-With-Cucumber.html">Intro screencast</a></li>
<li><a href="http://35qk152ejao6mi5pan29erbr9.wpengine.netdna-cdn.com/wp-content/uploads/2011/08/Cucumber-Regular-Expressions-Cheat-Sheet.pdf">cucumber regex cheatsheet</a></li>
<li><a href="http://rubylearning.com/blog/2010/10/05/outside-in-development/">An Introduction to Outside-in Development</a></li>
</ul>


<h3>Features</h3>

<p>Let’s create our first feature. The anatomy of a feature is the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: [feature]
</span><span class='line'>  In order to [business value]
</span><span class='line'>  As a [role]
</span><span class='line'>  I want to [some action]</span></code></pre></td></tr></table></div></figure>


<p>Notice how a feature includes who, what and most importantly: <strong><em>why</em></strong>.</p>

<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: Manage Articles
</span><span class='line'>  In order to make a blog
</span><span class='line'>  As an author
</span><span class='line'>  I want to create and manage articles</span></code></pre></td></tr></table></div></figure>


<h3>Scenarios</h3>

<p>There will be many scenarios accompanying a feature. Scenarios will follow the four stages of testing: setup, exercise, verify and teardown. A simple scenario looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Given [context]
</span><span class='line'>When I do [action]
</span><span class='line'>Then I should see [outcome]</span></code></pre></td></tr></table></div></figure>


<ul>
<li> The <code>Given</code> step is where you set up the context of your scenario. Every scenario starts with a blank slate, so it is important to create a state in your application for example by creating data in the database, or by navigating to a specific page.</li>
<li> The <code>When</code> step is where you exercise the application in order to accomplish what needs testing. This is usually where you might fill in forms, press buttons, click links, or otherwise interact with the system in some way.</li>
<li> The <code>Then</code> step is where you verify the result, and it’s where we check that the correct pages are rendered, that we see a success or error message, or anything that could help us verify that the prior action was successful.</li>
<li> The teardown, is taken care of by cucumber automatically.</li>
</ul>


<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: Articles List
</span><span class='line'>  Given I have articles titled Pizza, Breadsticks
</span><span class='line'>  When I go to the list of articles
</span><span class='line'>  Then I should see "Pizza"
</span><span class='line'>  And I should see "Breadsticks"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: User signs up with valid data
</span><span class='line'>  When I go to the sign up page
</span><span class='line'>  And I fill in "Email" with "email@person.com"
</span><span class='line'>  And I fill in "Username" with "user"
</span><span class='line'>  And I fill in "Password" with "password"
</span><span class='line'>  And I fill in "Confirm password" with "password"
</span><span class='line'>  And I press "Sign up"
</span><span class='line'>  Then I should see "instructions for confirming"
</span><span class='line'>  And a confirmation message should be sent to "email@person.com"</span></code></pre></td></tr></table></div></figure>


<p>We can also test a user attempting to sign up without filling in all the fields:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: User tries to sign up without a twiddr name
</span><span class='line'>  When I go to the sign up page
</span><span class='line'>  And I fill in "Email" with "email@person.com"
</span><span class='line'>  And I fill in "Password" with "password"
</span><span class='line'>  And I fill in "Confirm password" with "password"
</span><span class='line'>  And I press "Sign up"
</span><span class='line'>  Then the "Username" field should have the "can't be blank" error</span></code></pre></td></tr></table></div></figure>


<h3>Tags</h3>

<p>  <code>cucumber --tags @billing --tags @important</code> -> Runs the first scenario (Scenarios with @important AND @billing)
  <code>cucumber --tags @billing,@important</code> -> Runs both scenarios (Scenarios with @important OR @billing)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wit]]></title>
    <link href="http://www.adamjonas.com/blog/wit/"/>
    <updated>2014-02-13T14:15:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/wit</id>
    <content type="html"><![CDATA[<h2>.ruby-version &amp; rbenv</h2>

<ul>
<li>so rbenv now does support a ruby version file but doesn&#8217;t support fuzzy matching. <a href="http://stackoverflow.com/questions/18634933/how-can-i-make-rbenv-recognise-1-9-3-p-ruby-versions">See</a>.</li>
</ul>


<h2>Multipart = true</h2>

<ul>
<li>HTML forms provide two methods of encoding. The default is application/x-www-form-urlencoded, which is more or less the same as a query string on the end of the URL. The other, multipart/form-data, is a more complicated encoding but one which allows entire files to be included in the data. <a href="http://stackoverflow.com/a/4526286/1496757">via</a></li>
</ul>


<h2>Devise</h2>

<ul>
<li>had trouble with validation requirements built into the <code>validatable</code> module and configuring it to allow a user to edit their profile without requiring a password, which involved destroying the session because the salted password had changed. I ended up ripping it out and going with a <code>validates_presence_of :password, :on =&gt; :create</code> instead.

<ul>
<li><a href="https://github.com/plataformatec/devise/wiki/How-To%3a-Allow-users-to-edit-their-account-without-providing-a-password">I had attempted this</a>, but it seemed like a lot of work.</li>
</ul>
</li>
</ul>


<h2>Factory Girl Associations</h2>

<p><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">From the docs</a> it&#8217;s possible to set up associations within factories. If the factory name is the same as the association name, the factory name can be left out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">author</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To not save the associated object, specify strategy: <code>:build</code> in the factory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This does <em>not</em> work; causes author_id to be nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">author</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Staging assets broken</h2>

<p>Racked my brain (and everyone elses) over this one&#8230; It ended up I hadn&#8217;t added the <code>rails_12factor</code> gem to staging though I had added that environment.</p>

<h2>Capybara cheatsheet</h2>

<p><a href="https://gist.github.com/zhengjia/428105">Cheatsheet</a></p>

<h2>Server TimeZone</h2>

<ul>
<li>had a feature that pulls events once they have passed. Heroku&#8217;s time zone is by default set to <code>UTC</code>. So I did two things:

<ol>
<li>heroku config:add TZ=&#8221;America/New_York&#8221; as described <a href="http://blog.pardner.com/2012/08/setting-the-default-time-zone-for-a-heroku-app/">here</a>.</li>
<li>Set <code>config.time_zone = 'Eastern Time (US &amp; Canada)'</code> in <code>application.rb</code> as described in the <a href="http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html">rails docs</a>.</li>
</ol>
</li>
</ul>


<h3>Fragment Caching</h3>

<ul>
<li><p>Had an issue expiring the fragment cache. The issue was that when you cache the fragment in your view, a cache digest is being added to the cache key (views/all_available_releases/41cb0a928326986f35f41c52bb3d8352), but <code>expire_fragment</code> is not using the digest (views/all_available_releases).</p></li>
<li><p>By adding <code>skip_digest: true</code> to the cache call in the view it should prevent the digest from being used.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="s2">&quot;all_available_releases&quot;</span><span class="p">,</span> <span class="n">skip_digest</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;% @releases.each do |release| %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache(release) </span><span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">   &lt;html code with&gt;</span>
</span><span class='line'>   <span class="o">&lt;%</span><span class="n">ruby</span> <span class="n">code</span> <span class="vi">@release</span><span class="o">.</span><span class="n">name</span> <span class="n">blah</span> <span class="n">blah</span> <span class="n">blah</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%end%&gt;</span>
</span><span class='line'> <span class="o">&lt;%</span><span class="k">end</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;%end%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Cache digests are only intended to be used with automatic cache expiration. If you need to manually expire cache keys then you can&#8217;t use cache digests.</li>
<li>Saved by <a href="http://stackoverflow.com/a/17619414/1496757">stackoverflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Beginnings]]></title>
    <link href="http://www.adamjonas.com/blog/new-beginnings/"/>
    <updated>2014-02-03T20:31:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/new-beginnings</id>
    <content type="html"><![CDATA[<p>It has been a little more than a year from when I started at <a href="http://carrot.is">Carrot Creative</a>. It has been an <a href="http://www.nytimes.com/2013/12/11/business/media/vice-media-buys-a-tech-company-to-experiment-with-content-distribution.html?_r=0">exciting year in Carrot history</a> and year in which I had some personal milestones. Carrot was the perfect place for me over the past year and I&#8217;m eternally grateful for the opportunity to work on some large scale using a variety of technologies.</p>

<p>I am excited to be returning to the <a href="http://flatironschool.com">Flatiron School</a>, this time as an instructor. Working with eager students who want to change the world through code is an exciting proposition and one I ultimately couldn&#8217;t resist.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[computer chips rd2]]></title>
    <link href="http://www.adamjonas.com/blog/computer-chips-rd2/"/>
    <updated>2014-01-24T12:55:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/computer-chips-rd2</id>
    <content type="html"><![CDATA[<h3>Devise</h3>

<ol>
<li>ran into issues with rails 4 strong parameters. <a href="https://github.com/plataformatec/devise/#strong-parameters">See</a></li>
<li>Then my user edit form was not writing to the DB because the <a href="https://github.com/plataformatec/devise/blob/master/app/controllers/devise/registrations_controller.rb#L88">update_resource method</a> requires a current password parameter passed along

<ul>
<li>one <a href="https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-edit-their-account-without-providing-a-password">can override this default behavior</a></li>
</ul>
</li>
</ol>


<h3>State Machine Transitions</h3>

<ul>
<li>ended up going with <a href="https://github.com/troessner/transitions">transitions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[marionette-cms]]></title>
    <link href="http://www.adamjonas.com/blog/marionette-cms/"/>
    <updated>2014-01-15T16:59:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/marionette-cms</id>
    <content type="html"><![CDATA[<h3>Jade template</h3>

<p>  <code>&lt;%- %&gt;</code> insert into DOM
  <code>&lt;%= %&gt;</code> html escapes?</p>

<h3>Markdown</h3>

<ul>
<li>so apparently markdown doesn&#8217;t come standard? I installed <a href="https://github.com/chjj/marked">marked</a> as the markdown interpreter.

<ul>
<li>with an install with npm this gave immediate markdown functionality to the jade templates, but it was still required in the specific model in order to call markdown related functions on a string of markdown within the template helper.</li>
</ul>
</li>
<li>I also need to translate the modifications made to the HTML on the page to be translated back into markdown to store them on the server. This required another plugin and I settled on <a href="https://github.com/neocotic/html.md">html.md</a>. The install was clean and worked smoothly from the start.</li>
</ul>


<h3><code>This</code> in the view</h3>

<ul>
<li>something that was not immediately apparent was the fact that <code>this</code> has different meanings in the template helper versus <code>onRender</code> for example.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node, express, backbone and marionette -- sorting out the pieces]]></title>
    <link href="http://www.adamjonas.com/blog/node-express-backbone-marionette-sorting-out-the-pieces/"/>
    <updated>2014-01-10T17:47:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/node-express-backbone-marionette-sorting-out-the-pieces</id>
    <content type="html"><![CDATA[<h3>Express with Node</h3>

<ul>
<li>Express is a framework that takes Node from a barebones application and turns it into something that behaves more like the web servers we&#8217;re all used to working with.</li>
<li>Express feels like the <a href="http://www.sinatrarb.com/">sinatra</a> of node.</li>
</ul>


<h3>Bower vs. npm</h3>

<ul>
<li>It was advised that bower is the front end dependencies package manager, where the npm is for the backend. <a href="https://www.google.com/search?q=npm+of+backend+and+bower+for+the+front+end&amp;oq=npm+of+backend+and+bower+for+the+front+end&amp;aqs=chrome..69i57.8637j0j9&amp;sourceid=chrome&amp;espv=210&amp;es_sm=91&amp;ie=UTF-8#es_sm=91&amp;espv=210&amp;q=npm+for+backend+and+bower+for+the+front+end">see</a></li>
<li>You specify what dir your want to install the bower packages with a <code>.bowerrc</code> file which goes in the project root. Here are <a href="https://gist.github.com/facultymatt/5482781">some examples</a> of these types of files.

<ul>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/a-requirejs-backbone-and-bower-starter-template/">This tutorial</a> was helpful to get up and running with require.js and bower</li>
</ul>
</li>
</ul>


<h3>Mean stack</h3>

<ul>
<li><a href="http://mean.io/">Mean.io</a></li>
<li>Really like this <a href="http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/">tutorial here</a></li>
</ul>


<h3>Asynchronous Module Definition</h3>

<ul>
<li>The AMD format comes from wanting a module format that was better than today&#8217;s &#8220;write a bunch of script tags with implicit dependencies that you have to manually order&#8221; and something that was easy to use directly in the browser. <a href="http://requirejs.org/docs/whyamd.html">further reading</a></li>
<li>The standard loader is <a href="http://requirejs.org/">RequireJS</a>, but in production you could use a replacement AMD loader called <a href="https://github.com/jrburke/almond">Almond</a>. It is a smaller &#8220;shim&#8221; loader, providing the minimal AMD API footprint that includes loader plugin support. Some developers like to use the AMD API to code modular JavaScript, but after doing an optimized build, they do not want to include a full AMD loader like RequireJS, since they do not need all that functionality. Some use cases, like mobile, are very sensitive to file sizes. By including almond in the built file, there is no need for RequireJS. almond is around 1 kilobyte when minified with Closure Compiler and gzipped.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[require.js]]></title>
    <link href="http://www.adamjonas.com/blog/require-dot-js/"/>
    <updated>2013-12-16T16:04:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/require-dot-js</id>
    <content type="html"><![CDATA[<h3>In roots</h3>

<ul>
<li><code>require ['jquery', 'fitvid', 'modal'], ($) -&gt;</code> is how I might require a non underscored file</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wearables]]></title>
    <link href="http://www.adamjonas.com/blog/wearables/"/>
    <updated>2013-12-09T10:18:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/wearables</id>
    <content type="html"><![CDATA[<h3>Dl rather than ul</h3>

<ul>
<li>for question/answer format <a href="http://www.cssnewbie.com/using-definition-lists-question-answer-formatting/#.UqYh6HJgZKk">this article argues</a> that dl, dt, dd is a more appropriate choice of ul, li.</li>
<li><a href="http://html5doctor.com/the-dl-element/">More reading</a></li>
<li><a href="http://css-tricks.com/utilizing-the-underused-but-semantically-awesome-definition-list/">and</a></li>
<li><a href="http://www.dave-woods.co.uk/creating-faqs-using-a-definition-list/">also</a></li>
</ul>


<h3>IP detection with CloudFlare and nginx</h3>

<ul>
<li><a href="http://nginxlibrary.com/using-cloudflare-for-country-blocking/">ip detection using CloudFlare</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rack]]></title>
    <link href="http://www.adamjonas.com/blog/rack/"/>
    <updated>2013-12-06T12:18:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rack</id>
    <content type="html"><![CDATA[<h2>Config.ru</h2>

<h3>Difference between run and use</h3>

<blockquote><p><strong>Run</strong> - Takes an argument that is an object that responds to call and returns a Rack response.
<strong>Use</strong> - Specifies middleware to use in a stack.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash]]></title>
    <link href="http://www.adamjonas.com/blog/bash/"/>
    <updated>2013-12-05T09:57:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/bash</id>
    <content type="html"><![CDATA[<h3>grant sudo permissions for the local user</h3>

<ul>
<li><code>sudo chown -R $USER /usr/local</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[asynch js]]></title>
    <link href="http://www.adamjonas.com/blog/asynch-js/"/>
    <updated>2013-12-04T10:52:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/asynch-js</id>
    <content type="html"><![CDATA[<h3>Asynch</h3>

<ul>
<li>Async is a tool for your Javascript utility belt that helps you out with the asynchronous tasks

<ul>
<li><a href="https://github.com/caolan/async">asynch.js</a></li>
</ul>
</li>
</ul>


<h3>Promises</h3>

<ul>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/wrangle-async-tasks-with-jquery-promises/">Wrangle Async Tasks With JQuery Promises</a></li>
<li><a href="http://blog.parse.com/2013/01/29/whats-so-great-about-javascript-promises/">What’s so great about JavaScript Promises?</a></li>
</ul>


<h3>Reading</h3>

<ul>
<li><a href="http://javascriptplayground.com/blog/2013/06/think-async/">think asynch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context and functions in Javascript]]></title>
    <link href="http://www.adamjonas.com/blog/context-and-functions-in-javascript/"/>
    <updated>2013-11-19T17:55:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/context-and-functions-in-javascript</id>
    <content type="html"><![CDATA[<p>Bind and fat arrow result in something similar but with different implementations.</p>

<pre><code>fn = -&gt; console.log @
ctx = {foo: 'bar', fn: -&gt; console.log(@)}
pusher.execute('event_name', ctx.fn.bind(ctx))
</code></pre>

<p>In most cases, the context of the function (also known as <code>@</code>) is based on the receiver. In this contrived example, to execute the function on the pusher object, we might pass in the function name and then the callback function. When we call a function to an outside source, we have no idea in what context it might be executed. In our case, <code>ctx.fn</code> and <code>@fn</code> might be the exact same &#8211; these are just references to how to call the function, but an important takeaway is that these do not pass determine the context. To ensure the context, one must specify it with the bind function. <code>pusher.execute('event_name', ctx.fn.bind(ctx))</code> is essentially equal to <code>pusher.execute('event_name', @fn.bind(ctx))</code>. The receiver in this case doesn&#8217;t matter.</p>

<p>JS OOP isn&#8217;t a joy ride. Oh well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone beginner's basics]]></title>
    <link href="http://www.adamjonas.com/blog/backbone-beginners-basics/"/>
    <updated>2013-11-19T17:02:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/backbone-beginners-basics</id>
    <content type="html"><![CDATA[<h3>Validations</h3>

<p>  This is a neat little <a href="https://github.com/thedersen/backbone.validation">validation plugin</a> that passes back error objects.</p>

<h3>Form serialization</h3>

<ul>
<li>Used <a href="https://github.com/derickbailey/backbone.syphon/blob/master/apidoc.md">syphon</a> built by Derick Bailey.</li>
</ul>


<h3>onBeforeRender versus onRender</h3>

<ul>
<li>Was trying to call a function <code>onBeforeRender</code> but it wouldn&#8217;t execute until it was changed to <code>onRender</code>.</li>
</ul>


<h3>Resources</h3>

<ul>
<li>code school backbone.js class</li>
<li>watch this for <a href="http://vimeo.com/59431658">explanation for backbone.js to marionette</a></li>
</ul>


<h3>Google Analytics on Backbone</h3>

<ul>
<li>this was a <a href="https://gist.github.com/daveaugustine/1771986">good guide</a> though it did not include the fact that</li>
<li>used <code>universal.js</code> so had to use the <code>ga('create', 'UA-XXXX-Y', 'auto');</code> syntax</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery promises]]></title>
    <link href="http://www.adamjonas.com/blog/jquery-promises/"/>
    <updated>2013-11-15T15:41:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/jquery-promises</id>
    <content type="html"><![CDATA[<p>A <strong>Promise</strong> is an object that represents a one-time event, typically the outcome of an async task like an AJAX call.</p>

<ul>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/wrangle-async-tasks-with-jquery-promises/">started here</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marionette]]></title>
    <link href="http://www.adamjonas.com/blog/marionette/"/>
    <updated>2013-11-14T11:54:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/marionette</id>
    <content type="html"><![CDATA[<h3>Backbone.Model And Backbone.Collection</h3>

<ul>
<li><strong>model</strong> in Backbone represent a singular entity — a record in a database if you will.</li>
<li><strong>collections</strong> in Backbone are essentially just a collection of models

<ul>
<li>e.g. collections are the results of a query where the results consists of a number of records [models]</li>
</ul>
</li>
</ul>


<h3>Backbone.View</h3>

<ul>
<li>Is the HTML representation of the model</li>
<li>A view handles two duties fundamentally:

<ul>
<li>Listen to events thrown by the DOM and models/collections.</li>
<li>Represent the application’s state and data model to the user.</li>
</ul>
</li>
<li>Said another way, the primary responsibility of a view is to coordinate interactions between the end user and the application’s services.</li>
<li>In spite of their importance and having their fingers in all the pies of Backbone, views are not in control. They respond to changes in the application state in order to render the right HTML at the right time. They also facilitate changing the state by calling other objects that can change the state, but only on behalf of the user who initiates a state change by interacting with the DOM. Views are effectively the middle-man of a Backbone app.</li>
</ul>


<h3>Backbone.Events</h3>

<ul>
<li>The primary responsibility of Backbone.Events is to decouple the knowledge of state changes from the response to those state changes, through the use of the observer pattern.</li>
<li>Backbone.Events is the little powerhouse that facilitates nearly every aspect of a Backbone application. This is the one piece of Backbone that is found in every other piece of Backbone. Every time you call “bind” or “trigger” on any Backbone object, you’re using Backbone.Events. <a href="http://lostechies.com/derickbailey/2011/12/27/the-responsibilities-of-the-various-pieces-of-backbone-js/">From</a></li>
</ul>


<h3>App.vent</h3>

<ul>
<li><a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.application.md#appvent-event-aggregator">appvent-event-aggregator</a>

<ul>
<li>from the <a href="https://github.com/marionettejs/backbone.wreqr">wreqr</a></li>
<li>basic example is <code>MyApp.vent.on("foo", function(){ alert("bar"); });</code> triggered by <code>MyApp.vent.trigger("foo");</code></li>
</ul>
</li>
<li>one can also pass along an object or a string as a second parameter such as <code>App.vent.trigger('user_loaded', true)</code> or <code>App.vent.trigger('user_loaded', false)</code> that means that the listener can adjust accordingly (i.e. <code>App.vent.once('user_loaded', (user_loaded) -&gt; $('.change-scene').show() if user_loaded ))</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Storage]]></title>
    <link href="http://www.adamjonas.com/blog/local-storage/"/>
    <updated>2013-11-11T15:38:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/local-storage</id>
    <content type="html"><![CDATA[<h3>From KCA</h3>

<ul>
<li>used <a href="https://github.com/marcuswestin/store.js">store.js</a></li>
<li>nice <a href="http://javascriptplayground.com/blog/2012/06/javascript-local-storage-store-js-tutorial">little screencast</a></li>
<li>here is an <a href="http://coding.smashingmagazine.com/2010/10/11/local-storage-and-how-to-use-it/">older article</a> from 2010</li>
<li><em>NOTE:</em> We ended up using <a href="https://github.com/marcuswestin/store.js/blob/master/store%2Bjson2.min.js">store.js with json</a> because ie7 apparently doesn&#8217;t come equiped with JSON. Tom and I broke our heads trying to figure out why <code>store.enabled</code> wasn&#8217;t <code>true</code> for ie7. It came down to the fact that ie7 didn&#8217;t have JSON.</li>
</ul>


<p>Thought this was a cool little way to store whether a td square had been clicked on&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>addRedTiles: -&gt;
</span><span class='line'>  selected = store.get("board_#{@board_id}")
</span><span class='line'>
</span><span class='line'>  for tile_number in selected
</span><span class='line'>    $("[data-title-num=#{tile_number}]").addClass('clicked_space')
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>duringBoardClick: -&gt;
</span><span class='line'>  if store.enabled
</span><span class='line'>    $('td').click =&gt;
</span><span class='line'>      $(event.target).toggleClass('clicked_space')
</span><span class='line'>      clicked_tiles = []
</span><span class='line'>      all_clicked = $('td.clicked_space')
</span><span class='line'>
</span><span class='line'>      for tile in all_clicked
</span><span class='line'>        clicked_tiles.push $(tile).attr('data-title-num')
</span><span class='line'>
</span><span class='line'>      store.set("board_#{@board_id}", clicked_tiles)
</span><span class='line'>  else
</span><span class='line'>    console?.log? 'store is not enabled'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>This needed to be updated b/c of event.targer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">duringBoardClick</span><span class="o">:</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">store</span><span class="p">.</span><span class="nx">enabled</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">board_id</span> <span class="o">=</span> <span class="err">@</span><span class="nx">board_id</span>
</span><span class='line'>    <span class="err">\\</span><span class="nx">notice</span> <span class="nx">that</span> <span class="nx">I</span> <span class="nx">declared</span> <span class="nx">the</span> <span class="nx">above</span> <span class="nx">variable</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;td&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="o">-&gt;</span> <span class="err">\\</span><span class="nx">and</span> <span class="nx">changed</span> <span class="k">this</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">single</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="err">@</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;clicked_space&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">clicked_tiles</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>      <span class="nx">all_clicked</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;td.clicked_space&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="nx">tile</span> <span class="k">in</span> <span class="nx">all_clicked</span>
</span><span class='line'>        <span class="nx">clicked_tiles</span><span class="p">.</span><span class="nx">push</span> <span class="nx">$</span><span class="p">(</span><span class="nx">tile</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-title-num&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">store</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;board_#{board_id}&quot;</span><span class="p">,</span> <span class="nx">clicked_tiles</span><span class="p">)</span>
</span><span class='line'>      <span class="err">\\</span><span class="nx">board</span> <span class="nx">then</span> <span class="nx">becomes</span> <span class="nx">a</span> <span class="nx">local</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nx">console</span><span class="o">?</span><span class="p">.</span><span class="nx">log</span><span class="o">?</span> <span class="s1">&#39;store is not enabled&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>local storage versus cookies</h3>

<ul>
<li><strong>client versus server</strong> -> Cookies and local storage really serve difference purposes. Cookies are primarily for reading server-side, local storage can only be read client-side. So the question is, in your app, who needs this data — the client or the server? If it&#8217;s your client (your JavaScript), then by all means switch. You&#8217;re wasting bandwidth by sending all the data in each HTTP header. If it&#8217;s your server, local storage isn&#8217;t so useful because you&#8217;d have to forward the data along somehow (with Ajax or hidden form fields or something). This might be okay if the server only needs a small subset of the total data for each request.</li>
<li><strong>Size</strong> -> Apart from being an old way of saving data, Cookies give you a limit of 4096 bytes (4095, actually) - its per cookie. Local Storage is as big as 5MB per domain.</li>
<li>you can test your local storage <a href="http://arty.name/localstorage.html">here</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grape Api]]></title>
    <link href="http://www.adamjonas.com/blog/grape-api/"/>
    <updated>2013-11-11T15:13:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/grape-api</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/intridea/grape">Grape</a></h2>

<ul>
<li>Grape is a REST-like API micro-framework for Ruby. It&#8217;s designed to run on Rack or complement existing web application frameworks such as Rails and Sinatra by providing a simple DSL to easily develop RESTful APIs.</li>
<li>Here is a nice <a href="http://www.slideshare.net/yorzi/rapid-rubyapiongrape-8674582">slide share</a> of the API possibilities (though it is from 2011).</li>
<li><a href="http://joeybeninghove.com/2012/01/21/grape-apis-few-quick-tidbits/">some tips here</a></li>
</ul>


<h3>Rack::Cors</h3>

<ul>
<li>Rack::Cors provides support for Cross-Origin Resource Sharing (CORS) for Rack compatible web applications. The CORS spec allows web applications to make cross domain AJAX calls without using workarounds such as JSONP.</li>
<li><a href="http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/">explaination worth reading</a></li>
</ul>


<h3>Trouble with protected_attributes</h3>

<ul>
<li>rails 4 &#8211; learned via <a href="https://github.com/rails/rails/issues/12360">issue 12360</a> that protected_attr needs to be up to date. In my case, v 1.0.5.</li>
</ul>


<h3>Rack Console</h3>

<ul>
<li>used gem <a href="https://github.com/sickill/racksh"><code>racksh</code></a> for a rack console. Pretty dandy.</li>
</ul>


<h3>Mind f<sup>ck</sup></h3>

<ul>
<li><a href="https://github.com/rosenfeld/active_record_migrations">active_record_migrations</a> worked when vendored locally, but the config options were not configuring anything when remote.

<ul>
<li>went hunting in <a href="https://github.com/rails/rails/tree/master/activerecord">active_record</a> (specifically in the <a href="https://github.com/rails/rails/blob/d8b173607da94419e841c4d36f251987c9acf156/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb">postgres adapter</a>, but didn&#8217;t find anything to solve the problem. Some <a href="https://github.com/rails/rails/blob/d8b173607da94419e841c4d36f251987c9acf156/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L390">cool datatypes</a> in there though.</li>
</ul>
</li>
<li>ended up using the <code>DATABASE_URL</code> env instead of database.yml to configure the postgres DB.</li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-08-14T18:32:33-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HAW-day10]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/14/haw-day10/"/>
    <updated>2012-08-14T12:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/14/haw-day10</id>
    <content type="html"><![CDATA[<h3>Code Clean Up</h3>

<p>if they are submitting tag_names (a comma seperated list of tag values) pass that data to tag_names=
but if they are submitting a single tag_name, such as slug pass that to a different method&#8230;</p>

<figure class='code'><figcaption><span>Structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:airbrake_error</span><span class="o">][</span><span class="ss">:tag_slug</span><span class="o">]</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:tag_slug</span><span class="o">]</span>
</span><span class='line'><span class="p">{</span><span class="ss">:airbrake_error</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:tag_slug</span> <span class="o">=&gt;</span> <span class="s2">&quot;Signal&quot;</span><span class="p">},</span> <span class="ss">:tag_slug</span> <span class="o">=&gt;</span> <span class="s2">&quot;Signal&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://teachmetocode.com/articles/ruby-on-rails-nifty-generators/">nifty generators</a></p>

<p>layouts/application.html</p>

<p>total and index errors page are the same except for the buttons</p>

<p>validations on signal and noise</p>

<p>not clearing tags</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forms]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/14/forms/"/>
    <updated>2012-08-14T10:49:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/14/forms</id>
    <content type="html"><![CDATA[<h3>Forms</h3>

<p>forms are a collection of elements
text element cant live by itself
the entire sign up for needs to be submitted to one place
group form elements together and you wrap them in a form</p>

<p>where its going has nothing to do with the information that it is passing in</p>

<p>every web request as a request and a response
a request has to go somewhere&#8211; that&#8217;s urls&#8211; that&#8217;s the address
forms pass along data for where we are going&#8211; go here and tell the server this</p>

<p><a href="htmlhttp://www.w3schools.com/tags/tag_input.asp">Input tags</a></p>

<p><strong><em>the name in the form is the key of the params hash</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#The html 
</span><span class='line'>&lt;input type="text", name="tag"&gt;
</span><span class='line'>#in the controller
</span><span class='line'>@airbrake_error.add_tags(params[:tag])</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#if the form contains </span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">text_field_tag</span><span class="p">(</span><span class="ss">:query</span><span class="p">)</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="c1">#then you would be able to get the value of this field in the controller with params[:query].</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>text_field_tag :name of the tag and then the prefilled value</p></li>
<li><p>f.text_field :comments is NESTED in airbrake error which is represented by f</p></li>
<li><p>The form doesn&#8217;t need a name&#8211; it is the wrapper. The input elements DO need names.</p></li>
</ul>


<p><a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions">Understanding naming parameter conventions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day9]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/13/haw-day9/"/>
    <updated>2012-08-13T10:25:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/13/haw-day9</id>
    <content type="html"><![CDATA[<p><a href="http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid/">Customer Validators on Mongoid</a></p>

<p>HTML and CSS Lessons:
:  A div is block level element commonly used to identify large sections of a website, helping build the layout and design.
:  A span on the other hand, is an inline element commonly used to identify smaller sections of text within a block level element, such as a paragraph.</p>

<p><a href="http://css-tricks.com/the-css-box-model/">The box model:</a>
Every element on a page is a rectangular box.</p>

<p><a href="http://coding.smashingmagazine.com/2007/05/01/css-float-theory-things-you-should-know/">Float Theory:</a></p>

<p><a href="http://learn.shayhowe.com/html-css/building-forms">Building Forms</a>
<a href="http://diveinto.html5doctor.com/">HTML5 Madness</a></p>

<p>state machine
acts as state machine
aasm gem</p>

<p>form_for
fields_for &#8211; to switch the model in the form &#8211; like embedding one forms for into another.</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Accepts nested attributes railscast</a></p>

<p><a href="http://www.tutorialspoint.com/ruby/ruby_operators.htm">Ruby operators</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day8]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/10/haw-day8/"/>
    <updated>2012-08-10T11:45:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/10/haw-day8</id>
    <content type="html"><![CDATA[<p>To run the seed task in heroku staging&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku run rake db:seed --remote staging</span></code></pre></td></tr></table></div></figure>


<p><a href="https://devcenter.heroku.com/articles/multiple-environments">staging environment set-up</a>
<a href="http://mikewilliamson.wordpress.com/2010/07/02/my-git-cheatsheet/">other clues to creating a staging set up on heroku</a></p>

<p><a href="http://stackoverflow.com/questions/8298389/using-tablesorter-how-can-i-format-a-column-after-the-sort-is-applied">sorting the date properly using hidden fields with table sorter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day7]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/09/haw-day7/"/>
    <updated>2012-08-09T10:11:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/09/haw-day7</id>
    <content type="html"><![CDATA[<p>Goals:
add text field to all tags index page
figure out why fix button doesn&#8217;t work on errors index and why none work on show pages</p>

<p>Way to call a method in the view:</p>

<p>action in the controller
a route that maps to the to the controller and action
can i just not call &lt;% import %> or something?
ajax can ping errors/import</p>

<p>progress bars for import are in the</p>

<p><a href="http://ruby.zigzo.com/2011/10/02/flash-messages-twitters-bootstrap-css-framework/">flash message:</a>
In the helpers/application_helper.rb</p>

<p>in the layouts/application.html.erb</p>

<figure class='code'><figcaption><span>Refresh Errors</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span> <span class="o">&lt;%=</span><span class="n">link_to</span> <span class="s2">&quot;Refresh Errors&quot;</span><span class="p">,</span> <span class="n">errors_import_path</span><span class="sx">%&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We put the link_to inside the a class. But it seems to that the A tag is open</p>

<figure class='code'><figcaption><span>Adding flash messages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">flash_class</span><span class="p">(</span><span class="n">level</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">level</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:notice</span> <span class="k">then</span> <span class="s1">&#39;info&#39;</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:error</span> <span class="k">then</span> <span class="s1">&#39;error&#39;</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:alert</span> <span class="k">then</span> <span class="s1">&#39;warning&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>delayed job - backend server
<em>if it takes a variable it uses a colon and needs are parameter&#8230;</em>
pop up and alert box</p>

<figure class='code'><figcaption><span>Button:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span> <span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Refresh Errors&quot;</span><span class="p">,</span> <span class="s2">&quot;errors_import_path&quot;</span> <span class="sx">%&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="c1">#this is the path that is the abstraction of the path in rakeroutes</span>
</span></code></pre></td></tr></table></div></figure>


<p>attr_accessbile is ignored in mongoid</p>

<p>document
in the the view we added</p>

<p>LESSONS:
In the controller I was calling trying to find the Tag by ID. The correct way is below&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_by_slug</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Routes</h3>

<p>We always need a route when we are calling an action&#8230;
So if there is a dynamic variable (like ID&#8211; always indicated with a colon) in the route, it needs a paramater passed in!</p>

<p>DO NOT Hardcode, use the alias name. Sometimes this means that you need to name it</p>

<figure class='code'><figcaption><span>Use the :as to name the route path</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;errors/:id/tag_general&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;errors#tag_general&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="s1">&#39;tag_general_error&#39;</span>
</span><span class='line'><span class="c1">#now this can be referred to as the tag_general_error_path</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>adding images to octopress</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">img</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">claudiolassala</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">wordpress</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="mi">2011</span><span class="o">/</span><span class="mo">05</span><span class="o">/</span><span class="n">routes</span><span class="o">.</span><span class="n">png</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>redrirect_to :back</em></strong> brings you back to the original page. This was useful for destroying a tag name and then redirecting to the tag index.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day6]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/08/haw-day6/"/>
    <updated>2012-08-08T11:47:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/08/haw-day6</id>
    <content type="html"><![CDATA[<p>Coffee Script
<a href="http://railscasts.com/episodes/267-coffeescript-basics">Rails Cast</a></p>

<p>ISSUES:
Ran into problems with a conflict bewtween the .js table sorter and checkbox select all .js
??Does it have to be loaded before the html table is created?</p>

<p>Checkboxes always use input tags</p>

<h3>Psudo Selectors:</h3>

<p>p:first - first paragrapah
input:checkbox - all checkboxes
input:text_field - all text fields
a:hidden - all hidden links</p>

<p>.attr( attributeName )
- Returns: String
- Description: Get the value of an attribute for the first element in the set of matched elements.</p>

<p>jquery token input - when you aren&#8217;t editing the tag
- when you click in that box we have autocomplete
- bulk assign -</p>

<ul>
<li>resolve the error in airbrake from our app</li>
<li>allow comments</li>
<li>resolved or fixed button</li>
</ul>


<p>dont allow signal and noise
capture info on when the last deploy was&#8230;
if the deploy was more recent than the fixed tag than</p>

<p>refresh error button to import errors &#8211; put notice on success or failure to import
main errors page a drop down filter based on tag</p>

<p>FEEDBACK:
button refreshes import immedately
show tags page&#8230; with edits
comment field added for each error
formatting the error message
fix was deployed with button - shows the fixed errors as repeats after a deploy
mutually exclusive signal and noise</p>

<p>filters as multi select
stats on front page
-!total error counts
-!avg errors per day
last week to this week -snapshot</p>

<p>v2:
custom tags in bulk
setting up filters - if front end bug assignment</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/07/jquery/"/>
    <updated>2012-08-07T11:35:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/07/jquery</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">belts</span> <span class="o">=</span> <span class="nx">confirm</span><span class="p">(</span><span class="s1">&#39;Turn on the fasten seatbelt sign?&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Seatbelts: &#39;</span> <span class="o">+</span> <span class="nx">belts</span><span class="p">);</span>
</span><span class='line'><span class="c1">//can string multiple calls together like above</span>
</span></code></pre></td></tr></table></div></figure>


<p>having trouble with the syntax of closing the parentheses.</p>

<p>Repel -</p>

<p>everythign with remote true should have their submit button hijacked and exectured with ajax
jquery is to rails what ruby is js</p>

<figure class='code'><figcaption><span>src</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">&quot;URL&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>[XHR](</span><a href='https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest?redirectlocale=en-US&redirectslug=XMLHttpRequest)'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//To create an instance of XMLHttpRequest, simply do this:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>xhr- used to be just xml</p>

<p>READ: <a href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications">ajax jesse james garrett</a>
AJAX = Asynchronous JavaScript + XML
Ajax incorporates:
- standards-based presentation using XHTML and CSS;
- dynamic display and interaction using the Document Object Model;
- data interchange and manipulation using XML and XSLT;
- asynchronous data retrieval using XMLHttpRequest;
- and JavaScript binding everything together.</p>

<p>adaptive path
elements of user experience</p>

<p>js is all an event model</p>

<p>predictable DOM</p>

<p>The DOM is a node structure or tree
has HTML tag, head tag, title child, body tag, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find all h1s</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find all ps</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;p#final&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//find the paragraph with ID final</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//these return arrays with the elements inside</span>
</span><span class='line'><span class="c1">//if the search doesn&#39;t return anything, then it returns an empty array []</span>
</span><span class='line'><span class="c1">// be careful- this empty array is considered truthy</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1, p.plan&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//returns an array with both elements-- one string, seperated by commas</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;h1&quot;</span><span class="p">,</span> <span class="s2">&quot;p.plan&quot;</span><span class="p">)</span> <span class="c1">// THIS WON&#39;T WORK</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p:first&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//returns the first p it encounters</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;p.first&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//looks for the p.first node</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://css-tricks.com/the-difference-between-id-and-class/">###Difference between li/#b and li.b?###</a></p>

<h1>=> ids &#8211;> IDs are unique</h1>

<ul>
<li>Each element can have only one ID</li>
<li>Each page can have only one element with that ID</li>
</ul>


<p>dot b => class names &#8211;> are NOT unique
- You can use the same class on multiple elements.
- You can use multiple classes on the same element.</p>

<h3>Crazy Selector</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;tr#error_&lt;%error.id %&gt; input:submit[value=&#39;Noise&#39;]&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">confirm</span><span class="p">(</span><span class="s2">&quot;Are you sure?&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// input:submit[value=&#39;Noise&#39;]&quot; are you kidding me?</span>
</span></code></pre></td></tr></table></div></figure>


<p>To select children elements use a space between the parent and child selector&#8230;
For example, to select all <a> tags that are children of a tag with id = foo, you&#8217;d do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#foo a&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//in the exercise</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul#first_class li&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Select all the rows and seats in first class, everything with an &lt;LI&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can go as many levels deep as you want when selecting children</li>
<li>For example, to select all <a> tags that have two <div> parents, you&#8217;d do this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div div a&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//in the exercise:</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul li ul li&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Find all the window seats (a & d in first class, and a & f in economy)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li.a, ul#first_class li.d, ul#economy_class li.f&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>can pass in a map which is like a hash in ruby
key are seperated from values by colons</p>

<p>HTML is for structure
CSS is for presentation
Javascript is for interaction &#8211; it shouldn&#8217;t take over the duties of the other two</p>

<pre><code>use .css() with reservation. better to manipulate the class and IDs 
</code></pre>

<p>.addClass()
.removeClass() //if you do this with no parameters it will strip it of all css classes</p>

<p>hasClass() #=> true /false</p>

<p>do/undo toggle pattern
(&#8216;p:first&#8217;).toggleClass(&#8220;bigger&#8221;):</p>

<p>.show()
.hide()
.toggle()</p>

<p>Document ready waits for the DOM to download then the DOM comes through. When it&#8217;s finished the ready event fires</p>

<p><strong><em>JSON</em></strong> is just a javascript map that gets passed around</p>

<p>DOM and CSS communicate through classes and IDs
use .css() with reservation. better to manipulate the class and IDs thereby delegating the responsbility to the css</p>

<p>event bubbling
event delegation</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TODO]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/07/todo/"/>
    <updated>2012-08-07T10:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/07/todo</id>
    <content type="html"><![CDATA[<p>lambdas, procs
   <a href="http://www.youtube.com/watch?v=VBC-G6hahWA&amp;feature=related">http://www.youtube.com/watch?v=VBC-G6hahWA&amp;feature=related</a>
   <a href="http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/">http://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/</a></p>

<p>inject
<a href="http://blog.jayfields.com/2008/03/ruby-inject.html">http://blog.jayfields.com/2008/03/ruby-inject.html</a>
<a href="http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/">http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/</a></p>

<p>need to understand select better</p>

<p>namespacing==></p>

<p>class Dog
  Species = [&#8220;Poodle&#8221;]
 end</p>

<p> Dog::Species
 Species is a Constant within the Dog class. Species could be a class it could be a module, but it is a child of Dog.</p>

<p> make list of common many to many relationships, one to many relationships</p>

<p>active resource versus active record
active record is an ORM- it wraps the database
active resource wraps the restful web app with Ruby classes and work with them like Active Record models.</p>

<p>mass assignment and the .build(params[:user_name])</p>

<p>Coffee script</p>

<p>HTML &amp; CSS reading</p>

<p><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">javascript the good parts</a></p>

<p>Ternary (shortened if statement) Syntax
Ternary syntax is the same in Ruby as most languages. The following sample will print “The variable is 10″ if var is equal to 10. Otherwise it will print “The variable is Not 10″.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">print</span> <span class="err">“</span><span class="no">The</span> <span class="n">variable</span> <span class="n">is</span> <span class="err">”</span> <span class="o">+</span> <span class="p">(</span><span class="n">var</span> <span class="o">==</span> <span class="mi">10</span> <span class="o">?</span> <span class="err">“</span><span class="mi">10</span><span class="err">″</span> <span class="p">:</span> <span class="err">“</span><span class="no">Not</span> <span class="mi">10</span><span class="err">″</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day5]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/06/haw-day5/"/>
    <updated>2012-08-06T10:23:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/06/haw-day5</id>
    <content type="html"><![CDATA[<p>GOALS:
Refactor code, figure out the jquery ajax checkboxes.
ship v1 by the end of the day</p>

<p><a href="http://khelll.com/blog/ruby/ruby-dynamic-method-calling/">send method</a>
<a href="http://philcrissman.com/2009/06/26/rubys-objectsend-can-call-private-and-protected-methods/">send method to call private method</a></p>

<figure class='code'><figcaption><span>Code that finally worked&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;action&quot;</span><span class="p">,</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;controller&quot;</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_created_at&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:error_class</span> <span class="o">=&gt;</span> <span class="s2">&quot;error_class&quot;</span><span class="p">,</span> <span class="ss">:error_message</span> <span class="o">=&gt;</span> <span class="s2">&quot;error_message&quot;</span><span class="p">,</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="s2">&quot;file&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_id&quot;</span><span class="p">,</span> <span class="ss">:line_number</span> <span class="o">=&gt;</span> <span class="s2">&quot;line_number&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:most_recent_notice_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_most_recent_notice_at&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:notice_hash</span> <span class="o">=&gt;</span> <span class="s2">&quot;notice_hash&quot;</span><span class="p">,</span> <span class="ss">:notices_count</span> <span class="o">=&gt;</span> <span class="s2">&quot;notices_count&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:project_id</span> <span class="o">=&gt;</span> <span class="s2">&quot;project_id&quot;</span><span class="p">,</span> <span class="ss">:rails_env</span> <span class="o">=&gt;</span> <span class="s2">&quot;rails_env&quot;</span><span class="p">,</span> <span class="ss">:resolved</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_resolved&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:search_index_me</span> <span class="o">=&gt;</span> <span class="s2">&quot;search_index_me&quot;</span><span class="p">,</span> <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="s2">&quot;airbrake_updated_at&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">errors</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span> <span class="c1">#each error is a hash</span>
</span><span class='line'>      <span class="n">airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span> <span class="c1">#this needs to be outside the following loop or it will create a new object during every loop...</span>
</span><span class='line'>      <span class="n">actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">airbrake_action</span><span class="p">,</span> <span class="n">our_action</span><span class="o">|</span> <span class="c1">#aa is a sym key, oa is a string value</span>
</span><span class='line'>       <span class="n">airbrake_error</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">our_action</span><span class="si">}</span><span class="s2">=&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">error</span><span class="o">[</span><span class="n">airbrake_action</span><span class="o">]</span><span class="p">)</span><span class="c1"># SEND method here</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span> <span class="c1">#see below</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Other use of send&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">attribute_updater</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@airbrake_errors</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updater_actions</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;notices_count&quot;</span><span class="p">,</span> <span class="s2">&quot;action&quot;</span><span class="p">,</span> <span class="s2">&quot;controller&quot;</span><span class="p">,</span> <span class="s2">&quot;error_class&quot;</span><span class="p">,</span> <span class="s2">&quot;file&quot;</span><span class="p">,</span> <span class="s2">&quot;line_number&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s2">&quot;airbrake_most_recent_notice_at&quot;</span><span class="p">,</span> <span class="s2">&quot;notice_hash&quot;</span><span class="p">,</span> <span class="s2">&quot;airbrake_resolved&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s2">&quot;airbrake_updated_at&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@airbrake_errors</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">airbrake_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">airbrake_id</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">original_error</span> <span class="o">=</span> <span class="vi">@airbrake_errors</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">airbrake_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">airbrake_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">updater_actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span>
</span><span class='line'>          <span class="n">original_error</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">action</span><span class="si">}</span><span class="s2">=&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="nb">self</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">action</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>          <span class="n">original_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>TODO:
inject method</p>

<p>Per Dave:
-one form that is ignore, one that signal, one that is the tags
-remote true- a flag that going to submit the form via ajax</p>

<p><a href="http://guides.rubyonrails.org/form_helpers.html">Remote True:</a>
Unlike other forms making an asynchronous file upload form is not as simple as providing form_for with :remote => true. With an Ajax form the serialization is done by JavaScript running inside the browser and since JavaScript cannot read files from your hard drive the file cannot be uploaded. The most common workaround is to use an invisible iframe that serves as the target for the form submission.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day4]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/03/haw-day4/"/>
    <updated>2012-08-03T16:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/03/haw-day4</id>
    <content type="html"><![CDATA[<p>Error:
&#8220;SystemStackError: stack level too deep&#8221;
This means that you have entered an infinite loop. e.g. you have called something on itself.</p>

<p>Need to understand inject&#8230;
http://blog.jayfields.com/2008/03/ruby-inject.html</p>

<p>struggling with this&#8230;</p>

<figure class='code'><figcaption><span>Trying to make this work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="n">action</span><span class="p">,</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="n">controller</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_created_at</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:error_class</span> <span class="o">=&gt;</span> <span class="n">error_class</span><span class="p">,</span> <span class="ss">:error_message</span> <span class="o">=&gt;</span> <span class="n">error_message</span><span class="p">,</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">airbrake_id</span><span class="p">,</span> <span class="ss">:line_number</span> <span class="o">=&gt;</span> <span class="n">line_number</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:most_recent_notice_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_most_recent_notice_at</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:notice_hash</span> <span class="o">=&gt;</span> <span class="n">notice_hash</span><span class="p">,</span> <span class="ss">:notices_count</span> <span class="o">=&gt;</span> <span class="n">notices_count</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:project_id</span> <span class="o">=&gt;</span> <span class="n">project_id</span><span class="p">,</span> <span class="ss">:rails_env</span> <span class="o">=&gt;</span> <span class="n">rails_env</span><span class="p">,</span> <span class="ss">:resolved</span> <span class="o">=&gt;</span> <span class="n">airbrake_resolved</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:search_index_me</span> <span class="o">=&gt;</span> <span class="n">search_index_me</span><span class="p">,</span> <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_updated_at</span><span class="o">]</span>
</span><span class='line'>    <span class="n">actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">airbrake_action</span><span class="p">,</span> <span class="n">our_action</span><span class="o">|</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">our_action</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="n">airbrake_action</span><span class="o">]</span>
</span><span class='line'>        <span class="n">airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span>
</span><span class='line'>        <span class="n">airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>This is the original&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:action</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">controller</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:controller</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_created_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:created_at</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">error_class</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:error_class</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">error_message</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:error_message</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">file</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_id</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">line_number</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:line_number</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_most_recent_notice_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:most_recent_notice_at</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">notice_hash</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:notice_hash</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">notices_count</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:notices_count</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">project_id</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:project_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">rails_env</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:rails_env</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_resolved</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:resolved</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">search_index_me</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:search_index_me</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_updated_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:updated_at</span><span class="o">]</span>
</span><span class='line'>        <span class="c1"># airbrake.send(&quot;#{key}=&quot;, value)</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3/"/>
    <updated>2012-08-02T10:55:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3</id>
    <content type="html"><![CDATA[<p>Rolled back git using the sha</p>

<p>used the fresh method to collect the fresh errors in an array. then we used the flatten method to un-nest the array to acccess the objects.</p>

<p>changed the interface to show the airbrake IDs so that we can differentiate the errors with the same name</p>

<p>p291
form_tag issues an HTTP request that replaces all the content in the browser.
form_remote_tag issues an HTTP request, but processes the results with JavaScript
rather than having the browser render them directly.</p>

<p>nav
filtering
all errors inbox
checkboxes(which don&#8217;t work but do display) - have the route for signal</p>

<p>event driven programming</p>

<p>dom fields</p>

<p>cmd option i - to open the</p>

<p>collect all values
submit the request, submit the values manually
raise params.inspect</p>

<p>GOAL OF THE IMPORTER:
import a new set of airbrake errors</p>

<p>if the id is NOT uniq then update the attributes but do not display or save in mongoid memory</p>

<p>identify what is uniq with the present method
if uniq ignore
if NOT uniq then update attributes
makes sure the newly imported error will not save &#8211;> validation should take care of this</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day2]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/01/haw-day2/"/>
    <updated>2012-08-01T11:31:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/01/haw-day2</id>
    <content type="html"><![CDATA[<p>builder pattern versus the inheritance pattern</p>

<p>no diff between slugs and permalinks</p>

<p>To install a gem from a fork</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'</span></code></pre></td></tr></table></div></figure>


<p>add validation to prevent slug nil</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD
</span><span class='line'># could also reset to a specific point in time
</span><span class='line'>git reset --hard &lt;sha&gt;</span></code></pre></td></tr></table></div></figure>


<p>HEAD is the current version</p>

<p>delete local branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -d initial-error-tagging
</span><span class='line'>#to delete the remote...
</span><span class='line'>♕ git push origin :initial-error-tagging</span></code></pre></td></tr></table></div></figure>


<p>GOALS:
1. normalize the tag_names DONE</p>

<ol>
<li>should be able to mark the error as ignore and rerun the importer and when it&#8217;s reimported it should still be marked as ignored&#8230;.</li>
<li>inbox not show you errors with tag ignore</li>
<li>if we reimport these errors they need to maintain their tags (is this )
does the count update?</li>
</ol>


<p> look into scopes&#8211; need to filter ignore off the index
read about named scopes on mongoid
http://mongoid.org/en/mongoid/docs/querying.html#scoping
desired code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">not_ignored</span>
</span><span class='line'><span class="c1">#or better yet</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">fresh</span> <span class="c1"># =&gt; to get a list of errors that haven&#39;t been ignored.</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>li needs to build a show page of each error&#8217;s attributes</li>
</ol>


<p>NOTES:
Scoping - so scoping is like a filter
<a href="http://mongoid.org/en/mongoid/docs/querying.html#scoping">Mongoid scoping macro</a></p>

<figure class='code'><figcaption><span>Filtering/Scope</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tag</span><span class="o">.</span><span class="n">not_in</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;fresh&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:airbrake_errors</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">airbrake_errors</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autocomplete for tags:
<a href="http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid">http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid</a></p>

<p><a href="http://railsforum.com/viewtopic.php?id=2151">Select all checkboxes</a>
<a href="http://www.rorexperts.com/select-and-unselect-all-checkboxes-by-selecting-single-check-t1614.html">or</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[haw-day1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1/"/>
    <updated>2012-07-31T15:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1</id>
    <content type="html"><![CDATA[<h3>Deploying to Heroku</h3>

<p>Make sure to modify the <a href="https://devcenter.heroku.com/articles/mongohq#mongoid">mongoid.yml file</a> to config the production environment.</p>

<p><strong><em>2 major issues with the mongoid deploy:</em></strong></p>

<ol>
<li>Issue with ruby version was the first error we encountered&#8230; need to keep in that <em>mongoid only supports 1.9.3</em> this ended up being a big issue.</li>
</ol>


<p>In &#8211;> heroku logs &#8211;tail:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActionView::Template::Error (undefined method `[]' for nil:NilClass):
</span><span class='line'> 11:   &lt;/thead&gt;  
</span><span class='line'> 10:     &lt;/tr&gt;
</span><span class='line'> 12: 
</span><span class='line'> 13:   &lt;% @airbrake_errors.each_with_index do |a_e, index| %&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The other issue was to reconfigure the setting below from false to true as the</li>
</ol>


<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">ActionView</span><span class="o">::</span><span class="no">Template</span><span class="o">::</span><span class="no">Error</span> <span class="p">(</span><span class="n">images</span><span class="o">/</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="mi">144</span><span class="n">x144</span><span class="o">-</span><span class="n">precomposed</span><span class="o">.</span><span class="n">png</span> <span class="n">isn</span><span class="s1">&#39;t precompiled):</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> &lt;%= favicon_link_tag &#39;</span><span class="n">images</span><span class="o">/</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="mi">144</span><span class="n">x144</span><span class="o">-</span><span class="n">precomposed</span><span class="o">.</span><span class="n">png</span><span class="s1">&#39;, :rel =&gt; &#39;</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="n">precomposed</span><span class="s1">&#39;, :type =&gt; &#39;</span><span class="n">image</span><span class="o">/</span><span class="n">png</span><span class="s1">&#39;, :sizes =&gt; &#39;</span><span class="mi">144</span><span class="n">x144</span><span class="s1">&#39; %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> app/views/layouts/application.html.erb:19:in `_app_views_layouts_application_html_erb___1957659516384225917_21931620&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rewriting the writer</h3>

<figure class='code'><figcaption><span>Change the tag writer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#the find_or_create_by wasn&#39;t creating unique tag names</span>
</span><span class='line'>      <span class="c1">#the reason was because we were linking too many methods together</span>
</span><span class='line'>      <span class="c1">#mongoid is finicky</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># was changed to...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># but we discoved that the tags were no disappearing if they were left off the form</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">#later we added this line because tags were persisting even if we tried to edit them.</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>the last td was changed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&lt;</span><span class="sx">% @airbrake_errors.each_with_index </span><span class="k">do</span> <span class="o">|</span><span class="n">a_e</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;tr&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="sx">%= a_e.tags.collect{ |tag|</span>
</span><span class='line'><span class="sx">         link_to(tag.name, tag_path(tag)) #=</span><span class="o">&gt;</span> <span class="s2">&quot;&lt;a href=&quot;</span><span class="n">adasda</span><span class="s2">&quot;&gt;Tag&lt;/a&gt;&quot;</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html_safe</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">     &lt;/td&gt;</span>
</span><span class='line'>      <span class="c1"># this needs to be better understood-- TODO</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTTP Authentication</h3>

<p><a href="http://stackoverflow.com/questions/3839167/is-there-a-way-to-set-up-simple-http-authentication-for-an-app-on-heroku">This did it</a>.</p>

<h3>Pushing the seed file to heroku</h3>

<figure class='code'><figcaption><span>the last td was changed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♕</span> <span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:seed</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake tasks]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/31/rake-tasks/"/>
    <updated>2012-07-31T11:54:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/31/rake-tasks</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>This is a rake task file&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:load_errors</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">import_from_airbrake</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In heroku I would run this:</p>

<figure class='code'><figcaption><span>This is a rake task file&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♕</span> <span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">load_errors</span>
</span><span class='line'><span class="c1"># NOT</span>
</span><span class='line'><span class="err">♕</span> <span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">task</span> <span class="n">bandaid</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW- Day0]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/30/haw-day0/"/>
    <updated>2012-07-30T10:13:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/30/haw-day0</id>
    <content type="html"><![CDATA[<p>Pivotal:
Move from icebox to current
Click Start
Each story is either a feature, a bug, or a chore</p>

<p>Generate our app
Some sort of layout
beginning data model
- main model
- tag model
Import script to retreive that data off the API</p>

<p>Views/Controllers
- index view
- tagging</p>

<p>Keep commits small and never develop in the master branch</p>

<p>Git:
Git create the repo
git clone the repo
git merge mongoid-setup &#8211;no-ff #no FF- will show the branch even after the commmit</p>

<p>Mongoid-
rails new myapp -O (&#8211;skip-active-record)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'mongoid', "~&gt; 3.0.0"</span></code></pre></td></tr></table></div></figure>


<p>Twitter Bootstrap
gem twitter-bootstrap</p>

<p>Airbrake Gem</p>

<p>Powder Gem
gem install powder
makes app available at airbrake.dev</p>

<p>Immediately want to start creating the &#8216;error model&#8217;, but error is a terrible title so call it airbrake model</p>

<p>Routes:
change index to errors#index</p>

<p>Generate airbrake_errors model
Generate errors_controller
Generate bootstrap</p>

<figure class='code'><figcaption><span>Fluid Layout</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">bootstrap</span> <span class="n">layout</span> <span class="n">application</span> <span class="n">fluid</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>In Console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AirbrakeError</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Test&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>in the test unit, want to check that AirbrakeError.delete_all
test to make sure the airbrake API gem tried to connect</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">AirbrakeError</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create initializer to config the connection to airbrake</p>

<h3>Next Steps</h3>

<p>build out the bootstrap layout
build the import script</p>

<p>Ruby Debugger: TODO
gem debugger at the bottom of the gem file
bundle</p>

<p>inspect the hashiemashie to see how the objects are composed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Airbrake Doc:
Can make calls to get a list of errors in general and a call to get more info about an error.
-The api in general isn&#8217;t all that detailed.</p>

<p>There is a diff between .error(&#8216;id&#8217;) and .errors &#8211; the difference is in what is returned&#8211; i.e. the backtrace etc.</p>

<p>check out what notices because we are probably interested more in the notice than the error itself.</p>

<figure class='code'><figcaption><span>Maybe Something Like This?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">ignore</span>
</span><span class='line'>  <span class="no">AirbrakeAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:resolved</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Diff between error and notice: an error is a unique conceptual item and a notice is the occurance of the error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="n">h</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="n">b</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'><span class="c1">#this is the same as the dynamic dispatching method</span>
</span><span class='line'><span class="n">airbrake</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>From there let&#8217;s go to the view and start formatting the output</p>

<p>Ruby alias method&#8211; this is built into ruby not rails or mongoid</p>

<figure class='code'><figcaption><span>airbrake_error.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span> <span class="ss">:name</span> <span class="ss">:error_message</span>
</span></code></pre></td></tr></table></div></figure>


<p>TIPS and Tricks section:
Gem Server shows the documentation locally</p>

<p><a href="http://www.codinghorror.com/">Jeff Atwood</a></p>

<p>LOOK-UP &#8216;Client&#8217;, &#8216;tap&#8217;, &#8216;send&#8217;
dynamic dispatch and the send method
rails cycle
Moped::BSON: &#8211; how it generates its unique IDs</p>

<p>GIT STUFF:</p>

<figure class='code'><figcaption><span>airbrake_error.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">pull</span> <span class="o">--</span><span class="n">rebase</span> <span class="c1">#=&gt; if the remote has merges, rewind and then move back forward</span>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="no">HEAD</span> <span class="c1">#=&gt; go to the last checkout (HEAD of the branch) without the warnings (hard)</span>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="c1"># save changes</span>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">pop</span> <span class="c1">#restore changes</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>airbrake_error.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">status</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">link</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">airbrake</span>
</span><span class='line'><span class="n">M</span>  <span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">airbrake_error</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">M</span>  <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">errors</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span>
</span><span class='line'><span class="no">Switched</span> <span class="n">to</span> <span class="n">a</span> <span class="kp">new</span> <span class="n">branch</span> <span class="s1">&#39;link-to-airbrake&#39;</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;added airbrake_url method and link_to in views&quot;</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">push</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">master</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">link</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">airbrake</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">push</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 7 -Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails/"/>
    <updated>2012-07-29T14:20:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Song class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">genre_name</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">genres</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">g</span><span class="o">|</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">genre_name</span><span class="o">=</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">strip</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'>    <span class="no">SongGenre</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:genre</span> <span class="o">=&gt;</span> <span class="no">Genre</span><span class="o">.</span><span class="n">find_or_create_by_name</span><span class="p">(</span><span class="n">genre_name</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>an album has many songs&#8230; which means the accepts nested attributes for will be a good fit</p>

<h3>Nested Resource</h3>

<p>begins with the routes</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested Model Form Rails Cast</a></p>

<p><a href="http://blog.aviflombaum.com/blog/2012/07/dont-use-accepts-nested-attributes-for-with-belongs-to/"><strong><em>Dont&#8217; use nested attributes for a belongs_to association</em></strong></a></p>

<p>mass assignment and the .build(params[:user_name])</p>

<p>Form_for (2:40)</p>

<h3>Layouts and Sub-layouts</h3>

<figure class='code'><figcaption><span>On the Index Page</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% content_for </span><span class="ss">:sub_nav</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= link_to &quot;New Song&quot;, new_song_path %&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx"> # this could also be on the show page so they would share this sub_nav</span>
</span><span class='line'><span class="sx"> &lt;nav class=&quot;sub_nav&quot;&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="k">yield</span> <span class="ss">:sub_nav</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;% end %&gt;</span>
</span><span class='line'> <span class="c1"># this works because you create another yield in the app besides the body</span>
</span></code></pre></td></tr></table></div></figure>


<p>you can open up a sublayout as many times as you want to add links&#8230;</p>

<p><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current">link_to_unless_current</a>- it just creates the title, not the link to its own page&#8230; useful for nav bars</p>

<p>polymorphic interfaces: depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mixtape_path</span><span class="p">(</span><span class="vi">@mixtape</span><span class="p">)</span> <span class="c1">#=&gt; &#39;/mixtapes/1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>real life e.g.s
subway slot can accept a metrocard and a credit card&#8211; depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</p>

<p>render is another flexible polymorphic object-</p>

<figure class='code'><figcaption><span>Rending Partials in a Collection- very important</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= render @mixtape.songs %&gt;</span>
</span><span class='line'><span class="sx">#Down a level of abstraction since it reveals the collection and partial:</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">render</span> <span class="ss">:collection</span> <span class="o">=&gt;</span> <span class="vi">@mixtape</span><span class="o">.</span><span class="n">songs</span><span class="p">,</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="n">songs</span><span class="o">/</span><span class="n">song_li</span><span class="err">&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:song</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Cast Variables</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= render &#39;songs/fields&#39;, :f =</span><span class="o">&gt;</span> <span class="n">song_form</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If skip album name is true, then
(3:40)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="n">include_album_name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=&quot;field&quot;&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="sx">% f.label </span><span class="ss">:album</span> <span class="sx">%&gt; &lt;br /&gt;</span><span class="c1">#more code....</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#asset-tag-helpers">Passing Local Variables into Partials</a>&#8230; need to scroll down a little</p>

<p>write_attribute</p>

<p><a href="http://www.davidverhasselt.com/2011/06/28/5-ways-to-set-attributes-in-activerecord/">5 ways to set attributes in ActiveRecord</a></p>

<p>Could use callbacks and lifecycle hooks to normalize as well&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_validate</span> <span class="ss">:normalize_name</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_name</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB &amp; Mongoid]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/28/mongodb-and-mongoid/"/>
    <updated>2012-07-28T12:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/28/mongodb-and-mongoid</id>
    <content type="html"><![CDATA[<p><a href="http://blog.wiemann.name/mongoid-cheat-sheet">Mongo Cheat Sheet</a></p>

<h1>NoSQL</h1>

<p>Non-relational, next-generation operational datastores and databases
-databases designed for the web and attacking the traditional problems that traditional DBs have such as scaling out.</p>

<p>-Horizontally scalable architectures => no joins + no complex transactions</p>

<p>Datamodels:</p>

<ol>
<li>Key / Value Stores - (memcached, Dynamo)</li>
<li>Tabular (BigTable) - a hybrid</li>
<li>Document Oriented (MongoDB, CouchDB)</li>
</ol>


<p>Memcached and key/value are high on the scalability and performance side, but low on depth of functionality</p>

<p>RDBMS (relational database management systems) - strong depth of functionality with join models etc., low on the scalability and performance scale.</p>

<p>MongoDB- try to get the scalability and performance of a key/value store and try to make as functional as possible</p>

<p>What&#8217;s Missing?
- Joins
- Complex multi-row transactions
- SQL</p>

<p>Terminology:
In RDBMS // MongoDB
 - database => database like in MySQL
 - table => collection
 - row => document</p>

<p> MongoDB uses JSON style documents called BSON (binary JSON)</p>

<h2>-There are not predefined schemas, can use nested structures to embed complex values based on the keys</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post = {author: "mike",
</span><span class='line'>date: new Date (),
</span><span class='line'>text: "my blog post",
</span><span class='line'>tags: ["mongodb", "intro"]} 
</span><span class='line'>
</span><span class='line'>db.posts.save(post)</span></code></pre></td></tr></table></div></figure>


<p>MongoDB expects to have every document to have a &#8216;_id&#8217; key&#8211; it&#8217;s a <strong>*unique primary key</strong>**</p>

<h3>Dynamic Queries</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.posts.find({author: "mike"})
</span><span class='line'>
</span><span class='line'>#more advanced
</span><span class='line'>db.posts.find()
</span><span class='line'>        .sort({date: -1})
</span><span class='line'>        .limit(10)</span></code></pre></td></tr></table></div></figure>


<p>MongoDB has its own document based query language.</p>

<h3>Indexing</h3>

<p>B-Tree indexes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.posts.ensureIndex({tags: 1})
</span><span class='line'>
</span><span class='line'>#Indexing / Querying on Embedded Docs (dot notation)
</span><span class='line'>db.posts.find({"comments.author": "eliot"})
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Focus on Performance</em></strong>:
Don&#8217;t use REST to talk to the database. Use a binary TCP wire protocol because it is faster.</p>

<h3>Replica Sets</h3>

<p>similar to master-slave replication, but there is a primary and secondary node</p>

<h3>Auto-sharding</h3>

<ul>
<li>split up the data so certain shards (which are groups of nodes- replica set or master //slave) are responsible for some subset of the data</li>
</ul>


<p><a href="http://www.youtube.com/watch?v=bwAqN9l14kI">Intro video</a></p>

<p><a href="http://www.mongodb.org/display/DOCS/MongoDB+Data+Modeling+and+Rails">###Types###</a></p>

<h2>Mongoid</h2>

<p><a href="http://blog.wiemann.name/mongoid-cheat-sheet">Cheatsheet</a>
<a href="http://vimeo.com/9864311">Intro by the creator</a>
<a href="http://railscasts.com/episodes/238-mongoid">RailsCast</a>
<a href="http://mongoid.org/en/mongoid/">Docs</a></p>

<p>-Mongoid by default stores documents in a collection that is the pluralized form of the class name. For the following Person class, the collection the document would get stored in would be named people.</p>

<p>When a document is stored in the database the ruby object will get serialized into BSON and have a structure like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "_id" : ObjectId("4d3ed089fb60ab534684b7e9"),
</span><span class='line'>  "title" : "Sir",
</span><span class='line'>  "name" : {
</span><span class='line'>    "_id" : ObjectId("4d3ed089fb60ab534684b7ff"),
</span><span class='line'>    "first_name" : "Durran"
</span><span class='line'>  },
</span><span class='line'>  "addresses" : [
</span><span class='line'>    {
</span><span class='line'>      "_id" : ObjectId("4d3ed089fb60ab534684b7e0"),
</span><span class='line'>      "city" : "Berlin",
</span><span class='line'>      "country" : "Deutschland"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Querying</h3>

<figure class='code'><figcaption><span>Mongoid Querying</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Band</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Depeche Mode&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Band</span><span class="o">.</span>
</span><span class='line'>  <span class="n">where</span><span class="p">(</span><span class="ss">:founded</span><span class="o">.</span><span class="n">gte</span> <span class="o">=&gt;</span> <span class="s2">&quot;1980-1-1&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="k">in</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="o">[</span> <span class="s2">&quot;Tool&quot;</span><span class="p">,</span> <span class="s2">&quot;Deftones&quot;</span> <span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">union</span><span class="o">.</span>
</span><span class='line'>  <span class="k">in</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="o">[</span> <span class="s2">&quot;Melvins&quot;</span> <span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attributes</h3>

<p>All relations contain a target, which is the proxied document or documents, a base which is the document the relation hangs off, and metadata which provides information about the relation.</p>

<p>attr_accessible and validation are the same in Mongo as in ActiveRecord</p>

<p>embeds_many similar to has_many => but the information is embedded in the document rather than in a separate record like in ActiveRecord. Will I need to fetch this record outside of the parent? If so, I need than has_many makes more sense. The advantage of course is that the information is right inside that record.</p>

<p><strong><em>Embedded 1-1 relationships</em></strong>
:    The parent document of the relation should use the embeds_one macro to indicate is has 1 embedded child, where the document that is embedded uses embedded_in.</p>

<p><strong>*Embedded 1-Many</strong>**
:   The parent document of the relation should use the embeds_many macro to indicate it has n number of embedded children, where the document that is embedded uses embedded_in.</p>

<p><strong><em>Referenced 1-1</em></strong>
:    The parent document of the relation should use the has_one macro to indicate is has 1 referenced child, where the document that is referenced in it uses belongs_to.</p>

<p><strong><em>Referenced Many-to-Many</em></strong>
:    Many to many relationships where the inverse documents are stored in a separate collection from the base document are defined using Mongoid&#8217;s has_and_belongs_to_many macro. This exhibits similar behavior to Active Record with the exception that no join collection is needed, the foreign key ids are stored as arrays on either side of the relation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Airbrake]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/27/airbrake/"/>
    <updated>2012-07-27T12:23:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/27/airbrake</id>
    <content type="html"><![CDATA[<p>Airbrake is basically wrapped around a begin rescue block&#8230;
The app doesn&#8217;t break AND the error is sent to the application.</p>

<p>There are errors in apps that happen that you don&#8217;t care about, then there are show-stoppers.
- Solution: rebuild a dashboard to ignore the errors or use airbrake to config their own errors.</p>

<p>?How do you decide what kinds of errors are important</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AirbrakeAPI::Errors</span></code></pre></td></tr></table></div></figure>


<p>after you instantite the credientials, you need to create the connections
- learned this via the spec/client_spec</p>

<p>Keep running into the <a href="http://www.dzone.com/snippets/hashdeepmerge">deep_merge</a> undefined method. According to their specs, Airbreak assumes that the gems in the specs should be included in the library. They assume that people won&#8217;t be using this outside of rails, which is a big assumption.</p>

<p>HashieMashie- hashes behave as both as regular hash and as an object</p>

<p>Once the proper gems are required it works properly.
If this library had corrected all of the dependencies in it&#8217;s stand along library, this would have been fine&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ gem install airbrake-api
</span><span class='line'>♕ irb
</span><span class='line'> :001 &gt; require 'active_support'
</span><span class='line'> =&gt; true 
</span><span class='line'> :002 &gt; require 'active_support/core_ext'
</span><span class='line'> =&gt; true 
</span><span class='line'> :003 &gt; require 'i18n'
</span><span class='line'> =&gt; false 
</span><span class='line'> :004 &gt; require 'airbrake'
</span><span class='line'> =&gt; true 
</span><span class='line'> :005 &gt; require 'airbrake-api'
</span><span class='line'> =&gt; true 
</span><span class='line'> :006 &gt; AirbrakeAPI.configure(:account =&gt; 'gearshare', :auth_token =&gt; 'authcodehere', :secure =&gt; true)
</span><span class='line'> =&gt; AirbrakeAPI 
</span><span class='line'> :007 &gt; AirbrakeAPI.new
</span><span class='line'>NoMethodError: undefined method `new' for AirbrakeAPI:Module
</span><span class='line'> :008 &gt; AirbrakeAPI::Client.new
</span><span class='line'> =&gt; #&lt;AirbrakeAPI::Client:0x007fe102901880 @account="gearshare", @auth_token="authcode", @secure=true, @connection_options={}, @adapter=:net_http, @user_agent="AirbrakeAPI Ruby Gem 4.1.0"&gt; 
</span><span class='line'> :009 &gt; a = _
</span><span class='line'> =&gt; #&lt;AirbrakeAPI::Client:0x007fe102901880 @account="gearshare", @auth_token="authcode", @secure=true, @connection_options={}, @adapter=:net_http, @user_agent="AirbrakeAPI Ruby Gem 4.1.0"&gt; 
</span><span class='line'> :010 &gt; a.errors</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BadAss Keyboard Shortcuts]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/25/badass-keyboard-shortcuts/"/>
    <updated>2012-07-25T17:49:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/25/badass-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>shift, cmd, T &#8211; open the last tab closed in chrome and FF</p>

<p>And of course <a href="https://www.shortcutfoo.com/">shortcut foo</a> is awesome too!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake routes | grep mixtape</span></code></pre></td></tr></table></div></figure>


<p>Will only show the routes that match this resource.</p>

<h3>Indents in text editors</h3>

<p>cmd [ to move it <-
and cmd ] to move it -> in both textmate and sublime</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/25/postgres/"/>
    <updated>2012-07-25T11:00:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/25/postgres</id>
    <content type="html"><![CDATA[<p><a href="http://russbrooks.com/2010/11/25/install-postgresql-9-on-os-x">Install of postgresql on Mac OS X</a></p>

<p><a href="http://stackoverflow.com/questions/6710654/how-do-you-easily-change-from-sqlite-to-postgresql-in-rails">How do you easily change from SQLite to PostgreSQL in Rails</a> It hasn&#8217;t been a seemless transition for me. At least the first time around.</p>
]]></content>
  </entry>
  
</feed>

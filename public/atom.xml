<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-11-03T13:22:14-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Conf East]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/11/03/ruby-conf-east/"/>
    <updated>2012-11-03T11:42:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/11/03/ruby-conf-east</id>
    <content type="html"><![CDATA[<h3>Spike Driven Design</h3>

<p>Jonathan Berger</p>

<p>spike:</p>

<blockquote><p>a short investigation into a technique or a problem. The goal is learing and this will be thrown away.</p></blockquote>

<p>Takeaway:</p>

<blockquote><p>a lot of the work from the design phase can go directly into the finished project, without duplication of effort, and without sacrificing quality.</p></blockquote>

<ul>
<li><a href="http://pivotallabs.com/users/jonathanpberger/blog/articles/2349-spike-driven-design">Reading</a></li>
<li><a href="http://www.jonathanpberger.com/sdd-talk1/slides/index.html#/step-1">Slides</a></li>
</ul>


<p>ValueStruct</p>

<p><a href="http://www.flyertalk.com/">flyer talk</a>
<a href="http://milepoint.com/">Mile Point</a>
<a href="http://www.itasoftware.com/">Ita software</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day19]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/11/02/fis-day19/"/>
    <updated>2012-11-02T11:57:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/11/02/fis-day19</id>
    <content type="html"><![CDATA[<h3>Virtual Attributes:</h3>

<p>There are two rails casts on this&#8230; <a href="http://railscasts.com/episodes/16-virtual-attributes-revised">#16</a> and <a href="http://railscasts.com/episodes/167-more-on-virtual-attributes">#167</a>.</p>

<h3>Rails Lecture</h3>

<p>the name attribute of the HTML determines how it is processed by the server</p>

<p>form_vars pass in the query string since it isn&#8217;t in the</p>

<figure class='code'><figcaption><span>[Rack Does the Parsing](</span><a href='http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions)'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Utils</span><span class="o">.</span><span class="n">parse_query</span> <span class="s2">&quot;name=fred&amp;phone=0123456789&quot;</span>
</span><span class='line'><span class="c1"># =&gt; {&quot;name&quot;=&gt;&quot;fred&quot;, &quot;phone&quot;=&gt;&quot;0123456789&quot;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>This is NOT mass assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:song</span><span class="o">].</span><span class="n">except</span><span class="p">(</span><span class="ss">:artist_name</span><span class="p">))</span>
</span><span class='line'>  <span class="vi">@song</span><span class="o">.</span><span class="n">artist_name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:song</span><span class="o">][</span><span class="ss">:artist_name</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attribute Accessbile</h3>

<ul>
<li>attr_protected is the opposite of attr_accessbile</li>
<li>attr_protected whitelists everything except the attributes that are explicitly whitelisted</li>
</ul>


<h3>Associations</h3>

<p>If it has a belongs_to -> you know it has a foreign_key that points to the table it belongs_to
If it has_many -> you know that that thing has a foreign_key that points to the parent table</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">artist_name</span><span class="p">}</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="p">)</span>
</span><span class='line'>  <span class="no">Song</span><span class="o">.</span><span class="n">find_all_by_artist_name</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">artist_id</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#TODO: Refactor to use Song.update_all</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>expected Artist, but got String</p>

<figure class='code'><figcaption><span>Assigning the artist to a song</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mike Jackson&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">artist</span> <span class="o">=</span> <span class="n">m</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Use Build Not New</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">queen</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'><span class="n">queen</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;song name&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#to persist you can save queen OR you can save the song.</span>
</span><span class='line'><span class="n">mmm_bop</span><span class="o">.</span><span class="n">build_artist</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Hanson&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>has_many(name, options = {}, &amp;extension)
In the documentation the model names are replaced by the word collection. In the docs it shows all the methods that can be called on it. <a href="http://apidock.com/rails/ActiveRecord/Associations/ClassMethods/has_many">For example</a></p>

<ul>
<li>Note: collection is replaced with the symbol passed as the first argument, so has_many :clients would add among others clients.empty?.)</li>
</ul>


<blockquote><p>Build is to new, as create is to create</p></blockquote>

<ul>
<li>There is no Artist.build, but there is an Artist.create</li>
</ul>


<p>?? could you add a macro that ran a migration to add the id for the belongs_to table</p>

<h2>Seed Task</h2>

<p>The push method returns an array of all the objects in the array while the build method just returns that one song that you are building&#8230;</p>

<p>From the many it is songs.build and from the belongs it is song.build_artist</p>

<p>You can skip the save on the one to many save&#8230;</p>

<p>build is alias to new.</p>

<p>delete is for nullifying associations
destroy is for destroying objects</p>

<p>Look at end of file for clearing artists and songs.</p>

<figure class='code'><figcaption><span>Seed Task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Create a bunch of seed data for artists and songs&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:seed_artists_and_songs</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:environment</span><span class="p">,</span> <span class="ss">:clear_artists_and_songs</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Build Song Off Artist</span>
</span><span class='line'>  <span class="c1"># Given a Song called R.E.S.P.E.C.T</span>
</span><span class='line'>  <span class="c1"># build the Aretha Franklin Artist</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;R.E.S.P.E.C.T&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">build_artist</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Aretha Franklin&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#Create an Artist</span>
</span><span class='line'>  <span class="c1">#Build a Song for that Artist</span>
</span><span class='line'>  <span class="c1">#Save the Artist</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Natural Woman&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="c1">#from the many it is songs.build and from the belongs it is song.build_artist</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Build a Song for that Artist</span>
</span><span class='line'>  <span class="c1"># build song Natural Woman</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Manually Create Artist Kanye West</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Push a Song Onto an Artist</span>
</span><span class='line'>  <span class="c1"># push a song onto Kanye West</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create Michael Jackson Artist</span>
</span><span class='line'>  <span class="c1"># Make 3 Michael Jackson Songs</span>
</span><span class='line'>  <span class="c1"># push all songs by Michael Jackson</span>
</span><span class='line'>  <span class="n">mike</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;MJ&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mike</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Delete one michael song off of michael</span>
</span><span class='line'>  <span class="c1"># Remove a Song from Artist</span>
</span><span class='line'>  <span class="n">mike</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">mike</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="c1"># this won&#39;t destroy the object, it will delete the association</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:clear_artists_and_songs</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:environment</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Deleting all Artists and Songs....&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Artist</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'>  <span class="no">Song</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day18]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/11/01/fis-day18/"/>
    <updated>2012-11-01T13:42:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/11/01/fis-day18</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<ul>
<li><p>Edsgar Dijkstra</p>

<ul>
<li>inventor of structured programming</li>
<li>came up with &#8220;for, while, until, case&#8221;</li>
<li>computer science is not about machines and equipment management</li>
</ul>
</li>
<li><p>If you use more of a bad tool, it won&#8217;t fix it.</p>

<blockquote><p>About the use of language; it is impossible to sharpen a pencil with a blunt axe. It is equally vain to try to do it with ten blunt axes instead.</p></blockquote></li>
<li><p>Programming is just about communicating clearly.</p></li>
<li>Once it is teachable it is concrete.</li>
</ul>


<h3>Ruby Tidbit</h3>

<figure class='code'><figcaption><span>Semi-Colon Deliminates a Line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'><span class="c1">#the semi-colon deliminates the info on two lines</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rails Lecture</h2>

<figure class='code'><figcaption><span>link to unless current</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">link_to_unless_current</span> <span class="o">%&gt;</span> <span class="c1">#this is slick for nav!</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Routes</strong></p>

<figure class='code'><figcaption><span>Routes File</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;/name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;songs#name&#39;</span>
</span><span class='line'><span class="c1">#not as specific and therefore as good as</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;songs#name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;site/about&#39;</span> <span class="c1">#rails will assume that site is the controller and about is the action</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Generate a Controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">controller</span> <span class="no">CreditCard</span> <span class="nb">open</span> <span class="n">debit</span> <span class="n">credit</span> <span class="n">close</span>
</span><span class='line'><span class="c1">#this will create a credit_card_controller with 4 actions</span>
</span></code></pre></td></tr></table></div></figure>


<p>??have to delete rm-rf public/index.html</p>

<figure class='code'><figcaption><span>Rendering Templates</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Sessions</span> <span class="no">Controller</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'><span class="n">render</span> <span class="ss">:action</span>
</span><span class='line'><span class="n">render</span> <span class="ss">:template</span>
</span><span class='line'><span class="c1">#in practice</span>
</span><span class='line'><span class="n">render</span> <span class="s1">&#39;under_construction&#39;</span> <span class="c1">#this is the action in the sessions controller</span>
</span><span class='line'><span class="n">render</span> <span class="s1">&#39;shared/under_construction&#39;</span> <span class="c1">#this is a full relative path</span>
</span><span class='line'><span class="c1">#and more instructional of where to find the template</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Private and public methods</h3>

<figure class='code'><figcaption><span>Private Method e.g.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bark</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">stomach_volume</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:very</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;woof woof!&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:not_at_all</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;woof&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span> <span class="c1">#it would also break if this was protected.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stomach_volume</span>
</span><span class='line'>    <span class="ss">:very</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">stomach_volume</span> <span class="c1">#this is not going to work.</span>
</span></code></pre></td></tr></table></div></figure>


<p>private, public, and protected all create keyword scope -> created limited, predicted interfaces</p>

<p>if a method is private it can only be called on an implicit receiver- can&#8217;t call call on an explicit receiver</p>

<p><strong>protected</strong> -> can only be called on self.</p>

<figure class='code'><figcaption><span>When Private Methods Become Useful in the Controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeController</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="n">under_construction</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="n">under_constructions</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">under_construction</span>
</span><span class='line'>  <span class="n">render</span> <span class="s1">&#39;shared/under_construction&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>In the migration</h3>

<ul>
<li>def change for when the reverse can be assumed</li>
<li><p>def up and down for things like renaming columns -> because rails wouldn&#8217;t be able to infer what the reverse would be.</p></li>
<li><p>t.timestamps - is a created at and updated at</p></li>
</ul>


<h3>Signups</h3>

<p>when you login, you are creating a session between you and the website.
when you signup you are creating a user on their system&#8211; that lives in their DB</p>

<figure class='code'><figcaption><span>Routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/signup&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#new&#39;</span>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;/signup&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#create&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Mass assignment => when you assign initialization properties during assingment.</strong></p>

<ul>
<li><p>Migrations</p>

<ul>
<li>define and edit schema</li>
</ul>
</li>
<li><p>Models -ORM</p>

<ul>
<li>insert rows /update</li>
<li>database</li>
</ul>
</li>
<li><p>Routes
maps URLs to actions in the controller</p></li>
<li><p>controllers</p>

<ul>
<li>contains the business logic</li>
</ul>
</li>
<li><p>views</p>

<ul>
<li>the actual interface</li>
</ul>
</li>
</ul>


<p>-> In sinatra the routes are built into controllers.</p>

<figure class='code'><figcaption><span>This must be how form_for works</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">form_for</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span> <span class="o">=</span> <span class="no">FormBuilder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span> <span class="n">f</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>In your controller helper&#8230;</em></p>

<figure class='code'><figcaption><span>Rolling My Own Form Builder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for(@song, :builder =</span> <span class="o">&gt;</span> <span class="no">SongHelper</span><span class="o">::</span><span class="no">SongForm</span><span class="p">)</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="c1">#in the controller helper</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">SongsHelper</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SongForm</span> <span class="o">&lt;</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">FormBuilder</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">full_name_field</span>
</span><span class='line'>      <span class="n">label</span><span class="p">(</span><span class="ss">:first_name</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">text_field</span> <span class="ss">:first_name</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">label</span><span class="p">(</span><span class="ss">:last_name</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">text_field</span> <span class="ss">:last_name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Customizing the forms and encapsulate in the controller helpers&#8230;</p>

<h3>Test::Unit to RSpec</h3>

<p>change out the libraries
add rspec to the gem file
rip out test folder</p>

<p>rails g install rspec</p>

<p><a href="http://stackoverflow.com/questions/9884033/ruby-on-rails-switch-from-test-unit-to-rspec">changing from minitest to rspec</a> <a href="http://stackoverflow.com/questions/5072662/how-to-remove-unit-test-and-replace-it-with-rspec">or</a></p>

<p>&#8220;when i generated the scaffold, it generated the specs for me&#8230;&#8221;</p>

<h3>Posting Info to an object</h3>

<ol>
<li>instantiate an instance</li>
<li>collect the form data</li>
<li>and you populate the instance attribute with the proper data</li>
</ol>


<p>If I want to use form_for I need an active record instance.</p>

<h3>Read this&#8230;</h3>

<p><a href="http://guides.rubyonrails.org/v2.3.11/form_helpers.html#understanding-parameter-naming-conventions">Understand parameter naming conventions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day17andahalf]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/31/fis-day17andahalf/"/>
    <updated>2012-10-31T18:40:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/31/fis-day17andahalf</id>
    <content type="html"><![CDATA[<h3><a href="http://www.rubygeocoder.com/">Geocoder</a></h3>

<p>This gem is amazing. I can calucalate the latitude and longitude of anywhere by an address and so much more. Not surprisingly there is a great <a href="http://railscasts.com/episodes/273-geocoder">railscast</a> on the subject.</p>

<ul>
<li>Ryan Bates also suggested that I look at <a href="https://github.com/apneadiving/Google-Maps-for-Rails">Google-Maps-for-Rails</a></li>
</ul>


<h3>Authentication</h3>

<p>I had broken the authentication system in my <a href="http://gearshare.herokuapp.com/">gearshare app</a>. <a href="http://railscasts.com/episodes/241-simple-omniauth">Ryan Bates</a> to the rescue once again.</p>

<h3>Sessions Issues</h3>

<p>I was having some trouble killing the session. Avi added this code in the sessions_controller.</p>

<figure class='code'><figcaption><span>In the sessions controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="n">reset_session</span> <span class="c1">#this was the key....</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;Signed out!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Git Rebase</h3>

<p>I also rebased a branch using the following command&#8230;</p>

<figure class='code'><figcaption><span>In the sessions controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">rebase</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<p>This rebased the up-to-date master underneath my branch that was ahead by a few commits, but had a broken authentication system. There is a complete explanation of this and more in the <a href="http://git-scm.com/book/en/Git-Branching-Rebasing">git book</a>.</p>

<h3>Stripe</h3>

<p>Met Richard who walked me through the <a href="https://stripe.com/">stripe</a> that makes payments silly easy. Very exciting to integrate this into the bounty open-source idea&#8230;</p>

<h3>Podcast</h3>

<p>I should start listening to this&#8230; Peter Cooper and Jason Seifer&#8211; it&#8217;s got to be pretty solid.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accepts Nested Attributes For]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/31/accepts-nested-attributes-for/"/>
    <updated>2012-10-31T16:14:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/31/accepts-nested-attributes-for</id>
    <content type="html"><![CDATA[<p>So accepts nested attributes is really about writing to an attribute of a class.</p>

<p>In my case a location belongs_to a user. I was then trying to set the location.street1 through the user, but it wouldn&#8217;t write. This is because it needs the accepts_nested_attributes method in the model.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Foolin with the Facebook API]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/30/foolin-with-the-facebook-api/"/>
    <updated>2012-10-30T17:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/30/foolin-with-the-facebook-api</id>
    <content type="html"><![CDATA[<p>Most of what I needed was <a href="https://github.com/arsduo/koala/wiki/Graph-API">here</a>. Facebook does a good job with the documentation overall. The missing piece of the puzzle is how to execute the FQL&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@graph = Koala::Facebook::API.new
</span><span class='line'>
</span><span class='line'>@graph.get_connections("me", "mutualfriends/#{friendsuid}")
</span><span class='line'>#=&gt; yields all our mutual friends
</span><span class='line'>
</span><span class='line'>#can also retrieve many objects at one time...
</span><span class='line'>@graph.get_objects([1007413,929972])</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m not quite sure how to best run the facebook query language(FQL)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT name,description,geometry,latitude,longitude,checkin_count,display_subtext FROM place WHERE page_id=110506962309835</span></code></pre></td></tr></table></div></figure>


<p>Above would give me a hash of all the attributes of Palo Alto, CA. Getting <a href="http://developers.facebook.com/docs/reference/fql/place/">place info via FQL</a> seems rather straight forward. Again, it&#8217;s the integration that I am struggling with.</p>

<p>Gathering a hash of friends&#8217; location wasn&#8217;t a killer, though it did take some trial and error&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>friends_location = get_connections("me", "friends", :fields =&gt; "name, id, location")</span></code></pre></td></tr></table></div></figure>


<p>So I can do much of this using a query string, but I&#8217;m not sure how that is quite done with an app. I need some help with this&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How the internet works]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/30/how-the-internet-works/"/>
    <updated>2012-10-30T11:42:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/30/how-the-internet-works</id>
    <content type="html"><![CDATA[<p>HTTP is all about applying verbs to nouns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Web Development with Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/30/agile-web-development-with-rails/"/>
    <updated>2012-10-30T10:33:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/30/agile-web-development-with-rails</id>
    <content type="html"><![CDATA[<ul>
<li>ORM libraries map database tables to classes, rows to objects, and columns to attributes of those objects.</li>
<li>Class methods are used to perform table-level operations</li>
<li>Instance methods are used to perform operations on individual rows.</li>
<li>Modules server two purposes

<ul>
<li>namespace: letting you define methods whose names will not clash with those defined elsewhere</li>
<li>And they allow you to share functionality between classes</li>
</ul>
</li>
<li>a ||= b</li>
</ul>


<figure class='code'><figcaption><span>a op= b is the same as a = a operation b</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">#same as</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">price</span> <span class="o">*=</span> <span class="n">discount</span>
</span><span class='line'><span class="c1">#same as</span>
</span><span class='line'><span class="n">price</span> <span class="o">=</span> <span class="n">price</span> <span class="o">*</span> <span class="n">discount</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">||=</span> <span class="mi">0</span>
</span><span class='line'><span class="c1">#same as</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">||</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lambda</li>
<li>numericality</li>
<li>catelog display is really just a glorified product listing.</li>
<li>everytime a request comes in, we can recover the identity from the session and use it to find the cart in the database</li>
<li>dependent: :destroy -> indicates that the existance of line items is dependent on the existance of the cart</li>
<li>if a table has foreign keys, the corresponding model should have a belongs_to for each.</li>
<li>the default HTTP method for a link is a get, the default HTTP method for a button is a post.</li>
<li>@cart.line_items.build -> this casuse a new line item relationship to be built between the @cart object and the product. You can build the relationship from either end.</li>
<li>Rails matches on is add_XXX_to_TABLE and remove_XXX_from_TABLE where the value XXX is ignored; what matters is the list of the column names and the types that appear after the migration name.</li>
<li>link_to_unless_current</li>
<li>if @person is just an empty object structure, form_form will work on the assunmption that this is to creat a new object. If @person actually contains data, however, form_for will assume that its form is editing that object and create a different looking form element, a hidden field to enable Rails&#8217; REST capabilities.</li>
<li>helpers are simply modules containing methods that assist a view.</li>
<li>link_to and link_to_if take a condition parameter</li>
<li>a flash is a bucket (acutally closer to a hash) in which you can store stuf as you process a request.</li>
<li>you can pass parameters to a partial, so that the partial can render different results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Dispatching &amp; Send]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/29/dynamic-dispatching-and-send/"/>
    <updated>2012-10-29T15:32:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/29/dynamic-dispatching-and-send</id>
    <content type="html"><![CDATA[<p>Given a file with&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin : Bill
</span><span class='line'>title : Rubyland
</span><span class='line'>topic : Ruby and more</span></code></pre></td></tr></table></div></figure>


<p>You could build a method that maps the keys and values with dynamic dispatching&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Load configuration if any</span>
</span><span class='line'><span class="k">if</span> <span class="n">conf</span><span class="o">.</span><span class="n">rc</span> <span class="ow">and</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span> <span class="n">conf</span><span class="o">.</span><span class="n">rc</span> <span class="p">)</span>
</span><span class='line'>  <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">rc</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">conf</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="c1">#the beauty of dynamic dispatching in motion</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(this e.g. is from page 68 of the Prag Programmer&#8217;s Metapramming Book)</p>

<figure class='code'><figcaption><span>This code needs to be much more DRY</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mouse</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_mouse_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Mouse: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cpu</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_cpu_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Cpu: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyboard</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_info</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">get_keyboard_price</span><span class="p">(</span><span class="vi">@id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;Keyboard: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is much cleaner</p>

<figure class='code'><figcaption><span>Refactored with simple interpolation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Computer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">computer_id</span><span class="p">,</span> <span class="n">data_source</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@id</span> <span class="o">=</span> <span class="n">computer_id</span>
</span><span class='line'>    <span class="vi">@data_source</span> <span class="o">=</span> <span class="n">data_source</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_component</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">info</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_info&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">price</span> <span class="o">=</span> <span class="vi">@data_source</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;get_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">_price&quot;</span><span class="p">,</span> <span class="vi">@id</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">info</span><span class="si">}</span><span class="s2"> ($</span><span class="si">#{</span><span class="n">price</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;* </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">price</span> <span class="o">&gt;=</span> <span class="mi">100</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:mouse</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:cpu</span>
</span><span class='line'>  <span class="n">define_component</span> <span class="ss">:keyboard</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Namespacing]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/29/namespacing/"/>
    <updated>2012-10-29T15:16:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/29/namespacing</id>
    <content type="html"><![CDATA[<p>Say my friend has a sister named Sue, and so do I. How can I tell them apart in a conversation? By using their last name. The last name is the namespace.</p>

<p>Modules define a namespace, a sandbox in which your methods and constants can play without having to worry about being stepped on by other methods and constants.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="no">Species</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Poodle&quot;</span><span class="o">]</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dog::Species => Species is a Constant within the Dog class. Species could be a class it could be a module, but it is a child of Dog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ternary Operator]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/29/ternary-operator/"/>
    <updated>2012-10-29T14:21:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/29/ternary-operator</id>
    <content type="html"><![CDATA[<p>Ternary operators are simply a short form of an if-else statement in one line.</p>

<p>The following sample will print “The variable is 10″ if var is equal to 10. Otherwise it will print “The variable is Not 10″.</p>

<figure class='code'><figcaption><span>An example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">print</span> <span class="err">“</span><span class="no">The</span> <span class="n">variable</span> <span class="n">is</span> <span class="err">”</span> <span class="o">+</span> <span class="p">(</span><span class="n">var</span> <span class="o">==</span> <span class="mi">10</span> <span class="o">?</span> <span class="err">“</span><span class="mi">10</span><span class="err">″</span> <span class="p">:</span> <span class="err">“</span><span class="no">Not</span> <span class="mi">10</span><span class="err">″</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby evaluates the expression to the left of the question mark. If that expression is true then it returns the expression between the question mark and the colon, if the expression is false, it returns what comes after the colon.</p>

<figure class='code'><figcaption><span>Ternary Operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'><span class="c1"># will output teenager  </span>
</span><span class='line'><span class="nb">puts</span> <span class="p">(</span><span class="mi">13</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">19</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">age</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;teenager&quot;</span> <span class="p">:</span> <span class="s2">&quot;not a teenager&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#can also do assignment</span>
</span><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">23</span>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="p">(</span><span class="mi">13</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">19</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">age</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;teenager&quot;</span> <span class="p">:</span> <span class="s2">&quot;not a teenager&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">person</span> <span class="c1"># =&gt; &quot;not a teenager&quot; </span>
</span></code></pre></td></tr></table></div></figure>


<p>The part before the question mark is the &#8220;if condition&#8221;. the part behind it is the code to be run if the condition matches. the &#8220;:&#8221; respresents &#8220;else&#8221;, and the code behind it the code to be run if the condition does not maztch.</p>

<figure class='code'><figcaption><span>Ternary Operator in the view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Name</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">&lt;% if @user.name %&gt;</span>
</span><span class='line'><span class="sr">&lt;%= @user.name %&gt;</span>
</span><span class='line'><span class="sr">&lt;% else %&gt;</span>
</span><span class='line'><span class="sr">&lt;em&gt;[no name set]&lt;/em</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">#can be refactored as</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;h3&gt;</span><span class="no">Name</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">&lt;%= @user.name ? @user.name : &quot;&lt;em&gt;[no name set]&lt;/em</span><span class="o">&gt;</span><span class="s2">&quot; %&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storm Weekend]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/29/storm-weekend/"/>
    <updated>2012-10-29T09:25:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/29/storm-weekend</id>
    <content type="html"><![CDATA[<p>change the hotkeys in terminal to switch through the windows like sublime.</p>

<p>How the web works: HTTP and CGI explained
- cgi vs. api?</p>

<ul>
<li><p>Learn to Program 3</p>

<ul>
<li>Required * in the builder label in the f.label and then use validation or create a new tag?</li>
<li>:builder argument in form_form</li>
<li>&lt;% for award in student award %></li>
<li>@student.awards.build(params[:id]), diff pattern of new?</li>
<li>unprocessessbile_entity</li>
<li>options_from_collection_for_select helper method</li>
<li>how do migrations work with a shared repo&#8230; lots of people pushing up. If you run rake db:migrate it can&#8217;t run other&#8217;s unapplied migrations. How is this handled?</li>
<li>in migrations, need to specify different types (like decimal) according to the DB- postgres vs. mysql. Or b/c it is database agnostic, the migration takes care of it?</li>
<li>unique at the model level or the migration level?</li>
<li>rails console &#8211;sandbox? exist? ever use this or just irb?</li>
<li>testing nested resources? using functional tests (for controllers)?</li>
<li>use of cookies not having to do with session?

<ul>
<li>javascript can reach directly into a cookie?</li>
<li>standard lifetime to set for a cookie? privacy vs. functionality?</li>
</ul>
</li>
<li>&lt;%=h  %> what tag is that with the h in it?</li>
<li>CookieStore (rails default &#8211; all the info goes in the session object) vs ActiveRecord SessionStore (just the identifier and the rest in the DB)</li>
<li><p>when would you use url_for?</p></li>
<li><p>SQL injection</p></li>
<li>HTML safe is needed in what context? related to cross-site scripting. Why not use in every tag? rails 3 does this automatically?</li>
<li>cross-site forgery- if a user remains logged in, CSRF allows someone from another site to use a POST request to gain access? How? authenticity token is the solution to authenticate that the request actually came from the proper client.<a href="http://guides.rubyonrails.org/action_controller_overview.html#request-forgery-protection">see</a></li>
<li>mongrel?</li>
<li>*=require_tree -> what is this? when to remove it like for SASS?</li>
<li>whiny_nils</li>
<li>rails enterprise, ruby enterprise</li>
<li>is sanitize necessary any longer? examples?</li>
</ul>
</li>
<li><p>Notes:</p>

<ul>
<li>belongs_to and has_many are method names that take parameters
:dependent => :destroy prevents orphaned data and reinforces referential integrity</li>
<li>nesting a resouce is akin to making it subordinate</li>
<li>@course.students could return all the student objects enrolled in that course. With a many to many relationship attributes like @student.name and @student.gpa would also be accessible.</li>
<li>rake db:reset -> just resets to the last structure applied. Won&#8217;t drop it like db:drop</li>
<li>add :index vs. t.reference?</li>
<li>rake test -> for running fixtures</li>
<li>unit testing is really model testing</li>
<li>rake test:units -> runs just the unit tests</li>
<li>flash notices are stored in a session object and only survive one redirect (or reloads) since they are stateless</li>
<li>dom_id helper lets you put identifiers into HTML documents.</li>
<li>before_filter :check_login -> creating a check_login method is the standard way to work on authorization after you have created authentication</li>
<li>rake routes | grep root is an easy way to get the route you are looking for.</li>
<li><a href="http://guides.rubyonrails.org/routing.html#route-globbing">globbing</a> route extensions using an asterisk.</li>
<li>Sprockets started shipping with Rails 3.1 for compiling and serving web assets like javascript and css files.</li>
<li>gem &#8216;gemname&#8217;, &#8216;~> 2.11.12&#8217; &#8211;> only update the last number in the version number</li>
<li>gem &#8216;gemname&#8217;, &#8216;>= 2.11.12&#8217; &#8211;> only load 2.11.12 or higher</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>Gem File for dev vs. production</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;nifty-generators&#39;</span> <span class="s1">&#39;~&gt; 0.4.6&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;somethingineedforproduction&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Nested Routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:students</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:awards</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#7 RESTful routes, but now they shift to student_award and new_student_award</span>
</span><span class='line'><span class="c1">#could create other nested routes like</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:students</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:awards</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:pets</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Resources should never be nested more than 1 level deep.</em> <a href="http://guides.rubyonrails.org/routing.html#nested-resources">see the guides for more on nested routes</a></p>

<figure class='code'><figcaption><span>HTTP Verb Constraints</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;photos/show&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;photos#show&#39;</span><span class="p">,</span> <span class="ss">:via</span> <span class="o">=&gt;</span> <span class="ss">:get</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://guides.rubyonrails.org/routing.html#http-verb-constraints">see</a>
Sassy CSS
$ is for variable names
&amp; is for nesting</p>

<figure class='code'><figcaption><span>HTTP Verb Constraints</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="p">{</span>
</span><span class='line'><span class="n">color</span><span class="p">:</span> <span class="c1">#0b90834</span>
</span><span class='line'><span class="c1">#other stuff</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&amp;.</span><span class="n">show</span> <span class="p">{</span>
</span><span class='line'><span class="n">color</span> <span class="p">:</span> <span class="c1">#DB4327</span>
</span><span class='line'><span class="c1">#the ampersand means that it is nested in the above class</span>
</span></code></pre></td></tr></table></div></figure>


<p>MIT Lecture:
layer the level of abstraction ~> like Ohm&#8217;s Law</p>

<p><a href="http://www.garshol.priv.no/download/text/http-tut.html">How the web works</a>- reading:</p>

<blockquote><p>Uniform Resource Indicator (URIs) embodies both URLs and URNs
Uniform Resource Locator (URLs)- is what you think it is.
Uniform Resource Names (URNs)- similar in concept but don&#8217;t have to occur over a network. (e.g. ISBN numbers are URNs)</p></blockquote>

<ul>
<li>A web server is a just a computer program that listens for requests from browsers and then execute them.</li>
<li>HTTP only defines what the browser and web server say to each other, not how they communicate. The actual work of moving bits and bytes back and forth across the network is done by TCP and IP,</li>
<li>Most URLs have this basic form: &#8220;protocol://server/request-URI&#8221;</li>
<li>This request string is all the server ever sees. So the server doesn&#8217;t care if the request came from a browser, a link checker, a validator, a search engine robot or if you typed it in manually. It just performs the request and returns the result.</li>
<li>to the browser, the server works as a black box. Ie: the browser requests a specific document and the document is either returned or an error message is returned.</li>
<li>This means that the server can read it from a file, run a program that generates it, compile it by parsing some kind of command file or (very unlikely, but in principle possible) have it dictated by the server administrator via speech recognition software. This gives the server administrator great freedom to experiment with different kinds of services as the users don&#8217;t care (or even know) how pages are produced.</li>
<li>can use <a href="http://en.wikipedia.org/wiki/Telnet">telnet</a> to write HTTP requests directly to web servers.</li>
<li>Status Codes

<ul>
<li>1xx: Informational</li>
<li>2xx: Successful</li>
<li>3xx: Redirection</li>
<li>4xx: Client Error</li>
<li>5xx: Server Error</li>
</ul>
</li>
<li>Proxy cache

<ul>
<li>Browsers still have their local caches, but HTTP requests for documents not in the browser cache rather than being sent to the server are to the proxy cache. If the proxy has the document in its cache it will just return the document (like the browser cache would), and if it doesn&#8217;t it will submit the request on behalf of the browser, store the result and relay it to the browser.</li>
</ul>
</li>
<li>CGI (Common Gateway Interface) is a way for web servers and server-side programs to interact.

<ul>
<li>CGI is completely independent of programming language, operating system and web server. Currently it is the most common server-side programming technique and it&#8217;s also supported by almost every web server in existence. Moreover, all servers implement it in (nearly) the same way, so that you can make a CGI script for one server and then distribute it to be run on any web server.</li>
<li>A web server that supports CGI can be configured to interpret a URL that it serves as a reference to a CGI script. A common convention is to have a cgi-bin/ directory at the base of the directory tree and treat all executable files within it as CGI scripts.</li>
</ul>
</li>
<li><p>can submit a form with a GET request and a query string rather than just POST request</p>

<ul>
<li>If the data can be long (more than 256 characters) it is a bit risky to use GET as the URL can end up being snipped in transit.</li>
</ul>
</li>
<li><p><a href="http://www.youtube.com/watch?v=mBXGBbEbXZY">Symbol video</a> with Peter Cooper</p>

<ul>
<li>&#8220;If the textual context is important, use a string.&#8221;</li>
<li>&#8220;If the identity of the object is important use a symbol.&#8221; - Jim Weirich</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;gender&quot;</span><span class="o">.</span><span class="n">intern</span> <span class="c1">#=&gt; :gender</span>
</span><span class='line'><span class="sx">%s{gender}</span> <span class="c1">#=&gt; :gender</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:upcase</span><span class="p">)</span> <span class="c1">#=&gt; symbol to proc</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>way to <a href="http://gembundler.com/gemfile.html">call a gem in your gemfile</a></li>
</ul>


<h3>Guides Reading:</h3>

<ul>
<li><a href="http://guides.rubyonrails.org/action_controller_overview.html#http-authentications">Basic HTTP authenticationn</a></li>
<li><a href="http://guides.rubyonrails.org/routing.html#inspecting-and-testing-routes">testing routes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day17]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17/"/>
    <updated>2012-10-26T09:37:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Roy Fielding</p>

<p>HTTP- it&#8217;s all about representations of data, not the data itself</p>

<p>urls are to represent a resouce. They should be stateless and you should get multiple representations of it (different data types for example).</p>

<p><a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a> is &#8220;like knocking on your neighbors&#8217; door and ask them to send a message to a guy down the street.&#8221;</p>

<h3>Blogs</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span> <span class="c1">#=&gt; you want to return an empty array so that you can run an iteration on it.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_artist</span><span class="p">(</span><span class="n">artist_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">artist_name</span><span class="p">}</span>
</span><span class='line'>  <span class="k">if</span>  <span class="n">artist</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">artist</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="no">Artist</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">artist_name</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#can be refactored as</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">assign_artist</span><span class="p">(</span><span class="n">artist_name</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Artist</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">artist_name</span><span class="p">}</span> <span class="o">||</span>
</span><span class='line'>  <span class="no">Artist</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">artist_name</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Spinning Up My First Server</h2>

<p>??swap disk space</p>

<ul>
<li><p><strong>Passenger</strong> knows how to run your app, <strong>nginx</strong> does not</p>

<ul>
<li>nginx sends your request to a Passenger instance

<ul>
<li>nginx is managing the load to Passenger</li>
<li>Passenger is actually running the application ~> managing starting up your app and serving it

<ul>
<li>it could run up to 20 instances of the app on a single server (the default is 5)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>nginx</strong> is the actual webserver. It&#8217;s a piece of software that speaks HTTP, is very high performance and sits between your application and the internet.</p></li>
<li><p>The tutorial is very detailed</p>

<ul>
<li>Not on the tutorial- <a href="https://help.github.com/articles/generating-ssh-keys">adding the SSH key from the server</a></li>
</ul>
</li>
</ul>


<h3>Lessons Learned From the Server Work</h3>

<ul>
<li>Problem: So I couldn&#8217;t deploy for hours&#8230; I went and reconfigured like 3 times. Renamed the name of the application and going through the nginx config file on the server. It sucked.</li>
<li>Answer: I had my database in my .gitignore file, which meant that it was in the deploy from the github. AHHHH!!! I never would have gotten that one.</li>
</ul>


<h2>Ruby</h2>

<ul>
<li><p>Opposites</p>

<ul>
<li>Enumerable#reject

<ul>
<li>Returns an array for all elements of enum for which block is false (see alsoEnumerable#find_all).</li>
</ul>
</li>
<li>Enumerable#select

<ul>
<li>Returns an array containing all elements of enum for which block is not false (see alsoEnumerable#reject).</li>
</ul>
</li>
</ul>
</li>
<li><p>Equivalent, different order for pipes</p>

<ul>
<li>Enumerable#each_with_object

<ul>
<li>Iterates the given block for each element with an arbitrary object given, and returns the initially given object.

<ul>
<li>[1, 2, 3, 4].each_with_object([]) { |element, result| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Enumerable#inject</p>

<ul>
<li>Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.

<ul>
<li>[1, 2, 3, 4].inject([]) { |result, element| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Rails</h3>

<ul>
<li>link_to is a great example of a polymorphic interface

<ul>
<li>if it receives an object (an instance of active record), it can create the correct link</li>
<li>if it receives a string it can create the correct link out of that</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>Routes Shortcuts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/about/:action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;about&#39;</span> <span class="c1"># the action would map directly to the action in the about controller</span>
</span><span class='line'><span class="c1">#this is dangerous but only on the controller level so it would need to be controlled for there...</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/about/:action(/:company)&#39;</span> <span class="c1"># this means that the company part of the url is optional</span>
</span><span class='line'>  <span class="ss">:company</span> <span class="o">=&gt;</span> <span class="s2">&quot;whatever&quot;</span> <span class="c1"># this additional means that &quot;whatever&quot; will be default value</span>
</span></code></pre></td></tr></table></div></figure>


<p>urls that have parameters in them like songs/:genre ~> you need to pass a paramter so that it can match it ~> songs/:genre/:year needs two parameters</p>

<figure class='code'><figcaption><span>In the view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% link_to </span><span class="s1">&#39;Avi&#39;</span><span class="p">,</span> <span class="n">avi_path</span><span class="p">(</span><span class="s2">&quot;flombaum&quot;</span><span class="p">,</span> <span class="s2">&quot;flatiron&quot;</span><span class="p">,</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="s2">&quot;baz&quot;</span><span class="p">)</span> <span class="o">%&gt;</span> <span class="c1">#will add parameter</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Mass Assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;call me maybe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#intialize the song with this default attribute</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day16]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16/"/>
    <updated>2012-10-25T09:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Linus Torvalds</p>

<h2>Rails</h2>

<p>rails assigns attr_accessors</p>

<figure class='code'><figcaption><span>Active Record Queries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">song</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">last</span> <span class="c1">#=&gt; this is the second to last song</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find_by_name</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find_by_anyattrributename</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find_all_by_name</span> <span class="c1">#=&gt; sweet</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ORM ~> Object Relational Mapping</h3>

<ul>
<li><strong>A ruby class is to a databse table as instances of that class are to a row in that table</strong>

<ul>
<li>the form field should map to the column name</li>
</ul>
</li>
<li>activerecord&#8217;s exists to accomplish CRUD</li>
<li>active record pattern <a href="http://books.google.com/books?id=FyWZt5DdvFkC&amp;lpg=PA1&amp;dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&amp;pg=PT187#v=onepage&amp;q=active%20record&amp;f=false">proposed by Martin Fowler</a></li>
</ul>


<figure class='code'><figcaption><span>Persistence</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">persisted?</span> <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">new_record?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">persisted?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">new_record?</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>ORM Awareness</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">changed?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">changes</span> <span class="c1">#=&gt; {&quot;name=&gt; [&quot;whatever&quot;, &quot;new&quot;]}</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">name_changed?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">duration_changed</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">song</span><span class="o">.</span><span class="n">destroy</span> <span class="c1">#=&gt; will destroy the record</span>
</span><span class='line'><span class="n">song</span><span class="o">.</span><span class="n">delete</span> <span class="c1">#=&gt; don&#39;t use this for now</span>
</span></code></pre></td></tr></table></div></figure>


<h3>REST</h3>

<p>Identification of a resource
Individual resources that are identified in the requests, for example using the URIs sin web-based REST systems.</p>

<p>REST- the url address should mirror the http verb and url action</p>

<ul>
<li><em>What do you mean by a representation?</em></li>
<li>these objects have different representations depending on their name</li>
<li>.xml should return the xml and .json and return the json</li>
<li>the objects should be devoid of your form until you ask for them</li>
</ul>


<h3>Routes</h3>

<figure class='code'><figcaption><span>Routes File syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/welcome&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application#welcome&#39;</span>
</span><span class='line'><span class="c1"># same as ApplcationController.welcome</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="n">controller</span> <span class="o">=&gt;</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;welcome&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:songs</span> <span class="c1">#is a macro that is calling 7 methods for you</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>the routes file are evaluated with lazy evaluation. Which allows you to put the most specific patterns on top and let them trickle down&#8230;</li>
<li>7 restful routes: get, create, update, delete, show, etc.</li>
<li><p><em>url endpoint</em>- the very last thing that is executed after a url request- the last application run is the action in the controller</p></li>
<li><p><strong>URL request cascade through a rails app:</strong></p>

<ol>
<li>web server gets request</li>
<li>send it through the rack</li>
<li>last stop, routes file</li>
<li>match a  route</li>
<li>request = SongContoller.new</li>
<li>response = request.index</li>
</ol>
</li>
</ul>


<p>Rails was the first to have implicit rendering&#8230;</p>

<figure class='code'><figcaption><span>Implicit Rendering</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@index</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#this will implicitly render the index page</span>
</span><span class='line'><span class="c1">#could also add ~&gt; render &#39;artist/index&#39; &lt;~ which will over-write the implicitly render</span>
</span><span class='line'><span class="c1">#&#39;artist/index&#39; is a method called on self</span>
</span></code></pre></td></tr></table></div></figure>


<p>class variable can inherit down the inheritance tree
a class instance var is private to the class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@songs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@genres</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Artist</span><span class="o">.</span><span class="n">all</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span><span class="sc">??</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>VPS- Virtual Private server</p>

<p>Linux distribution - ubuntu
server - nginx
unicorn
DB- postgres</p>

<h3>Visualization</h3>

<ul>
<li>how does a partition actually work?

<ul>
<li>2 cores or 4 cores?? i don&#8217;t know what a core is.</li>
</ul>
</li>
<li>hardware usually out-paces software

<ul>
<li>we have had <em>multi-core processors</em> before we had software to take advantage of it.</li>
</ul>
</li>
<li><p>vocab:</p>

<ul>
<li>slice, a box, a vps, are pretty much synonymous</li>
</ul>
</li>
<li><p>dediserve is the server we are using</p></li>
<li>RAM has fast access.</li>
<li><a href="http://vimeo.com/15882917">capistrano</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ssh</span> <span class="n">root</span><span class="err">@</span><span class="mi">96</span><span class="o">.</span><span class="mi">8</span><span class="n">ipaddress</span>
</span><span class='line'><span class="c1">#will get an error saying that you can&#39;t connect</span>
</span><span class='line'><span class="c1">#say yes</span>
</span><span class='line'><span class="c1">#next insert your password: </span>
</span><span class='line'>
</span><span class='line'><span class="c1">#create a new user instead of root</span>
</span><span class='line'><span class="n">useradd</span> <span class="c1">#to get access to instructons</span>
</span><span class='line'><span class="n">man</span> <span class="n">useradd</span>
</span><span class='line'><span class="n">useradd</span> <span class="o">-</span><span class="n">m</span> <span class="o">-</span><span class="n">s</span> <span class="sr">/bin/</span><span class="n">bash</span> <span class="o">-</span><span class="n">G</span> <span class="n">sudo</span> <span class="n">ajonas</span>
</span><span class='line'><span class="c1">#sudo says anyone in sudo group can use sudo adam</span>
</span><span class='line'><span class="c1">#userdel will delete a user</span>
</span><span class='line'>
</span><span class='line'><span class="n">passwd</span> <span class="n">ajonas</span>
</span><span class='line'><span class="c1">#enter password:</span>
</span><span class='line'><span class="n">ssh</span> <span class="n">root</span><span class="err">@</span><span class="mi">96</span><span class="o">.</span><span class="mi">8</span><span class="n">ipaddress</span> <span class="n">will</span> <span class="n">get</span> <span class="n">you</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span> <span class="c1">#for updating indexes and downloading packages, like homebrew</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span>
</span><span class='line'><span class="n">build</span><span class="o">-</span><span class="n">apt</span><span class="o">-</span><span class="n">install</span> <span class="n">build</span><span class="o">-</span><span class="n">essential</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#install your packages with apt-get</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Capistrano</h3>

<ul>
<li>handles your <a href="http://en.wikipedia.org/wiki/Release_management">release management</a> throw the entire code base on your server every time you deploy. Copy code off of Github or server and apply it. This will maintain revisions, roll back easily, compile the CSS in your assets. It can&#8217;t happen manually.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cap</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>will do this for you. It&#8217;s script-able and automatic.</p>

<ul>
<li>This is run locally.</li>
<li>cap is what you use to interact with capistrano from the outside (like rails new from outside a rails project)</li>
<li>capify is how you interact with the gem (like rails generate inside the project folder)</li>
</ul>


<h3>Web Servers</h3>

<ul>
<li>apache was the market leader for best of breed of web server</li>
<li><p>ngenx - can handle lots of requests and tries to stay really small</p>

<ul>
<li>has much smaller memory footprint</li>
<li>has some features that are better suited for rails</li>
<li>ngenx is also a really good load balancer</li>
<li>config file is much easier to understand than ngenx</li>
</ul>
</li>
<li><p>Four functions in the config/deploy.rb DSL</p>

<ul>
<li>set: capistrano variables</li>
<li>role:</li>
</ul>
</li>
</ul>


<h3>Further reading</h3>

<ul>
<li>backups</li>
<li>log rotations - when your log gets too big, it is going to zip it up and send it to some long term storage. The first thing hackers will do is go through the logs.</li>
</ul>


<h3>Reading in prep:</h3>

<ul>
<li>Capistrano reads its instructions from a capfile.</li>
<li>many server clusters are hidden behind NATs (Network address translation) and firewalls, to prevent direct access.

<ul>
<li>NATs - the process of modifying IP address information in IP packet headers while in transit across a traffic routing device.</li>
</ul>
</li>
<li>Tasks are the foundation of a Capistrano setup; collections of tasks are typically called Recipes.</li>
<li><p>Daemons are special system applications which typically execute continuously in the background and await requests for the functions they provide from other applications.</p></li>
<li><p><em>From lowest to highest, the layers of the internet protocol suite are:</em></p></li>
<li>The link layer (commonly Ethernet) contains communication technologies for a local network.</li>
<li>The internet layer (IP) connects local networks, thus establishing internetworking.</li>
<li>The transport layer (TCP) handles host-to-host communication.</li>
<li><p>The application layer (for example HTTP) contains all protocols for specific data communications services on a process-to-process level (for example how a web browser communicates with a web server).</p></li>
<li><p>Stateless firewalls require less memory, and can be faster for simple filters that require less time to filter than to look up a session.</p></li>
<li><p>Modern firewalls can filter traffic based on many packet attributes like source IP address, source port, destination IP address or port, destination service like WWW or FTP.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Motion]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/ruby-motion/"/>
    <updated>2012-10-24T19:16:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/ruby-motion</id>
    <content type="html"><![CDATA[<p>ios simulator app
git repo: malkomalko/tweets-i-love</p>

<ul>
<li><p>File structure:</p>

<ul>
<li>controller</li>
<li>extensions</li>
<li>models</li>
<li>styles</li>
<li>views</li>
<li>build</li>
<li>resources</li>
<li>spec</li>
<li>tasks</li>
<li>vendor</li>
<li>Gemfile</li>
</ul>
</li>
<li><p>Use Xcode for storyboards</p></li>
</ul>


<p><a href="https://github.com/CocoaPods/CocoaPods">Cocoapods</a></p>

<p>more or less -> every screen of data is bound to a view controller</p>

<p>??delegates ~> look it up</p>

<p><a href="http://iconoclastlabs.com/cms/blog/posts/starting-with-rubymotion-delegates-and-messages">read</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@collection = [*"a".."z"] ~&gt; explode a range in the view</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Questions]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/interview-questions/"/>
    <updated>2012-10-24T15:47:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/interview-questions</id>
    <content type="html"><![CDATA[<p><a href="http://codegolf.com/tower-of-hanoi">Towers of Hanoi</a></p>

<p><a href="http://en.literateprograms.org/Fibonacci_numbers_(Ruby">Fibonacci Sequence</a>) <a href="http://vimeo.com/45768714">(Fib in video)</a></p>

<p><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions">front-end interview questions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniTest::Spec]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/minitest-spec/"/>
    <updated>2012-10-24T13:30:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/minitest-spec</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>MiniTest Spec Matchers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be</span><span class="p">(</span><span class="n">operator</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">-</span> <span class="k">for</span> <span class="n">example</span><span class="p">,</span> <span class="mi">10</span><span class="o">.</span><span class="n">must_be</span> <span class="p">:</span><span class="o">&lt;</span> <span class="p">,</span> <span class="mi">11</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_close_to</span> <span class="o">-</span> <span class="n">the</span> <span class="n">equivalent</span> <span class="n">of</span> <span class="n">assert_in_delta</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_empty</span> <span class="o">-</span> <span class="no">Fails</span> <span class="k">unless</span> <span class="n">obj</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_instance_of</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span> <span class="o">-</span> <span class="no">Fails</span> <span class="k">unless</span> <span class="n">obj</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="n">klass</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_kind_of</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span> <span class="o">-</span> <span class="no">Fails</span> <span class="k">unless</span> <span class="n">obj</span> <span class="n">is</span> <span class="n">of</span> <span class="k">class</span> <span class="n">klass</span> <span class="ow">or</span> <span class="n">klass</span> <span class="n">is</span> <span class="n">one</span> <span class="n">of</span> <span class="n">its</span> <span class="n">superclasses</span><span class="o">.</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_nil</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_same_as</span> <span class="o">-</span> <span class="n">tests</span> <span class="k">for</span> <span class="kp">true</span> <span class="n">object</span> <span class="n">equality</span>
</span><span class='line'><span class="nb">lambda</span> <span class="p">{}</span><span class="o">.</span><span class="n">must_be_silent</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_within_delta</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_within_epsilon</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_equal</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="o">-</span> <span class="no">Does</span> <span class="n">a</span> <span class="o">==</span><span class="sr">/eql? comparison between two objects.</span>
</span><span class='line'><span class="sr">obj.must_include(other)</span>
</span><span class='line'><span class="sr">obj.must_match(regex) - A regular expression match, e.g. &quot;hello&quot;.must_match /</span><span class="n">w</span><span class="o">+/</span>
</span><span class='line'><span class="nb">lambda</span> <span class="p">{}</span><span class="o">.</span><span class="n">must_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="o">[</span><span class="n">stderr</span><span class="o">.</span><span class="n">.</span><span class="o">]</span><span class="p">)</span> <span class="o">-</span> <span class="no">The</span> <span class="n">block</span> <span class="n">should</span> <span class="n">have</span> <span class="n">certain</span> <span class="n">output</span> <span class="n">on</span> <span class="n">stdout</span> <span class="ow">or</span> <span class="n">stderr</span><span class="o">.</span> <span class="no">Set</span> <span class="n">stdout</span> <span class="n">to</span> <span class="kp">nil</span> <span class="n">just</span> <span class="n">to</span> <span class="n">check</span> <span class="n">stderr</span><span class="o">.</span>
</span><span class='line'><span class="nb">lambda</span> <span class="p">{}</span><span class="o">.</span><span class="n">must_raise</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_respond_to</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_throw</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Negative Matchers too</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wont_be</span>
</span><span class='line'><span class="n">wont_be_empty</span>
</span><span class='line'><span class="n">wont_be_instance_of</span>
</span><span class='line'><span class="n">wont_be_kind_of</span>
</span><span class='line'><span class="n">wont_be_nil</span>
</span><span class='line'><span class="n">wont_be_same_as</span>
</span><span class='line'><span class="n">wont_equal</span>
</span><span class='line'><span class="n">wont_include</span>
</span><span class='line'><span class="n">wont_match</span>
</span><span class='line'><span class="n">wont_respond_to</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driven Development]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/test-driven-development/"/>
    <updated>2012-10-24T13:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/test-driven-development</id>
    <content type="html"><![CDATA[<p>??browser testing? this falls under acceptance tests?</p>

<p><em>Difference between mock, stub, and fixture?</em> They are all a mechanisms to decouple data from the database. If your DB is down, you couldn&#8217;t run your test suite.</p>

<p><em>Fixtures and factories</em> sort of relate to each other so that you don&#8217;t have to instantiate a bunch of objects. <em>Fixtures-</em> are stable data to be used in the test environment. Fixtures are written in YAML.</p>

<p><em>mocks and stubs</em>: connect to the FB api, but you don&#8217;t need to, so you create something that responses with canned data like it is the facebook api.</p>

<p>why does a spec folder hold the tests? This outlines the specifications?
  - A specification is an explicit set of requirements to be satisfied by a material, product, or service.</p>

<p>??ping ponging - if someone writes a test and the other passes it are you switching off every 5 minutes</p>

<p><a href="http://railscasts.com/episodes/275-how-i-test">&#8220;How I test&#8221; with Ryan Bates</a></p>

<p>only open the browser when you need to focus on UI. Otherwise use tests.</p>

<p><a href="https://github.com/jnicklas/capybara">capybara</a> to simulate the user
factory-girl instead of fixtures -> where you store your factories
guard</p>

<p>integeration_test</p>

<figure class='code'><figcaption><span>Capybara DSL Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">visit</span> <span class="n">login_path</span>
</span><span class='line'>    <span class="n">click_link</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s2">&quot;Reset Password&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.skorks.com/2010/01/thoughts-on-tdd-a-case-study-with-ruby-and-rspec/">Good article on the process of testing</a></p>

<h2>Steven Nunez</h2>

<p>@_StevenNunez
conway&#8217;s game of life</p>

<p>Testing is: the act of isolating parts of your code with a known state to ensure it works as expected</p>

<p>Acceptance testing, integration and tests: cucumber, capybara, webrat</p>

<p>unit tests - take a class, take tests and make objects</p>

<h3>Why test?</h3>

<ul>
<li>want to know when things break</li>
<li>allows for courageous refactoring</li>
<li>gives documentation on how your code is SUPPOSED to work. Learn to expect tests.</li>
<li>It is your duty to deliver working code. Verification.</li>
</ul>


<h3>Testing sounds like an extra step&#8230;</h3>

<ul>
<li>Forces you to think small</li>
<li>Less thoughts to juggle</li>
<li>Leads to modular code</li>
<li>write less code</li>
<li>increase documentation: see what the intention was</li>
<li>small victories: always chasing green</li>
</ul>


<h3>RSpec</h3>

<ul>
<li>RSpec provides something called subject

<ul>
<li>subject = Class.new</li>
</ul>
</li>
</ul>


<h3>Write the code you wish you had</h3>

<ul>
<li>test with none, test with 1, test with some</li>
<li>can write a pending test by just writing it blocks</li>
</ul>


<p>BDD is more route => controller => model
TDD is more model => controller => route</p>

<p>practical object oriented design by <a href="http://www.poodr.info">sandi metz</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day15]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/fis-day15/"/>
    <updated>2012-10-24T09:41:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/fis-day15</id>
    <content type="html"><![CDATA[<p>Refactoring ruby by Jay Fields</p>

<h3>POTD</h3>

<p>Apache - most popular web server that powers 57% of the internet
68% of the top 100 sites use apache</p>

<p>LAMP - linux, apache, mysql, php</p>

<p><a href="http://en.wikipedia.org/wiki/User:Hobart/Robert_McCool">Rob McCool</a></p>

<p>Named after Apache Native American tribe and also &#8220;A patchy server&#8221;</p>

<p><a href="http://code.google.com/p/codeswarm/">code_swarm</a></p>

<h3>Code Review</h3>

<p>CLI-
The only thing that should be rescued are exceptional errors&#8230;
- rescuing a non-exceptional search item.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># runs the code</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="c1">#resuces an error</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://en.wikipedia.org/wiki/Defensive_programming">defensive programming</a></li>
<li><a href="http://eimers.blogspot.com/2008/02/reflection-vs-introspection.html">introspection</a> - look in the DB and see what attributes I have</li>
<li>when something changes, you just need to trickle that change to a bunch of different places.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">PRAMA</span> <span class="n">table_info</span><span class="p">(</span><span class="n">students</span><span class="p">);</span>
</span><span class='line'><span class="c1">#returns the headers of the table</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Debugger</h3>

<p>gives you debugger prompt- type irb which will allow you to drop into IRB with the objects all ready loaded</p>

<h3>Methods</h3>

<ul>
<li><p>??inject() do |incrementer, another param|</p>

<ul>
<li>it is the result of the block that keeps getting passed along.

<ul>
<li>This needs review</li>
</ul>
</li>
</ul>
</li>
<li><p>??each_with_object</p>

<ul>
<li>This needs review, passes in the object as the second argument, inject is the first. There is little diff other than that.</li>
</ul>
</li>
<li><p>send(string_or_a_symbol, data[i])</p></li>
</ul>


<h3>Code Review</h3>

<p><a href="http://masonry.desandro.com/">jquery masonry</a></p>

<p>dynamic dispatching</p>

<p><strong>use the database to find stuff for you, not ruby</strong></p>

<p>raw_results</p>

<figure class='code'><figcaption><span>Send method example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new_from_db</span><span class="p">(</span><span class="n">raw_results</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Programmer</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>    <span class="n">raw_results</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span> <span class="c1">#name of the attribute, value of the attribute</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>program with the initialize method or better yet, build on top of the new object</strong></p>

<ul>
<li><p>drop db or just drop table? USE: database cleaner gem- drop the data (truncate it)</p></li>
<li><p>the .included method at the bottom of the module is like a callback or hook</p></li>
</ul>


<h2>Rails Lecture</h2>

<ul>
<li><p>the rails command inside the the rails app folder is very different than outside the folder&#8230;</p></li>
<li><p>bundler - we call it a bundle, because it is a bundle of dependencies</p></li>
<li><p>all ruby web applications will respond to a rack application&#8230;</p></li>
<li>ActiveRecord is for relational databases (not MongoDB for example)</li>
</ul>


<h3>MVC</h3>

<p>Models are our objects the CRUD
<strong>Models are always SINGULAR</strong></p>

<p>Controller are about ferrying data from one place to another-> just business logic</p>

<p>Views are display logic -> present data</p>

<h3>Other Files</h3>

<p>lib dir:</p>

<ul>
<li>for any modules that made my classes autocompletable for all songs and users</li>
<li> anything that isn&#8217;t part of the request cycle</li>
</ul>


<p>Public dir:</p>

<ul>
<li>whatever you put in the public dir will automatically be served (that is why it worked in sinatra)</li>
</ul>


<h3>Resources</h3>

<p>a resource means that you have a model, controller, and a view</p>

<h3>Migrations</h3>

<p>apply any migrations all changes that have not been previously been uncommitted</p>

<figure class='code'><figcaption><span>Send method example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>
rake is included in the standard library</p>

<h3>TDD</h3>

<p><a href="http://ajonas.herokuapp.com/blog/2012-10-24-test-driven-development">see</a></p>

<h3>Ruby</h3>

<figure class='code'><figcaption><span>Hash.new</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@item</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c1">#when something is instantiated its value will be 0</span>
</span><span class='line'><span class="vi">@item</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8220;anytime you see a private method you see a new class yearning to be born&#8221;</p>

<figure class='code'><figcaption><span>Ruby Magic</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span> <span class="c1">#=&gt; [3]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">|</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span> <span class="c1">#=&gt; [1,2,3,4,5]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gregg Pollack]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/gregg-pollack/"/>
    <updated>2012-10-23T15:00:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/gregg-pollack</id>
    <content type="html"><![CDATA[<h3>Transparency</h3>

<ul>
<li><p>Client closer to the team</p>

<ul>
<li>short feedback cycles

<ul>
<li>show work on a weekly basis</li>
</ul>
</li>
</ul>
</li>
<li><p>Understanding the why of your work</p>

<ul>
<li>clients often don&#8217;t know what they really want

<ul>
<li><p>ask questions</p>

<p>  In order to<em><strong><em>,
  as a </em></strong>,
  I want to </em>__.</p></li>
</ul>
</li>
</ul>
</li>
<li><p>Code is a craft.</p>

<ul>
<li>consulting is more challenging than a startup

<ul>
<li>scratching someone else&#8217;s itch is more challenging</li>
</ul>
</li>
</ul>
</li>
<li><p>There are things that you can delegate</p></li>
<li><p>Starting a book club- for both your company and those around you.</p></li>
<li><p>Use <a href="http://skitch.com/">Skitch</a> and <a href="http://www.techsmith.com/jing.html">Jing is like skitch for screencasting</a> to show off your work and improve feedback.</p></li>
<li><p><strong>Ask a company about their core values&#8230;</strong></p></li>
</ul>


<h3>Estimates</h3>

<ul>
<li>go to user stories right away</li>
<li>show the estimates of the of the features, not of the tasks that contribute to the feature</li>
<li>get away from big estimates immediately - we don&#8217;t show the granular estimates</li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-11T09:26:34-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code School > Treehouse > Codecademy]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/10/code-school-vs-treehouse-vs-code-academy/"/>
    <updated>2012-10-10T11:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/10/code-school-vs-treehouse-vs-code-academy</id>
    <content type="html"><![CDATA[<p>Like any n00b, I spent a lot of time learning the skills of programming online. Outside of random YouTube Videos (<a href="http://www.youtube.com/user/thenewboston">NewBoston</a> is worth your time), there are three well-known online products&#8211; <a href="http://www.codeschool.com/">Code School</a>, <a href="http://teamtreehouse.com/">Treehouse</a>, and <a href="http://www.codecademy.com/">Codecademy</a>. I&#8217;d estimate, I&#8217;ve spent around 80 hours on these sites. I don&#8217;t know if that is a lot or a little, but I do know that Code School is the clear winner&#8230;</p>

<p><img class="left" src="http://ajonas.herokuapp.com/images/codeschool.jpeg" title="Code School" ></p>

<h3>Codecademy</h3>

<p>(not to be confused with <a href="http://www.builtinchicago.org/blog/code-academy-evolves-starter-league-and-partners-37signals">Code Academy</a>) <a href="http://www.businessinsider.com/codecademy-1000000-users-2012-1">exploded on the scene last fall</a>, but really falls short in the <a href="http://programmingzen.com/2012/01/16/on-the-usability-of-codecademy/">usability</a> department and error feedback. To be fair, I only have spent time with their JavaScript courses, but it&#8217;s hard to past first impressions. Granted, Codecademy is run by a <a href="http://mashable.com/2012/07/25/zach-sims-codecademy/">couple of kids</a> and haven&#8217;t had the head start that Code School has on its interactive browser, but I found myself more than frustrated going through their lessons. If they spent less time, hammering my inbox with weekly emails and built a better interface, I&#8217;d be more likely to take a look at their newly updated and <a href="(http://www.crunchbase.com/company/codecademy">well funded site</a> (I&#8217;ve heard they added Ruby lessons). At least for now, Codecademy is FREE. So serious brownie points there.</p>

<p><img class="right" src="http://ajonas.herokuapp.com/images/small_Codecademy-Treehouse-Blog-Logo.png" title="Codecademy and Treehouse" ></p>

<h3>Treehouse is&#8230;</h3>

<p>in a word, boring. Thankfully, I was able to guess most of the answers without struggling through the videos. I did spend, however, a portion of the time learning about subjects on the periphery. Their explanations of structs, I/O, and Ruby Core had slipped through the cracks of other beginner Ruby tutorials. I couldn&#8217;t get into the humor of <a href="http://www.youtube.com/watch?v=jQNXtyoyHic">Mike the Frog</a> or some of their other movie &#8220;rewards,&#8221; but I guess that really shouldn&#8217;t be the main motivating factor. While others thought it is silly, I like that <a href="https://twitter.com/jseifer">Jason Seifer</a> is such a goofball. He is the lone source of humor in an overall dry learning experience. Personally, I learn faster by doing and Treehouse falls short here. Though they do sprinkle in a few interactive quizzes, it just isn&#8217;t enough. If you are going to financially invent in your learning, I&#8217;d save it for&#8230;</p>

<h3>Code School</h3>

<p>in a word: <strong>rocks</strong>. It has clearly been the best use of my time. The videos are much more in-depth and the interactive browser is the superior to everything else I&#8217;ve seen. The <a href="http://envylabs.com/">Envy Labs Team</a> goes into significantly more detail than their aforementioned competitors. Their material is engaging, challenging, and well thought-out. What I enjoyed most (besides the information of course) is the self-depreciating humor that dots their casts. Cheesy graphics and dedication to a theme, for example Zombie terminology, finds the right balance of hilarious and non-interfering entertainment. When I first took their beginner courses, I grumbled at the level of detail they covered. Now that I picked up a few things, Code School does an amazing job of covering the entire breadth of subjects within a topic. Maybe most importantly, the error feedback is actually useful as are their hints. My sole criticism is that there is a recognizable difference between <a href="https://twitter.com/greggpollack">Gregg Pollack</a> and the others characters. If he could navigate the office politics, Gregg should do all the casts.</p>

<p>Now in my 7th month of my programming career, <a href="http://shitavisays.tumblr.com/">Avi&#8217;s words</a> have more meaning than ever:</p>

<blockquote><p>&#8220;It&#8217;s not about learning the syntax. Anyone can learn that. Learning to program is learning how to communicate.&#8221; &#8211; Avi Flombaum</p></blockquote>

<p>If you are going to learn the syntax (which we DO need to do), Code School is very much worth it and <a href="http://paulstamatiou.com/code-school-learn-by-doing">I&#8217;m not the only one who thinks so</a>. But what do I know? Not that much. What do you think?</p>

<p>(Tip to <a href="https://twitter.com/davidbakertv">David Baker</a> for the subject.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day5]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/10/fis-day5/"/>
    <updated>2012-10-10T09:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/10/fis-day5</id>
    <content type="html"><![CDATA[<p>&#8220;Classes are state plus behavior, if you just want the behavior then use a module!&#8221;</p>

<figure class='code'><figcaption><span>This is no good: Singleton Object- class with one method on it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Random</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Underuse of modules&#8230;</p>

<h3>Programmer of the day</h3>

<p>Dan Bricklin</p>

<ul>
<li>inventor of the spreadsheet</li>
</ul>


<h3>Homework Review</h3>

<p>table names should be plaural (e.g.table USERS)</p>

<p>id INTEGER PRIMARY KEY -> always be called ID, is an integer and auto increments</p>

<p>&#8216;never use ruby for something SQL can do&#8217;</p>

<p>you want to group by integer values rather than string values</p>

<p>AS aliases the columns</p>

<p>subqueries- as long as a query returns one and only one value you can use that for another query</p>

<p><a href="http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html">Visual explanation of sql</a></p>

<h3>INDEXes</h3>

<ul>
<li>index a column when it is being used in columns or queries</li>
<li>should index foreign keys (they are not automatically indexed)</li>
<li>cost: everytime you add a record it has to reindex</li>
<li>indexes compromise the write speed in favor of read speed</li>
</ul>


<p>Two optimization steps:</p>

<ul>
<li>denormalize (add more columns)</li>
<li><p>index - optimize for write or read?</p>

<ul>
<li>the more indexes your keys are using the more efficient your DB will be</li>
</ul>
</li>
<li><p>You optimize the joins by denormalizing (and thus removing the need for joins) and indexing</p></li>
</ul>


<figure class='code'><figcaption><span>This is no good: Singleton Object- class with one method on it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cp</span> <span class="o">-</span><span class="n">r</span> <span class="o">&lt;</span><span class="n">old</span> <span class="n">dir</span> <span class="nb">name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="kp">new</span> <span class="n">dir</span> <span class="nb">name</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>update</p>

<figure class='code'><figcaption><span>This is no good: Singleton Object- class with one method on it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">UPDATE</span> <span class="no">Persons</span>
</span><span class='line'><span class="no">SET</span> <span class="no">Address</span><span class="o">=</span><span class="s1">&#39;Nissestien 67&#39;</span><span class="p">,</span> <span class="no">City</span><span class="o">=</span><span class="s1">&#39;Sandnes&#39;</span>
</span><span class='line'><span class="no">WHERE</span> <span class="no">LastName</span><span class="o">=</span><span class="s1">&#39;Tjessem&#39;</span> <span class="no">AND</span> <span class="no">FirstName</span><span class="o">=</span><span class="s1">&#39;Jakob&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/2044467/how-to-update-two-tables-in-one-statement-in-sql-server-2005">Transaction</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced SQL]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/09/advanced-sql/"/>
    <updated>2012-10-09T20:58:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/09/advanced-sql</id>
    <content type="html"><![CDATA[<p>INNER JOIN is the same as JOIN.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT title, artist
</span><span class='line'>  FROM album JOIN track
</span><span class='line'>         ON (album.asin=track.album)
</span><span class='line'> WHERE song = 'Alison'</span></code></pre></td></tr></table></div></figure>


<p>Index structures: if you create an index on the primary key and then search for a row of data based on one of the primary key values, SQL Server first finds that value in the index, and then uses the index to quickly locate the entire row of data. Without the index, a table scan would have to be performed in order to locate the row, which can have a significant effect on performance. <a href="http://www.simple-talk.com/sql/learn-sql-server/sql-server-index-basics/">source</a></p>

<p>Many databases have one special index per table where all of the data from a row exists in the index. SQL Server calls this index a <em>clustered index</em>. Instead of an index at the back of a book, a clustered index is closer in similarity to a phone book because each index entry contains all the information you need, there are no references to follow to pick up additional data values.<a href="http://odetocode.com/code/237.aspx">Source</a></p>

<p>The <em>EXPLAIN</em> statement can be used either as a way to obtain information about how MySQL executes a statement, or as a synonym for DESCRIBE. <a href="http://dev.mysql.com/doc/refman/5.0/en/explain.html">source</a> In other words, a SQL statement can be preceded by the keyword &#8220;EXPLAIN&#8221; or by the phrase &#8220;EXPLAIN QUERY PLAN&#8221;. Either modification causes the SQL statement to behave as a query and to return information about how the SQL statement would have operated if the EXPLAIN keyword or phrase had been omitted. <a href="http://www.sqlite.org/lang_explain.html">source</a></p>

<h3>Normalized DB</h3>

<ul>
<li>A normalized database is one where you minimize duplication of data by keeping groups of data in separate tables and linking (using indexes) between the tables.</li>
<li>Another def: Database normalization is the process of organizing the fields and tables of a relational database to minimize redundancy and dependency. Normalization usually involves dividing large tables into smaller (and less redundant) tables and defining relationships between them. The objective is to isolate data so that additions, deletions, and modifications of a field can be made in just one table and then propagated through the rest of the database via the defined relationships.</li>
</ul>


<h3>Optimization</h3>

<ul>
<li>Write operations are always more expensive than reads.</li>
<li>Use memCache</li>
<li>use background tasks to do your database activity offline</li>
<li>Denormalize: database normalization is a fatal mistake.

<ul>
<li>A de-noramlized database is one where you keeps redundant frequently-accessed data, duplicated across several tables, making it possible to fulfill a user request without having to look at more than a single table.</li>
<li>The key to high performance database access is sticking to single-table SELECT queries with short indexes.</li>
</ul>
</li>
<li>MySQL Triggers (starting from MySQL 5.0) allow us to define a rule to perform whenever a certain table is updated.
<a href="http://www.softwareprojects.com/resources/programming/t-database-performance-optimization-denormalization-1410.html">source</a></li>
</ul>


<p>The SQL HAVING clause is &#8220;like a WHERE clause for aggregated data.&#8221; It&#8217;s used with conditional statements, just like WHERE, to filter results. One thing to note is that any column name appearing in the HAVING clause must also appear in the GROUP BY clause.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT DISTINCT player
</span><span class='line'>  FROM game JOIN goal ON matchid = id 
</span><span class='line'>    WHERE (game.team1='GER' OR game.team2='GER') AND goal.teamid &lt;&gt; 'GER'
</span><span class='line'>
</span><span class='line'>SELECT teamname, COUNT(teamid)
</span><span class='line'>  FROM eteam JOIN goal ON eteam.id = goal.teamid 
</span><span class='line'>GROUP BY teamname
</span><span class='line'>
</span><span class='line'>SELECT stadium, count(teamid)
</span><span class='line'>FROM game join goal on matchid=id
</span><span class='line'>group by stadium
</span><span class='line'>
</span><span class='line'>SELECT matchid,mdate, count(teamid)
</span><span class='line'>  FROM game JOIN goal ON matchid = id 
</span><span class='line'> WHERE (team1 = 'POL' OR team2 = 'POL')
</span><span class='line'>GROUP BY matchid
</span><span class='line'>
</span><span class='line'>SELECT day_of_order,
</span><span class='line'>  product,
</span><span class='line'>  SUM(quantity) as "Total"
</span><span class='line'>FROM orders
</span><span class='line'>GROUP BY day_of_order,product,quantity
</span><span class='line'>HAVING quantity &gt; 7
</span><span class='line'>ORDER BY day_of_order;</span></code></pre></td></tr></table></div></figure>


<p>Other functions min, max, sum, count, cast</p>

<p><a href="http://www.w3schools.com/sql/sql_in.asp">IN operator</a>: The IN operator allows you to specify multiple values in a WHERE clause.</p>

<p>IN Clause:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT * FROM Persons
</span><span class='line'>WHERE LastName IN ('Hansen','Pettersen')</span></code></pre></td></tr></table></div></figure>


<p>casting in ruby (.to_i)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Talk]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/09/git-talk/"/>
    <updated>2012-10-09T13:37:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/09/git-talk</id>
    <content type="html"><![CDATA[<p>Git Talk with Julia West</p>

<p>git pull = git fetch + git merge
git pull &#8211;rebase = git fetch + git rebase #generally don&#8217;t get the merge commit</p>

<p>git rebase -i &#8220;HEAD~5&#8221; #=> shows 5 most recent commits in the branch</p>

<p>squash commits- helps you combine commits</p>

<p>merging with fastforwarding
no fast forward is the default at github.</p>

<p>master- ready to go into production
all the work we do is on the feature branch</p>

<p>An important part of the anatomy of a commit is who is its parent</p>

<p>&#8220;I keep merging master into my feature branch so that I can have all the commit histories.&#8221; A rebase will lose the commit histories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day4]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/09/fis-day4/"/>
    <updated>2012-10-09T11:07:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/09/fis-day4</id>
    <content type="html"><![CDATA[<h3>Programmer of the day:</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Grace_Hopper">Grace Hopper:</a>
Helped develop COBOL - first human readable code advocate.
Popularized the word debugging
Nickname - &#8220;amazing grace&#8221;</li>
</ul>


<h3>Blogging</h3>

<p>Titles names:</p>

<ul>
<li>how to</li>
<li>3 tips for</li>
<li>pros and cons of</li>
</ul>


<p>&lt;compfight.com> to search high-res pictures</p>

<p>end the article with a question</p>

<p>3-5 paragraphs
400-700 wds</p>

<p>skitch- screenshots</p>

<p>Evan Williams- creator of blogger
web log -> weblog -> blog</p>

<p>Matt Mullenwig- creator of wordpress
powers 15% of the internet</p>

<p><a href="http://errtheblog.com/">err the blog</a>
PJ Hyett and Chris Wanstrath</p>

<p><a href="https://speakerdeck.com/">speaker deck</a></p>

<p><a href="http://design-seeds.com/">design helper</a></p>

<p><a href="http://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> is the creator of git</p>

<p><a href="http://en.wikipedia.org/wiki/Capistrano">Capistrano</a></p>

<p><a href="http://demosthenes.info/blog/532/Convert-Images-To-Black-And-White-With-CSS">CSS3 Grey-scale mask</a>
<a href="http://webdesignerwall.com/tutorials/css3-image-styles">CSS3 circle mask image</a>
This also worked really well&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">-circle</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">61px</span><span class="p">;</span>
</span><span class='line'>        <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">61px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">61px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">border</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#aaaaaa</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span><span class="m">122px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span><span class="m">122px</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Blog RSS feed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">language</span><span class="o">=</span><span class="s2">&quot;JavaScript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://itde.vccs.edu/rss2js/feed2js.php?src=http%3A%2F%2Fajonas.herokuapp.com%2Fatom.xml&amp;chan=n&amp;num=5&amp;desc=1&amp;date=y&amp;targ=y&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">noscript</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://itde.vccs.edu/rss2js/feed2js.php?src=http%3A%2F%2Fajonas.herokuapp.com%2Fatom.xml&amp;chan=n&amp;num=5&amp;desc=1&amp;date=y&amp;targ=y&amp;html=y&quot;</span><span class="o">&gt;</span><span class="nx">View</span> <span class="nx">RSS</span> <span class="nx">feed</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/noscript&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://itde.vccs.edu/rss2js/build.php">source</a></p>

<figure class='code'><figcaption><span>Blog RSS feed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">♕</span> <span class="nx">git</span> <span class="nx">reset</span> <span class="o">--</span><span class="nx">hard</span> <span class="nx">HEAD</span>
</span><span class='line'><span class="nx">HEAD</span> <span class="nx">is</span> <span class="nx">now</span> <span class="nx">at</span> <span class="nx">ab33e5d</span> <span class="nx">fixed</span> <span class="nx">inline</span> <span class="nx">styles</span> <span class="nx">and</span> <span class="nx">added</span> <span class="nx">footer</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">02</span><span class="o">:</span><span class="mi">29</span><span class="p">]</span> <span class="p">(</span><span class="nx">master</span><span class="p">)</span> <span class="nx">LeanJaw</span>
</span><span class='line'><span class="err">♕</span> <span class="nx">git</span> <span class="nx">status</span>
</span><span class='line'><span class="err">#</span> <span class="nx">On</span> <span class="nx">branch</span> <span class="nx">master</span>
</span><span class='line'><span class="err">#</span> <span class="nx">Untracked</span> <span class="nx">files</span><span class="o">:</span>
</span><span class='line'><span class="err">#</span>   <span class="p">(</span><span class="nx">use</span> <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> <span class="nx">to</span> <span class="nx">include</span> <span class="k">in</span> <span class="nx">what</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">committed</span><span class="p">)</span>
</span><span class='line'><span class="err">#</span>
</span><span class='line'><span class="err">#</span>    <span class="nx">css</span><span class="o">/</span><span class="nx">leanJaw</span><span class="o">-</span><span class="nx">student</span><span class="p">.</span><span class="nx">css</span>
</span><span class='line'><span class="err">#</span>    <span class="nx">leanJaw</span><span class="o">-</span><span class="nx">matz</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'><span class="nx">nothing</span> <span class="nx">added</span> <span class="nx">to</span> <span class="nx">commit</span> <span class="nx">but</span> <span class="nx">untracked</span> <span class="nx">files</span> <span class="nx">present</span> <span class="p">(</span><span class="nx">use</span> <span class="s2">&quot;git add&quot;</span> <span class="nx">to</span> <span class="nx">track</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">02</span><span class="o">:</span><span class="mi">31</span><span class="p">]</span> <span class="p">(</span><span class="nx">master</span><span class="p">)</span> <span class="nx">LeanJaw</span>
</span><span class='line'><span class="err">♕</span> <span class="nx">git</span> <span class="nx">clean</span> <span class="o">-</span><span class="nx">f</span>
</span><span class='line'><span class="nx">Removing</span> <span class="nx">css</span><span class="o">/</span><span class="nx">leanJaw</span><span class="o">-</span><span class="nx">student</span><span class="p">.</span><span class="nx">css</span>
</span><span class='line'><span class="nx">Removing</span> <span class="nx">leanJaw</span><span class="o">-</span><span class="nx">matz</span><span class="p">.</span><span class="nx">html</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">02</span><span class="o">:</span><span class="mi">34</span><span class="p">]</span> <span class="p">(</span><span class="nx">master</span><span class="p">)</span> <span class="nx">LeanJaw</span>
</span><span class='line'><span class="err">♕</span> <span class="nx">git</span> <span class="nx">st</span>
</span><span class='line'><span class="err">#</span> <span class="nx">On</span> <span class="nx">branch</span> <span class="nx">master</span>
</span><span class='line'><span class="nx">nothing</span> <span class="nx">to</span> <span class="nx">commit</span> <span class="p">(</span><span class="nx">working</span> <span class="nx">directory</span> <span class="nx">clean</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">19</span><span class="o">:</span><span class="mi">02</span><span class="o">:</span><span class="mi">35</span><span class="p">]</span> <span class="p">(</span><span class="nx">master</span><span class="p">)</span> <span class="nx">LeanJaw</span>
</span><span class='line'><span class="err">♕</span> <span class="nx">git</span> <span class="nx">pull</span> <span class="o">--</span><span class="nx">rebase</span>
</span><span class='line'><span class="nx">From</span> <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">:</span><span class="nx">flatiron</span><span class="o">-</span><span class="nx">school</span><span class="o">/</span><span class="nx">students</span><span class="p">.</span><span class="nx">flatironschool</span><span class="p">.</span><span class="nx">com</span>
</span><span class='line'> <span class="o">*</span> <span class="p">[</span><span class="k">new</span> <span class="nx">branch</span><span class="p">]</span>      <span class="nx">addJackProfile</span> <span class="o">-&gt;</span> <span class="nx">origin</span><span class="o">/</span><span class="nx">addJackProfile</span>
</span><span class='line'> <span class="o">*</span> <span class="p">[</span><span class="k">new</span> <span class="nx">branch</span><span class="p">]</span>      <span class="nx">kevin</span><span class="o">-</span><span class="nx">matz</span><span class="o">-</span><span class="nx">profile</span> <span class="o">-&gt;</span> <span class="nx">origin</span><span class="o">/</span><span class="nx">kevin</span><span class="o">-</span><span class="nx">matz</span><span class="o">-</span><span class="nx">profile</span>
</span><span class='line'>   <span class="nx">ab33e5d</span><span class="p">..</span><span class="mi">99401</span><span class="nx">ef</span>  <span class="nx">master</span>     <span class="o">-&gt;</span> <span class="nx">origin</span><span class="o">/</span><span class="nx">master</span>
</span><span class='line'><span class="nx">First</span><span class="p">,</span> <span class="nx">rewinding</span> <span class="nx">head</span> <span class="nx">to</span> <span class="nx">replay</span> <span class="nx">your</span> <span class="nx">work</span> <span class="nx">on</span> <span class="nx">top</span> <span class="nx">of</span> <span class="nx">it</span><span class="p">...</span>
</span><span class='line'><span class="nx">Fast</span><span class="o">-</span><span class="nx">forwarded</span> <span class="nx">master</span> <span class="nx">to</span> <span class="mi">99401</span><span class="nx">ef0c8fcd811ecf1249edfb86e1b8179cacb</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git advanced discussion]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/08/git-advanced-discussion/"/>
    <updated>2012-10-08T17:19:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/08/git-advanced-discussion</id>
    <content type="html"><![CDATA[<h3>Remotes</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote -v, which shows you the URL that Git has stored for the shortname to be expanded to:
</span><span class='line'>
</span><span class='line'>$ git remote -v
</span><span class='line'>origin  git://github.com/schacon/ticgit.git
</span><span class='line'>
</span><span class='line'>$ git remote add [shortname] [url]
</span><span class='line'>$ git remote rm [shortname]
</span><span class='line'>$ git remote rename [oldname] [new name]</span></code></pre></td></tr></table></div></figure>


<h3>Fetch</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch [remote-name]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>It’s important to note that the <strong>fetch</strong> command pulls the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.</li>
<li>The <em>git pull</em> command to automatically fetch and then merge a remote branch into your current branch.</li>
</ul>


<h3>Pushes</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push [remote-name] [branch-name]</span></code></pre></td></tr></table></div></figure>


<h3>Branches</h3>

<p>You can delete a remote branch using the rather obtuse syntax &#8216;$ git push [remotename] :[branch]&#8217;. If you want to delete your serverfix branch from the server, you run the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin &lt;:branch name&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch -d &lt;branch name&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Rebasing</h3>

<p>In Git, there are two main ways to integrate changes from one branch into another: the <em>merge</em> and the <em>rebase.</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase master</span></code></pre></td></tr></table></div></figure>


<p>It works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.</p>

<p><strong>Important:</strong>
Do not rebase commits that you have pushed to a public repository.</p>

<h3>Git real review</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commi­t --ame­nd -m 'addi­ng new' #ammend to last commit
</span><span class='line'>$ git reset­ --sof­t HEAD^­ #erase last commit and rewind to HEAD
</span><span class='line'>$ git reset­ --sof­t HEAD^­^ #erase the last TWO commits
</span><span class='line'>$ git push -u origi­n maste­r #-u to indicate this is the default push for the future
</span><span class='line'>$ git branc­h -r #show all the branches on the remote
</span><span class='line'>$ git push origi­n :weas­el #deletes the weasel branch on the remote
</span><span class='line'>
</span><span class='line'>$ git remot­e show origi­n #Specify a ­remote to ­see specif­ic informa­tion about­ that remo­te. The gi­t remote c­ommand wil­l show you­ available­ remotes.
</span><span class='line'>$ git remot­e prune­ origi­n #clean up local repo  
</span><span class='line'>
</span><span class='line'>$ git tag #list all tags
</span><span class='line'>$ git tag -a v1.3.2 -m 'new versi­on' #create new tag
</span><span class='line'>$ git push --tags
</span><span class='line'>$ git check­out v1.3.1
</span><span class='line'>
</span><span class='line'>$ git rebas­e maste­r 
</span><span class='line'>
</span><span class='line'>$ git add -u #stages all new files AS WELL AS deletions
</span><span class='line'>
</span><span class='line'>$ git diff maste­r eleph­ant 
</span><span class='line'>
</span><span class='line'>$ git log -p #diff and log
</span><span class='line'>
</span><span class='line'>$ git confi­g user.email "admi­n@example.­com"
</span><span class='line'>
</span><span class='line'>$ git confi­g --glo­bal user.­name "blah­ blah"
</span><span class='line'>
</span><span class='line'>$ git confi­g --glo­bal alias­.commit pushi­t </span></code></pre></td></tr></table></div></figure>


<h3>Questions</h3>

<p>What is a reasonable number of commits per branch?
How often do you commit?
Working on the same file&#8230; strategies?
fast forward vs no fast forward</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koans Lessons]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/07/koans-lessons/"/>
    <updated>2012-10-07T21:53:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/07/koans-lessons</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_accessing_hashes_with_fetch</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:one</span> <span class="o">=&gt;</span> <span class="s2">&quot;uno&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;uno&quot;</span><span class="p">,</span> <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:one</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_raise</span><span class="p">(</span><span class="no">KeyError</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:uno</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># THINK ABOUT IT:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Why might you want to use #fetch instead of #[] when accessing hash keys?</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># answer: there are some instances where returning nil blindly from a hash can cause issues</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Bonus Question: Why was &quot;expected&quot; </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>.merge will rewrite values that you had :keys for. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;jim&quot;</span> <span class="o">=&gt;</span> <span class="mi">53</span><span class="p">,</span> <span class="s2">&quot;amy&quot;</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">,</span> <span class="s2">&quot;dan&quot;</span> <span class="o">=&gt;</span> <span class="mi">23</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; {&quot;jim&quot;=&gt;53, &quot;amy&quot;=&gt;20, &quot;dan&quot;=&gt;23}</span>
</span><span class='line'>
</span><span class='line'><span class="n">new_hash</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">merge</span><span class="p">({</span> <span class="s2">&quot;jim&quot;</span> <span class="o">=&gt;</span> <span class="mi">54</span><span class="p">,</span> <span class="s2">&quot;jenny&quot;</span> <span class="o">=&gt;</span> <span class="mi">26</span> <span class="p">})</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;jim&quot;</span><span class="o">=&gt;</span><span class="mi">54</span><span class="p">,</span> <span class="s2">&quot;amy&quot;</span><span class="o">=&gt;</span><span class="mi">20</span><span class="p">,</span> <span class="s2">&quot;dan&quot;</span><span class="o">=&gt;</span><span class="mi">23</span><span class="p">,</span> <span class="s2">&quot;jenny&quot;</span><span class="o">=&gt;</span><span class="mi">26</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Default values</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hash2</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;dos&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#every default value is now &quot;dos&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[inject]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/07/inject/"/>
    <updated>2012-10-07T11:33:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/07/inject</id>
    <content type="html"><![CDATA[<p>Learning inject has been on my TODO list for a while&#8230;</p>

<p>I want to use inject anytime I am building an object a piece at a time. In the case of summing, creating a hash, or an array I&#8217;m building a result by applying changes based on the elements of the enumerable.</p>

<figure class='code'><figcaption><span>Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">total_visits</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">stat</span><span class="o">|</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">stat</span><span class="o">.</span><span class="n">visit_count</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#just for fun let&#39;s sum all the numbers from 1 to, oh, say a million</span>
</span><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">1000000</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span><span class="o">|</span><span class="n">cummulative</span><span class="p">,</span><span class="n">n</span><span class="o">|</span> <span class="n">cummulative</span><span class="o">+</span><span class="n">n</span><span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">sum</span>   <span class="o">=&gt;</span><span class="mi">500000500000</span>
</span><span class='line'><span class="c1">#you can do interesting things like build hashes</span>
</span><span class='line'><span class="n">primes</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">13</span><span class="o">]</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="n">primes</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="p">,</span><span class="n">e</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="p">{</span> <span class="n">e</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=&gt;</span> <span class="n">e</span> <span class="p">}</span> <span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span>  <span class="c1">#   =&gt;  {&quot;11&quot;=&gt;11, &quot;7&quot;=&gt;7, &quot;13&quot;=&gt;13, &quot;1&quot;=&gt;1, &quot;3&quot;=&gt;3, &quot;5&quot;=&gt;5}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reading:
<a href="http://blog.jayfields.com/2008/03/ruby-inject.html">The inject method</a>
<a href="http://www.fincher.org/tips/Languages/Ruby/">Code e.g. - #21e</a>
<a href="http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/">Charles Max Wood Video</a>
<a href="http://blog.teamtreehouse.com/ruby-arrays">Treehouse explains the inject method</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assignments]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/06/assignment1/"/>
    <updated>2012-10-06T14:54:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/06/assignment1</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3856174">Assignment 1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FizzBuzz]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/06/fizzbuzz/"/>
    <updated>2012-10-06T14:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/06/fizzbuzz</id>
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/3856188">Gist</a></p>

<p>Some background of FizzBuzz</p>

<ul>
<li><a href="http://www.codinghorror.com/blog/2007/02/fizzbuzz-the-programmers-stairway-to-heaven.html">If you can&#8217;t do FizzBuzz you aren&#8217;t a programmer</a></li>
<li><a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html">The majority of comp sci grads can&#8217;t do fizzbuzz</a></li>
<li><a href="http://dave.fayr.am/posts/2012-10-4-finding-fizzbuzz.html">proper implementations of fizzbuzz</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISday3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/05/fisday3/"/>
    <updated>2012-10-05T16:48:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/05/fisday3</id>
    <content type="html"><![CDATA[<p>Programs are:</p>

<p><em>idealized components</em>&#8230; not bound by degradation of use.</p>

<p><em>infinite complexity</em>&#8230; because nothing is stopping us from building it.</p>

<p><em>Method signature</em> is the first line of the method (e.g. def method_name(*arg))</p>

<p><em>Parameters</em> are the adverbs. Parameters allow us to make a method dynamic.</p>

<p>To the computer, there is no difference between a local variable and a method.</p>

<p>&#8217;==&#8217; => value equality
&#8217;===&#8217; => object equality</p>

<p>A computationally efficient language will compile down faster than</p>

<p><em>lazy evaluation</em>- the program will stop as soon as an if or elsif is satisfied. It won&#8217;t execute any more statements.</p>

<p><a href="http://www.bartleby.com/103/6.html">Ode</a> by Arthur O&#8217;Shaughnessy</p>

<p>sqlite 3.4.12 is the first version to support multi-line inserts.</p>

<p>?? Are there languages with more syntactic sugar than ruby?
?? is it really not possible to write a program in SQL
Does <a href="http://www.simple-talk.com/blogs/2005/12/30/a-sql-game/">this</a> qualify as a program?
<a href="http://www.red-gate.com/downloads/CreateTheMazeGame.txt">SQL code:</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Line]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/04/command-line/"/>
    <updated>2012-10-04T16:01:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/04/command-line</id>
    <content type="html"><![CDATA[<p>To create multiple directories via the CLI using mkdir simply include the -p flag. For example, starting in home directory where &#8216;development already exists run the following:</p>

<p>$ mkdir -p development/practice/learn_sql</p>

<p>To create multiple directories down the tree do this…</p>

<p>$ mkdir -p development/practice/learn_sql/{beginner,intermediate,advanced}</p>

<p>Learned this thanks to this friendly <a href="http://technosophos.com/content/mkdir-creating-multiple-subdirectories-one-command">blog post</a></p>

<p>cs (cd and ls in the same command) function loaded into .bash_profile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function cs () {
</span><span class='line'>cd "$@" && ls
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day2]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/04/fis-day2/"/>
    <updated>2012-10-04T09:06:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/04/fis-day2</id>
    <content type="html"><![CDATA[<p>summary of yesterday
plan for today</p>

<pre><code>-everyone should be cloning on their own
</code></pre>

<p>git clone
create new repo
 - git remove remote origin
 - git add remote origin</p>

<p>make changes push to our repo
submit pull request to flatiron repo</p>

<p>DB design:</p>

<p>student:</p>

<pre><code>id (pk, incrementer)
name
</code></pre>

<p>Quiz:</p>

<pre><code>id (pk, incrementer)
a question
b question
c question
d question
e queston
answer
</code></pre>

<p>Student/answers</p>

<pre><code>student id
quiz id
</code></pre>

<p>circles for pictures
css - mask transparent circle on top of it</p>

<p>write a site that degrades gracefully.
progressive enhancement- don&#8217;t build for the worst browser rather than the worst</p>

<figure class='code'><figcaption><span>Smilies implementation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* in the css */</span>
</span><span class='line'><span class="nt">div</span> <span class="nt">smilies-5</span><span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="k">repeat-x</span> <span class="sx">url(smilies)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>communicate on the web protocols
ssh
http
http
git://
ftp
aim://</p>

<p>https required more resources
// => piggy back the protocol that is being used. over course if this is local it will break on the file system</p>

<p>tr;dl => too long, don&#8217;t read</p>

<p><em>Programmer of the day</em>
Edgar F. Codd: designed the relational database model</p>

<ul>
<li>relational model: has data with keys
one column has a primary key and all the other data works off of that primary</li>
<li><p>don&#8217;t want to repeat data so you a second normal form is what you want over third normal form. <a href="http://en.wikipedia.org/wiki/Network_model">network model</a></p></li>
<li><p>Hierarchical model is the other kind, that no one uses</p></li>
</ul>


<p>&#8220;A relation is in second normal form if the relation depends on the key, the whole key, and nothing but the key, so help me Codd.&#8221;<a href="http://www.dba-oracle.com/oracle_tips_codd_obit.htm">source</a></p>

<p>Beautiful code-
is in proportion to the complexity of the problem.</p>

<p>left joins, inner joins, etc.</p>

<figure class='code'><figcaption><span>Prefixes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">//</span><span class="k">prefix</span><span class="p">.</span> <span class="n">It</span> <span class="n">would</span> <span class="n">be</span> <span class="n">ambiguous</span> <span class="n">if</span> <span class="n">you</span> <span class="n">had</span> <span class="n">the</span> <span class="n">content</span> <span class="k">column</span> <span class="k">in</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">question</span><span class="p">.</span><span class="n">content</span> <span class="n">multiple</span> <span class="n">tables</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">quiz</span><span class="p">,</span> <span class="n">question</span><span class="p">,</span> <span class="n">quiz_question</span>
</span><span class='line'><span class="k">WHERE</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.sqlite.org/datatype3.html"><em>sql data types</em></a></p>

<p><strong><em>The fewer tables you query, the more efficient the query is</em></strong></p>

<p>difference between a where and a join</p>

<p>refernential integrity problem</p>

<figure class='code'><figcaption><span>Prefixes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">student</span>
</span><span class='line'><span class="n">id</span>         <span class="n">name</span>
</span><span class='line'><span class="mi">1</span>         <span class="n">Adam</span> <span class="n">Jonas</span>
</span><span class='line'>
</span><span class='line'><span class="n">quiz</span>
</span><span class='line'><span class="n">id</span>         <span class="n">name</span>
</span><span class='line'><span class="mi">1</span>             <span class="k">First</span> <span class="n">quiz</span>
</span><span class='line'>
</span><span class='line'><span class="n">question</span>
</span><span class='line'><span class="n">id</span> <span class="n">question_content</span>                     <span class="n">correct_answer_id</span>    <span class="n">quiz_id</span>
</span><span class='line'><span class="mi">1</span>     <span class="ss">&quot;What&#39;s the color of the sky&quot;</span>         <span class="mi">1</span>                               <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">answers</span>
</span><span class='line'><span class="n">id</span>         <span class="n">response_content</span>         <span class="n">question_id</span>
</span><span class='line'><span class="mi">1</span>         <span class="ss">&quot;blue&quot;</span>                                    <span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>         <span class="ss">&quot;red&quot;</span>                                     <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">student_answers</span>
</span><span class='line'><span class="n">question_id</span>    <span class="n">student_id</span>       <span class="n">student_response_id</span>  <span class="n">correct</span>
</span><span class='line'>    <span class="mi">1</span>                         <span class="mi">1</span>                           <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Different SQL JOINs</em></p>

<p>Before we continue with examples, we will list the types of JOIN you can use, and the differences between them.</p>

<p>JOIN: Return rows when there is at least one match in both tables (this is also known as inner join)
LEFT JOIN: Return all rows from the left table, even if there are no matches in the right table
RIGHT JOIN: Return all rows from the right table, even if there are no matches in the left table
FULL JOIN: Return rows when there is a match in one of the tables</p>

<p><a href="http://stackoverflow.com/questions/1609637/is-it-possible-to-insert-multiple-rows-at-a-time-in-an-sqlite-database">multiple row inserts syntax</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISDay1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/03/fisday1/"/>
    <updated>2012-10-03T09:10:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/03/fisday1</id>
    <content type="html"><![CDATA[<h3>Lessons learned from day0 project</h3>

<ul>
<li>Positives:  worked well in a group, made sure that everyone got there page done.</li>
<li>Mistakes: could have walked around and see what other teams were doing, could have focused more on layout/style and then breakout overnight to write the content.</li>
</ul>


<p>shell
: guis are an illusion. They are a visualizations of the shell.</p>

<pre><code>: BASH- invented by [Stephen Bourne](http://en.wikipedia.org/wiki/Stephen_R._Bourne)
: ZSH- alternative shell that isn't standard
</code></pre>

<ul>
<li><a href="http://linuxcommand.org/lts0040.php">learning the shell</a></li>
</ul>


<p>BASH
: Bourne Again Shell</p>

<p><a href="http://surfraw.alioth.debian.org/">surfraw</a></p>

<p><a href="http://en.wikipedia.org/wiki/POSIX">POSIX system</a> based off of BASH</p>

<p>dot files are hidden files</p>

<p>bash profile runs everytime I open up a new file</p>

<p>pwd will output the full path
~ => home directory</p>

<p>BASHrc(runs second) and BASHLogin(runs first)</p>

<p><em>BIN</em></p>

<ul>
<li>create a path that says these files and directories can be considered local at all times&#8211; make them local at all times.</li>
<li>all binaries programs which are executables are in the bin dir</li>
</ul>


<p><em>RVM</em></p>

<ul>
<li>if you find yourself in the wrong version of ruby it must have been because the path was messed up</li>
</ul>


<p>ps - shows what is available
ps aux - shows all the programs that are running at all times</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill 81367 #=&gt; kills the task with the id x
</span><span class='line'>ps aux | grep sub #=&gt; this takes the output of ps aux and output it to the other side of the pipe</span></code></pre></td></tr></table></div></figure>


<p>ssh keys- private/public key encryption key. Can&#8217;t decrypt a message with my private key, but not my public key.
encryption is with the public and
decryption is the private</p>

<p>Brew:
package manager for open source software</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew doctor</span></code></pre></td></tr></table></div></figure>


<p><a href="http://ethanschoonover.com/solarized">solarized</a></p>

<p><a href="http://drnicwilliams.com/2006/10/12/my-irbrc-for-consoleirb/">IRBRC</a> - runs everytime I open IRB
gcc - C compiler
need a visualizer</p>

<p>solarized
prgrammer fonts</p>

<p><em>symbolic link</em>
usr/local/bin is where we put all of our binaries</p>

<p>ln -s &#8220;link the stuff from here to&#8230;&#8221; &#8216;also look here&#8217;</p>

<p>ls -lah</p>

<p><em>RVM</em>
If the wrong version is being used:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3 --default</span></code></pre></td></tr></table></div></figure>


<p><em>.irbrc file</em></p>

<ul>
<li>local_method is added here</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">local_methods</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">methods</span> <span class="o">-</span> <span class="no">Object</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Git</em></p>

<ul>
<li><a href="https://help.github.com/articles/ignoring-files">.gitignore file</a></li>
</ul>


<p><em>Bash</em></p>

<ul>
<li>.bash_profile > .bash_login > .profile</li>
<li>.bash_logout would run when you log out</li>
<li>.bashrc - always get loaded afterwards through the source command</li>
</ul>


<p>subshell is a non-login shell
.bashrc runs every time you pull up a non-login terminal</p>

<p><em>SublimeText2</em></p>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Package installer</a> allows you to install packages for sublime using cmd+shift+p</p>

<p><a href="http://octopress.org/docs/deploying/github/"><em>Deploying to GitHub Pages</em></a></p>

<ul>
<li>I deployed a new octopress <a href="http://ajonas04.github.com/jonas/">test blog</a></li>
<li>Some nice features on github pages that don&#8217;t seem available on heroku</li>
<li>It looks faster, can use the command &#8216;rake deploy&#8217; to deploy</li>
</ul>


<p><em>Fun</em></p>

<p><a href="http://www.mbhs.edu/~bconnell/cgi-bin/anagram.cgi">Anagrams</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading and Resources]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/02/reading-and-resources/"/>
    <updated>2012-10-02T18:01:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/02/reading-and-resources</id>
    <content type="html"><![CDATA[<p><a href="http://ruby4kids.com/ruby4kids/public/web_page/1">ruby explained to a child</a></p>

<p>Smalltalk best practice patterns</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISDay0]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/02/fisday0/"/>
    <updated>2012-10-02T09:25:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/02/fisday0</id>
    <content type="html"><![CDATA[<p><em>Why are we here?</em></p>

<p>-To fall in love with code</p>

<p>-If you give 100% you will change.</p>

<p><em>Programmer(s) of the day</em></p>

<ul>
<li><p><a href="http://www.sdsc.edu/ScienceWomen/lovelace.html">Ada Lovelace</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Charles_Babbage">Charles Babbage and the difference machine</a></p></li>
</ul>


<p><em>CSS Selectors</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#elements, #links{
</span><span class='line'> padding: 25px 0 15px 0;
</span><span class='line'>}
</span><span class='line'>#elements h2{
</span><span class='line'>  font-size: 2em;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Git</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git remote add &lt;remote name&gt; &lt;link&gt;
</span><span class='line'>♕ git remote add group git@github.com:ajonas04/etcetc.com.git</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch 
</span><span class='line'>git co #not ever changing the state of any branch
</span><span class='line'>git pull
</span><span class='line'>git branch -a #shows all local branches
</span><span class='line'>git branch #shows all the remotes</span></code></pre></td></tr></table></div></figure>


<p>can get pull requests from forks as well as the head repo</p>

<p>always want to deal with potential conflicts in the feature branch rather than on master</p>

<p><em>rebase</em> take these commits from master and put them in the right place of x feature branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase master
</span><span class='line'>git co master
</span><span class='line'>git merge add-profile-rexfeng --no-ff #=&gt; merge made by recursive strategy
</span><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>If it&#8217;s forked:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase upstream/master</span></code></pre></td></tr></table></div></figure>


<p>Git rainbow is not good.</p>

<p>squashing commits</p>

<p>go into my fork as a remote</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add ajonas04 git@github.com:ajonas04/students.flatironschool.com.git
</span><span class='line'>git fetch ajonas04
</span><span class='line'>git co feature-push
</span><span class='line'>git rebase origin/master #resolve 
</span><span class='line'>git rebase --continue</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD #=&gt; reset to the state of the repo at the last commit in the repo
</span><span class='line'>git branch -D add_profile_page</span></code></pre></td></tr></table></div></figure>


<p>interactive rebase</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase master -i
</span><span class='line'>#provide a file that shows all the commits in it</span></code></pre></td></tr></table></div></figure>


<p>no fastforward versus fastforward
-maintains the fact that you were once on your own branch</p>

<p>recursion and fast forward
checkout the branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add . #will ADD all files that haven't been previously committed as well as change modified files
</span><span class='line'>git commit -am 'message' #will change files, but not add new ones
</span><span class='line'>git commit -m 'message' #will just add a message</span></code></pre></td></tr></table></div></figure>


<p>Workflow to pull down the most updated verison:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ git fetch upstream
</span><span class='line'>♕ git rebase upstream/master
</span><span class='line'>First, rewinding head to replay your work on top of it...
</span><span class='line'>error: The following untracked working tree files would be overwritten by checkout:
</span><span class='line'>  .DS_Store
</span><span class='line'>  images/.DS_Store
</span><span class='line'>Please move or remove them before you can switch branches.
</span><span class='line'>Aborting
</span><span class='line'>could not detach HEAD
</span><span class='line'>[19:02:04] (master) students.flatironschool.com
</span><span class='line'>♕ rm .DS_Store
</span><span class='line'>♕ rm images/.DS_Store
</span><span class='line'>♕ git rebase upstream/master
</span><span class='line'>♕ git add aviflombaum.html
</span><span class='line'>♕ git rebase --continue
</span><span class='line'>♕ subl .</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcasts]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/01/podcasts/"/>
    <updated>2012-10-01T11:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/01/podcasts</id>
    <content type="html"><![CDATA[<p><a href="http://feeds.feedburner.com/se-radio">Software Engineer Radio</a></p>

<ul>
<li><p><a href="http://www.se-radio.net/2007/04/episode-52-dsl-development-in-ruby/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">DSL Dev in ruby</a></p></li>
<li><p><a href="http://www.se-radio.net/2008/06/episode-102-relational-databases/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">relation DBs</a></p></li>
<li><p><a href="http://www.se-radio.net/2009/06/episode-137-sql-with-jim-melton/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">SQL</a></p></li>
<li><p><a href="http://www.se-radio.net/2009/08/episode-143-api-design-with-jim-des-rivieres/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">API Design</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheat Sheets]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/01/cheatsheets/"/>
    <updated>2012-10-01T11:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/01/cheatsheets</id>
    <content type="html"><![CDATA[<p><a href="http://richardjh.org/blog/sqlite3-cheat-sheet/">SQLite3 cheat sheet</a></p>

<p><a href="http://rogerdudler.github.com/git-guide/">Git cheat sheet</a></p>

<p><a href="http://support.mashery.com/docs/customizing_your_portal/Markdown_Cheat_Sheet/">Markdown language cheat sheet</a>
<a href="http://packetlife.net/media/library/16/Markdown.pdf">Another markdown language cheat sheet</a></p>

<p><a href="http://blog.wiemann.name/mongoid-cheat-sheet">Mongoid cheat sheet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vocab]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/01/vocab/"/>
    <updated>2012-10-01T10:58:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/01/vocab</id>
    <content type="html"><![CDATA[<p>Business Rule
: A business rule defines or constrains one aspect of your business that is intended to assert business structure or influence the behavior of your business.  Business rules often focus on access control issues, for example, professors are allowed to input and modify the marks of the students taking the seminars they instruct, but not the marks of students in other seminars.<a href="http://www.agilemodeling.com/artifacts/businessRule.htm">Reading</a><a href="http://www.businessrulesgroup.org/first_paper/br01c1.htm">Also</a></p>

<p>Cardinality
: The cardinality of a set is a measure of the &#8220;number of elements of the set&#8221;. For example, the set A = {2, 4, 6} contains 3 elements, and therefore A has a cardinality of 3.</p>

<p>Casting
: Treating one data type as another. E.g. in ruby (.to_i) and the cast() function in SQL</p>

<p>Idempotent
: is the property of certain operations in mathematics and computer science, that they can be applied multiple times without changing the result beyond the initial application.</p>

<p>Kata
: is a Japanese word describing detailed choreographed patterns of movements practised either solo or in pairs. The term form is used for the corresponding concept in non-Japanese martial arts in general.</p>

<p>Levels of Abstraction
: Going up levels of abstraction means removing the details.</p>

<p>Recursion
: the process of repeating items in a self-similar way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion.</p>

<p>Referential integrity
: The data in a foreign key needs to match the primary key in some record of the original table. Referential integrity assures there are no broken links between tables. Note that if you delete a record in the original table, for example, you delete one of the customers from the customer table, referential integrity requires that you delete all references to that customer in the order table.</p>

<p>SDK
: software development kit</p>

<p>Tautology
: true by virtue of its logical form alone.</p>

<p>TMTOWTDI
: AKA &#8220;Tim Toady&#8221;. There&#8217;s More Than One Way To Do It.</p>

<p>WIP
: work in progress</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kent Beck]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/29/kent-beck/"/>
    <updated>2012-09-29T23:34:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/29/kent-beck</id>
    <content type="html"><![CDATA[<p><a href="http://blog.iterate.no/2012/06/20/programming-like-kent-beck/">http://blog.iterate.no/2012/06/20/programming-like-kent-beck/</a></p>

<p><a href="http://pragprog.com/screencasts/v-kbtdd/test-driven-development">TDD vids with Kent Beck</a></p>
]]></content>
  </entry>
  
</feed>

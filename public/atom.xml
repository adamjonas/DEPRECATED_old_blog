<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2014-08-15T09:20:54-04:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VIM shortcuts]]></title>
    <link href="http://www.adamjonas.com/blog/vim-shortcuts/"/>
    <updated>2014-08-05T10:53:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/vim-shortcuts</id>
    <content type="html"><![CDATA[<h3>File Search</h3>

<ul>
<li>cntl + p => file search</li>
</ul>


<h3>Nerd Tree</h3>

<ul>
<li><code>go</code> => preview pane</li>
</ul>


<h3>Run the specs</h3>

<ul>
<li><code>\r</code> runs the closest spec</li>
<li><code>\R</code> runs the whole spec suite</li>
</ul>


<h3>cmd + shift + d</h3>

<ul>
<li><code>control + n</code></li>
</ul>


<h3>vimium for life</h3>

<ul>
<li><code>\\f</code> + character you are looking for</li>
<li><code>\\w</code> + word</li>
<li><code>\\e</code> goes to end of words</li>
<li>you get it</li>
</ul>


<h3>Go to line</h3>

<ul>
<li><code>line number + G</code></li>
</ul>


<h3>Tab in or out</h3>

<ul>
<li><code>&gt;&gt;</code> &amp; <code>&lt;&lt;</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expect]]></title>
    <link href="http://www.adamjonas.com/blog/expect/"/>
    <updated>2014-07-30T11:11:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/expect</id>
    <content type="html"><![CDATA[<h3>Intro commands</h3>

<ul>
<li><a href="ftp://ftp.sunet.se/pub/lang/tcl/expect/doc/90min-intro-talk.pdf">summary of commands</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strace]]></title>
    <link href="http://www.adamjonas.com/blog/strace/"/>
    <updated>2014-07-25T13:04:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/strace</id>
    <content type="html"><![CDATA[<h3>Start here:</h3>

<ul>
<li>Greg Price’s excellent blog post <a href="https://blogs.oracle.com/ksplice/entry/strace_the_sysadmin_s_microscope">Strace – The Sysadmin’s Microscope</a>.</li>
<li><a href="http://jvns.ca/blog/categories/strace/">Julia Evans</a> has a lot too.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Docker]]></title>
    <link href="http://www.adamjonas.com/blog/intro-to-docker/"/>
    <updated>2014-07-25T12:49:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/intro-to-docker</id>
    <content type="html"><![CDATA[<h3>Docker API</h3>

<ul>
<li><a href="https://github.com/swipely/docker-api">Checkout</a></li>
</ul>


<h3>Relevant Docker Images</h3>

<ul>
<li><a href="https://github.com/progrium/dokku">dokku</a></li>
</ul>


<h3>Pups</h3>

<ul>
<li><a href="https://github.com/samsaffron/pups">pups</a> is a small library that allows you to automate the process of creating Unix images</li>
</ul>


<h3>Deployments</h3>

<ul>
<li><a href="https://coreos.com/">Core OS</a></li>
</ul>


<h3>Discourse on docker</h3>

<ul>
<li><a href="http://samsaffron.com/archive/2013/11/07/discourse-in-a-docker-container">Sam Saffron explains</a></li>
</ul>


<h3>haproxy</h3>

<ul>
<li><a href="http://www.haproxy.org/">High Performance Load Balancer</a></li>
</ul>


<h3>Testing</h3>

<ul>
<li>testing docker seems tough. Puppet Labs <a href="https://github.com/puppetlabs/beaker/blob/master/spec/beaker/hypervisor/docker_spec.rb">gave it a run</a>.</li>
</ul>


<h3>Intro video</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=Q5POuMHxW-0">Founder of Docker Inc</a></li>
</ul>


<h3>Commands</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -p 3000:3000 -t -i dockerregistry.flatironschool.com/ironboard /bin/bash
</span><span class='line'>source /etc/profile.d/rvm.sh 
</span><span class='line'>rvm reload
</span><span class='line'>vi ironboard/config/database.yml
</span><span class='line'>cd ironboard/
</span><span class='line'>service postgresql start
</span><span class='line'>rake db:migrate
</span><span class='line'>
</span><span class='line'>docker build -t dockerregistry.flatironschool.com/ironboard .
</span><span class='line'>docker run -d -p 3000:3000 dockerregistry.flatironschool.com/ironboard</span></code></pre></td></tr></table></div></figure>


<h3>Notes from <a href="http://vimeo.com/95932458">Docker: The Revolution Will Be Containerized</a></h3>

<ul>
<li>Containers are just other Linux processes on the host not virtualized calls</li>
<li>The only performance decrease you see is Linux asking whether it is allowed to access this file - share a kernel with the host</li>
<li><p>Not nested virtualization</p>

<ul>
<li>this would be slow</li>
<li>no device emulation, which makes it faster</li>
</ul>
</li>
<li><p>Can be used as a light weight vm but that&#8217;s not the only way</p></li>
<li><p><strong><code>Chroot</code> on steroids?</strong></p>

<ul>
<li><p>(From <a href="http://en.wikipedia.org/wiki/Chroot">Wikipedia</a>) A <code>chroot</code> on Unix operating systems is an operation that changes the apparent root directory for the current running process and its children.</p></li>
<li><p>A chroot environment can be used to create and host a separate virtualized copy of the software system. This can be useful for:</p>

<ul>
<li><p><strong>Testing and development</strong></p>

<ul>
<li>A test environment can be set up in the chroot for software that would otherwise be too risky to deploy on a production system.</li>
</ul>
</li>
<li><p><strong>Dependency control</strong></p>

<ul>
<li>Software can be developed, built and tested in a chroot populated only with its expected dependencies. This can prevent some kinds of linkage skew that can result from developers building projects with different sets of program libraries installed.</li>
</ul>
</li>
<li><p><strong>Compatibility</strong></p>

<ul>
<li>Legacy software or software using a different <a href="http://en.wikipedia.org/wiki/Application_binary_interface">application binary interface</a> must sometimes be run in a chroot because their supporting libraries or data files may otherwise clash in name or linkage with those of the host system.</li>
</ul>
</li>
<li><p><strong>Recovery</strong></p>

<ul>
<li>Should a system be rendered unbootable, a chroot can be used to move back into the damaged environment after bootstrapping from an alternate root file system (such as from installation media, or a Live CD).</li>
</ul>
</li>
<li><p><strong>Privilege separation</strong></p>

<ul>
<li>Programs are allowed to carry open file descriptors (for files, pipelines and network connections) into the chroot, which can simplify jail design by making it unnecessary to leave working files inside the chroot directory. This also simplifies the common arrangement of running the potentially vulnerable parts of a privileged program in a sandbox, in order to pre-emptively contain a security breach. Note that chroot is not necessarily enough to contain a process with root privileges.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Cgroups</strong></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Cgroups">Cgroups</a>)is a Linux kernel feature to limit, account, and isolate resource usage (CPU, memory, disk I/O, etc.) of process groups.</li>
<li>Cgroups also provides namespace isolation to completely isolate application&#8217;s view of the operating environment, including process trees, network, user ids and mounted file systems.</li>
</ul>
</li>
<li><p><strong>LXC (LinuX Containers)</strong></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/LXC">LXC</a> provides operating system-level virtualization through a virtual environment that has its own process and network space, instead of creating a full-fledged virtual machine.</li>
<li>The Linux kernel comprises cgroups for resource isolation (CPU, memory, block I/O, network, etc.) that does not require starting any virtual machines.</li>
<li>LXC combines cgroups and namespace support to provide an isolated environment for applications. Docker can also use LXC as one of its execution drivers, enabling image management and providing deployment services.</li>
</ul>
</li>
<li><p><strong>CoreOS</strong></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/CoreOS">CoreOS</a> is an open source lightweight operating system based on the Linux kernel and designed for providing infrastructure to clustered deployments, while focusing on automation, ease of applications deployment, security, reliability and scalability. As an operating system, CoreOS provides only the minimal functionality required for deploying applications inside software containers, together with built-in mechanisms for service discovery and configuration sharing.</li>
</ul>
</li>
</ul>


<h3>Linking Multiple Apps</h3>

<ul>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing With Logan]]></title>
    <link href="http://www.adamjonas.com/blog/testing-with-logan/"/>
    <updated>2014-07-25T12:37:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/testing-with-logan</id>
    <content type="html"><![CDATA[<h3>Receive Message Chain</h3>

<ul>
<li>In lieu of the depreciated <code>stub_chain</code> there is now <a href="https://github.com/rspec/rspec-mocks/pull/467"><code>receive_message_chain</code></a>.</li>
</ul>


<figure class='code'><figcaption><span>receive_message_chain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">allow</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive_message_chain</span><span class="p">(</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">double</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">foo</span><span class="o">.</span><span class="n">bar</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:bazz</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="sr">/adfads/</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Yielding multiple variables</h3>

<ul>
<li><code>allow(fake_container).to receive(:attach).and_yield("stdout", "some message\n")</code></li>
</ul>


<h3><code>expect_any_instance_of</code></h3>

<ul>
<li>expect_any_instance_of(Object).to receive(:subscribe) <a href="http://stackoverflow.com/a/17577942/1496757">isn&#8217;t very well documented</a>, but <a href="http://rubydoc.info/gems/rspec-mocks/RSpec/Mocks/ExampleMethods:expect_any_instance_of">it&#8217;s in there</a>.</li>
</ul>


<h3>Testing Sidekiq</h3>

<ul>
<li><a href="https://github.com/mperham">Mike Perham</a> did a nice job documenting the <a href="https://github.com/mperham/sidekiq/wiki/Testing">testing options for workers</a>.

<h3>Detecting pending migrations</h3></li>
<li>A neat little trick to see if there are pending migrations <code>rake db:migrate:status</code>. This must have been built into rails because I see a message every time I haven&#8217;t run a migration and I am running my test suite. It&#8217;s cool nonetheless. <a href="http://stackoverflow.com/questions/1349047/show-pending-migrations-in-rails">Source</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Root Route Takes Parameters]]></title>
    <link href="http://www.adamjonas.com/blog/root-route-takes-parameters/"/>
    <updated>2014-07-16T17:51:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/root-route-takes-parameters</id>
    <content type="html"><![CDATA[<h3>Looking for a hacky way to hard code your root path?</h3>

<p>Look no further: <code>root to: 'controller#action', hello_id: 1, finder_id: 1, laser_id: 1, sharks_id: 4</code> <a href="http://stackoverflow.com/a/22923920/1496757">via</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbing Out Faraday]]></title>
    <link href="http://www.adamjonas.com/blog/stubbing-out-faraday/"/>
    <updated>2014-07-15T11:49:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/stubbing-out-faraday</id>
    <content type="html"><![CDATA[<h3>Webmock to disable net connections</h3>

<ul>
<li><a href="https://github.com/bblimke/webmock#real-requests-to-network-can-be-allowed-or-disabled">Just toss it in the <code>spec_helper</code></a>

<ul>
<li><strong><em>Note</em></strong> that I had to use <code>WebMock.disable_net_connect!(:allow_localhost =&gt; true)</code> in the cucumber <code>support/env.rb</code> because my local host wasn&#8217;t being allowed to run on the ci. <a href="https://github.com/bblimke/webmock/issues/284">picked this up from issue #284 on webmocks</a></li>
</ul>
</li>
</ul>


<h3>Rspec Mocks</h3>

<ul>
<li>Can use the <a href="https://github.com/rspec/rspec-mocks#method-stubs">new syntax</a> or mocha.</li>
</ul>


<h3>To stub it out I could either</h3>

<figure class='code'><figcaption><span>These Both Work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow</span><span class="p">(</span><span class="no">MyService</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow_any_instance_of</span><span class="p">(</span><span class="no">MyService</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:publish</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Really cool. The <code>allow_any_instance_of()</code> is pretty sweet to reference an unnamed instance of a class. Pretty sweet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[web sockets versus nginx push state versus action_controller::live]]></title>
    <link href="http://www.adamjonas.com/blog/web-sockets-versus-nginx-push-state-versus-action-controller-live/"/>
    <updated>2014-07-02T17:52:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/web-sockets-versus-nginx-push-state-versus-action-controller-live</id>
    <content type="html"><![CDATA[<h2>The Decision</h2>

<h2>Nginx Push State</h2>

<p>https://gist.github.com/loganhasson/c8bfff2767ea74187cf0</p>

<h2>Enter Heroku</h2>

<p>Clearly keeping a threaded server open with the warning below is not ideal:</p>

<blockquote><p>Long-polling and streaming responses</p></blockquote>

<p>Cedar supports HTTP 1.1 features such as long-polling and streaming responses. An application has an initial 30 second window to respond with a single byte back to the client. However, each byte transmitted thereafter (either received from the client or sent by your application) resets a rolling 55 second window. If no data is sent during the 55 second window, the connection will be terminated.</p>

<p>If you’re sending a streaming response, such as with server-sent events, you’ll need to detect when the client has hung up, and make sure your app server closes the connection promptly. If the server keeps the connection open for 55 seconds without sending any data, you’ll see a request timeout.</p>

<ul>
<li>There are some solutions out there:

<ol>
<li><a href="http://stackoverflow.com/questions/17285961/http-streaming-connection-sse-client-disconnect-not-detected-with-sinatra-thin">Like</a></li>
<li><a href="https://gist.github.com/Funfun/6867167">Or</a></li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presenter Objects]]></title>
    <link href="http://www.adamjonas.com/blog/presenter-objects/"/>
    <updated>2014-06-17T18:49:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/presenter-objects</id>
    <content type="html"><![CDATA[<h3>From our PR thread</h3>

<ul>
<li><p>A presenter object is a simply a PORO (plain ol&#8217; ruby object), constructed by the controller out of the data of one or more models, whose attributes serve the view
layer. So in our case we give a view a <code>LessonPresenter</code> that has a <code>css_class</code> attribute and remove all decision making from the view layer (which is the ideal goal).</p></li>
<li><p>It&#8217;s not a &#8220;service&#8221; object, it&#8217;s a presenter so it would go in the <code>presenters</code> folder. This is also sometimes called a &#8220;view model&#8221; or a &#8220;view object&#8221;. The word &#8220;presenter&#8221; is overloaded a lot.</p></li>
<li><p>This an interesting read on a few <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/"><code>model refactoring patterns</code></a>:</p></li>
<li><p>So instead of a collection of Lessons at the view level, you&#8217;d be dealing with a collection of LessonPresenters or similar. Alternatively, you can just put that method on the lesson object itself, which is simpler and more straightforward but not strictly Single Responsibility Principle/Seperation of Concerns/Model View Controller compliant. tradeoffs.</p></li>
</ul>


<blockquote><p>Is it a terrible idea to have LessonPresenter inherit from Lesson?</p></blockquote>

<p>A: Strictly speaking in terms of OO, inheritance describes an &#8220;is-a&#8221; relationship, and you can&#8217;t say that a lessonpresenter is a lesson, so introducing an inheritance chain is probably inappropriate. There is some duplication to this pattern. Typically a viewmodel exposes only the attributes needed to satisfy the needs of the view, and you&#8217;d fill them in from the corresponding model on construction.</p>

<p>While this seems on the surface to violate DRY (and be duplicate work), i&#8217;d argue that it&#8217;s no more repetition than creating factories with the same attributes as models. Separate objects for separate purposes.</p>

<p>You could get away with hanging a lesson off of the presenter so that you could access it at the view level, but that&#8217;s a law of demeter violation and breaks encapsulation.</p>

<p>You could do the method_missing bit and delegate to the object. that&#8217;s slick and rubyish. Where that falls apart though is implementing this pattern across more than one model. Because we&#8217;re not really building a &#8220;presenter for a lesson&#8221;, we&#8217;re building a presentation object for a view that represents the model data behind it.</p>

<p>Already this answer is complicated, but there&#8217;s just always a lot of decisions that go into making architectural choices. It may be the case that for this one thing, creating a method on the Lesson itself is the &#8220;simplest thing that could possibly work&#8221; and satisfies one of our tenets of agile, and then we delay the big architectural choice until we need a second or third thing.</p>

<p>I support whichever choice you make (probably) as long as you have unit tests to support later refactoring :smile_cat:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[okrs for engineers]]></title>
    <link href="http://www.adamjonas.com/blog/okrs-for-engineers/"/>
    <updated>2014-06-17T18:05:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/okrs-for-engineers</id>
    <content type="html"><![CDATA[<h3>Notes</h3>

<ul>
<li>lead developer&#8217;s OKRs mostly product focused

<ul>
<li>and their product responsibilites become one piece of their bonus compensation (also would include overall company success (no bonus is the company didn&#8217;t make money)).</li>
</ul>
</li>
<li>break to feature or objective into smaller product pieces for engineers if possible.</li>
</ul>


<p>OKRs for engineers below lead devs are difficult. Goals become more task oriented. E.g.</p>

<ul>
<li>2 ruby meetups a month</li>
<li>satisfactory 360 feedback</li>
<li>biweekly one on ones (address concerns of manager)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cucumber trick shots]]></title>
    <link href="http://www.adamjonas.com/blog/cucumber-trick-shots/"/>
    <updated>2014-05-14T13:34:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/cucumber-trick-shots</id>
    <content type="html"><![CDATA[<h3>Remove unused step definitions</h3>

<ul>
<li><code>cucumber --dry-run -f stepdefs</code> will show a list of all unused step definitions <a href="http://stackoverflow.com/a/9164676/1496757">via</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rspec keywords]]></title>
    <link href="http://www.adamjonas.com/blog/rspec-keywords/"/>
    <updated>2014-05-08T14:24:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/rspec-keywords</id>
    <content type="html"><![CDATA[<p>Feedback on my misuse of rspec keywords (and <code>context</code> in particular):</p>

<ul>
<li><code>Context</code> describes an execution context, or an arrangement of the system, not an action.</li>
<li>It helps to always think of <code>context</code> blocks in terms of &#8220;when &#8230;&#8221; and it is usual to begin <code>contexts</code> with a when.</li>
</ul>


<p>The layout is like this:</p>

<ul>
<li><code>describe</code> some system/class/function

<ul>
<li><code>context</code> &#8220;when condition A is true about the system&#8221;

<ul>
<li>it &#8220;behaves thusly&#8221;</li>
</ul>
</li>
<li>context &#8220;when condition B is true about the system&#8221;

<ul>
<li>it &#8220;behaves thusly&#8221;</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>A classic example might be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">SomeController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;GET new&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when logged in&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;renders this page&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when admin&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;renders this other page&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when visitor&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;redirects to login&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 CSRF handling]]></title>
    <link href="http://www.adamjonas.com/blog/rails-4-csrf-handling/"/>
    <updated>2014-05-01T11:19:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/rails-4-csrf-handling</id>
    <content type="html"><![CDATA[<h2>Setup</h2>

<p>Right now we are building &#8220;Ironboard&#8221; (title is WIP) &#8211; an application that makes makes consuming prework a breeze for students and creating and organizing prework a breeze for teachers. This application is going to fit into a workflow that kicks off when a student pays their deposit. The short version is that another internal app is going to ping an endpoint on Ironboard, which internally will generate an email invitation and enroll that student in course so that the instructor can track their progress.</p>

<h2>CSRF</h2>

<p>I&#8217;ve read the <a href="http://guides.rubyonrails.org/security.html">rails security guide</a>. I searched <a href="http://stackoverflow.com/questions/16258911/rails-4-authenticity-token">stackoverflow</a> and quite frankly the documentation for handling CSRF in rails 4 is sucky. <a href="http://alexcoco.com/forgery-protection-strategy/">Alex Coco</a> seems to have done the most documentation here. Buried in all of this is the <a href="http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails/">proper way to handle cross-domain requests</a> in 2011:</p>

<blockquote><p>Users can override this behaviour by overriding <code>handle_unverified_request</code> in their own controllers.</p></blockquote>

<p>Most answers that are out there have to do with disabling the <code>protect_from_forgery</code> method in a specfic controller for a specific action. This hides csrf vulnerability, but I&#8217;m not sure that disabling token authenticity makes things any better. Why use <code>protect_from_forgery except: :ping_from_registrar</code> when we could use the <code>handle_unverified_request</code></p>

<p>We ended up using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">FooController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">skip_before_action</span> <span class="ss">:authenticate_user!</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">handle_unverified_request</span>
</span><span class='line'>    <span class="n">authenticate_token</span> <span class="o">||</span> <span class="n">render_unauthorized</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate_token</span>
</span><span class='line'>    <span class="n">authenticate_with_http_token</span> <span class="k">do</span> <span class="o">|</span><span class="n">token</span><span class="p">,</span> <span class="n">options</span><span class="o">|</span>
</span><span class='line'>      <span class="n">token</span><span class="o">.</span><span class="n">eql?</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;API_TOKEN&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">render_unauthorized</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;WWW-Authenticate&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Token realm=&quot;Application&quot;&#39;</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="s1">&#39;Bad credentials&#39;</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">401</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this is pretty awesome.</p>

<p><a href="http://stackoverflow.com/questions/12761544/rspec-request-how-to-set-http-authorization-header-for-all-requests">This was helpful</a> as was <a href="http://blog.envylabs.com/post/75521798481/token-based-authentication-in-rails">this</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[user stories]]></title>
    <link href="http://www.adamjonas.com/blog/user-stories/"/>
    <updated>2014-04-14T10:38:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/user-stories</id>
    <content type="html"><![CDATA[<p>Each user story should INVEST</p>

<p>I - <strong>Independent</strong> The user story should be self-contained, in a way that there is no inherent dependency on another user story.
N - <strong>Negotiable</strong>  User stories, up until they are part of an iteration, can always be changed and rewritten.
V - <strong>Valuable</strong>  A user story must deliver value to the end user.
E - <strong>Estimable</strong> You must always be able to estimate the size of a user story.
S - <strong>Sized</strong> appropriately or Small  User stories should not be so big as to become impossible to plan/task/prioritize with a certain level of certainty.
T - <strong>Testable</strong>  The user story or its related description must provide the necessary information to make test development possible.</p>

<blockquote><p>Iteration 0 -> is foundational work that is performed prior to development starting.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[feyonce]]></title>
    <link href="http://www.adamjonas.com/blog/feyonce/"/>
    <updated>2014-03-27T15:43:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/feyonce</id>
    <content type="html"><![CDATA[<h2>cancan&#8217;s bitmask</h2>

<ul>
<li><p><a href="https://github.com/ryanb/cancan/issues/145">bitmask</a></p></li>
<li><p>by the way, it appears that cancan has been abandoned. We ended up rolling out our authorization.</p></li>
</ul>


<h2>devise</h2>

<ul>
<li>You can override the default behaviour by creating an after_sign_in_path_for <a href="https://github.com/plataformatec/devise/wiki/How-To%3A-Redirect-to-a-specific-page-on-successful-sign-in-and-sign-out">via</a></li>
</ul>


<h3>Switch to omniauth</h3>

<ul>
<li>we made a major overhaul by switching to omniauth rather than using the devise email &amp; password.

<ul>
<li>As per the <a href="https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview#using-omniauth-without-other-authentications">omniauth wiki</a> I needed to rebuild many of the paths that devise had created for us via the <code>registerable</code> and <code>Database Authenticatable</code> modules and reconfigure the appropriate controllers as well.</li>
<li>To its credit, the <code>Devise::TestHelpers, type: :controller</code> held up through the transition, which was a big help.</li>
</ul>
</li>
</ul>


<h3>Bundle clean is the jam</h3>

<ul>
<li><code>bundle clean --force</code></li>
<li><code>bundle update</code>
Saved my @ss.</li>
</ul>


<h3>Before block versus let in rspec</h3>

<ul>
<li>use <code>let</code> to define all of the dependent objects, and to use <code>before do</code> to setup needed configuration or any mocks/stubs needed by the examples. <a href="http://stackoverflow.com/a/5359979/1496757">via the comments section</a></li>
</ul>


<h3>Transient Factory Girl Properties</h3>

<p>I needed a way to pass in some parameters into my factory. Enter transient properties.</p>

<ul>
<li><a href="http://robots.thoughtbot.com/factory-girl-2-2-your-new-best-friend">This helped</a></li>
<li><a href="http://stackoverflow.com/a/9693284/1496757">And</a></li>
<li><a href="http://rubydoc.info/gems/factory_girl/2.3.2/file/GETTING_STARTED.md#Transient_Attributes">And the docs</a></li>
</ul>


<figure class='code'><figcaption><span>The Eventual Code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:track_with_lessons</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">ignore</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">lesson_count</span> <span class="mi">3</span>
</span><span class='line'>    <span class="n">topic_count</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">track</span><span class="p">,</span> <span class="n">evaluator</span><span class="o">|</span>
</span><span class='line'>    <span class="n">evaluator</span><span class="o">.</span><span class="n">topic_count</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">track</span><span class="o">.</span><span class="n">add_topic</span><span class="p">(</span><span class="n">create</span><span class="p">(</span><span class="ss">:topic_with_lessons</span><span class="p">,</span> <span class="n">lesson_count</span><span class="p">:</span> <span class="n">evaluator</span><span class="o">.</span><span class="n">lesson_count</span><span class="p">))}</span>
</span><span class='line'>    <span class="n">track</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A gotcha: The <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#transient-attributes">getting started readme</a> was outdated so I was trying to use <code>transient do</code> which was not working. It appears that this will be fixed in the next release&#8230;</p>

<h3>Capybara within block</h3>

<p>When searching for an element with a div like <code>within('div#first.drawer') do</code> it truly means within, not like this can be the same element you are looking for, it has to be nested inside this element.</p>

<h3>Testing with JSON</h3>

<p><a href="http://kakubei.blogspot.com/2013/05/testing-controller-with-json-data-draft.html">Found this</a> to be a good place to start but I couldn&#8217;t get his method to actually work.</p>

<figure class='code'><figcaption><span>What he did</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;updates empty summary field&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@incoming_params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@dvd</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>  <span class="vi">@incoming_params</span><span class="o">[</span><span class="ss">:summary</span><span class="o">]</span> <span class="o">=</span>  <span class="s1">&#39;some summary&#39;</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;entry/update&#39;</span><span class="p">,</span> <span class="vi">@incoming_params</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>  <span class="vi">@entry</span><span class="o">.</span><span class="n">reload</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="vi">@entry</span><span class="o">.</span><span class="n">summary</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s1">&#39;some summary&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>This is what worked for me</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;POST #topic_order&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;saves a new topic order&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in_teacher</span>
</span><span class='line'>    <span class="n">track</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:track_with_lessons</span><span class="p">)</span>
</span><span class='line'>    <span class="n">original_order</span> <span class="o">=</span> <span class="n">track</span><span class="o">.</span><span class="n">topic_order</span>
</span><span class='line'>    <span class="n">post</span> <span class="ss">:topic_order</span><span class="p">,</span> <span class="s2">&quot;data&quot;</span><span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;topic_order&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">track</span><span class="o">.</span><span class="n">topic_order</span><span class="o">.</span><span class="n">last</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">track</span><span class="o">.</span><span class="n">topic_order</span><span class="o">.</span><span class="n">first</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;track_id&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">track</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">},</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span>
</span><span class='line'>    <span class="n">track</span><span class="o">.</span><span class="n">reload</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">track</span><span class="o">.</span><span class="n">topic_order</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">original_order</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[service objects versus concerns]]></title>
    <link href="http://www.adamjonas.com/blog/service-objects-versus-concerns/"/>
    <updated>2014-02-25T15:03:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/service-objects-versus-concerns</id>
    <content type="html"><![CDATA[<p><a href="http://www.adamjonas.com/blog/service-objects/">I wrote this</a> last May. Obviously, <a href="https://github.com/scottcreynolds">@scottcreynolds</a> doesn&#8217;t think it sunk in.</p>

<p>We were writing a URL sanitizer that stripped the user&#8217;s URL input of <code>http://</code> and <code>www</code> to store in the DB. Because we were using it for multiple models. I had viewed this &#8220;stipper&#8221; method as a behavior and thus had thought it belonged in the the DHH blessed concerns folder.</p>

<p>Scott disagreed:</p>

<blockquote><p>A concern or mixin should describe a <strong>behavior</strong> that is being given to the object. That&#8217;s the &#8220;able&#8221; nomenclature. A behavior is something like &#8220;it can support tags&#8221; or &#8220;it can be authenticated with a devise token&#8221;.</p></blockquote>

<p>What I should have seen was this is a utility method. He writes:</p>

<blockquote><p>What was being created here is a utility or service method, intended to be used across any entity in the system that chooses to sanitize a url. This is not a behavior that the object has. Yes, you could go so far as to say &#8220;this object can sanitize its urls&#8221; but that&#8217;s a bit of semantic gymnastics when what we&#8217;re really describing is a <strong>service object</strong> - something that provides a service to any part of the system that requires it. In this case, scrubbing user input.</p></blockquote>

<p>Something that may have helped me futher understand this was thinking about who was responsible for this sanitization. Is the Event object responsible for url sanitization?</p>

<blockquote><p>It might seem like a fine hair to split, but if we examine further, we see that we weren&#8217;t really adding a common behavior to the <code>event</code> and <code>admin_user</code> classes.</p>

<p>The <code>parseable</code> module as designed only handled the case where the thing it was being mixed into had a field called <code>website</code>. Including it in <code>event</code> would have done absolutely nothing because that field doesn&#8217;t exist. What an <code>event</code> does have, however, is a <code>registration_link</code>. Already, we can see that we haven&#8217;t truly identified a common <em>behavior</em> so much as a common <em>need</em> - hence a service object.</p>

<p>Finally, just in the naming we can tell that we&#8217;re not really describing what we mean. If a class includes a module <code>parseable</code>, that include line, in English, reads <code>an admin user is parseable</code>. To me that means something significantly different than <code>before save, strip some characters out of a field</code>. The module being described didn&#8217;t do what it claimed to do by its name.</p></blockquote>

<p>These things seem small, but they&#8217;re extremely important to care about because code bases grow and all you have in a dynamic language is your tests and your naming to help you understand the system a year from now. I could show you a rails project I just came into where no care was given to naming and structure, and you could spend days following the labyrinth of modules and classes and end up hoping the Minotaur finds you and eats you and spares you the hassle of figuring out what&#8217;s going on.</p>

<p>So in short, use concerns when extracting common behavior (active record finders, authentication, etc). Use service objects when extracting common needs.</p>

<p>Finally, a note on tests. It&#8217;s great we&#8217;re doing the cucumber, and doing it well, but we still need tests at model and controller levels too. If you make a new class/module it should have a test file and some tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pow config]]></title>
    <link href="http://www.adamjonas.com/blog/pow-config/"/>
    <updated>2014-02-19T16:01:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/pow-config</id>
    <content type="html"><![CDATA[<p>I had a bunch of issues getting pow up and running after I upgraded to Mavricks. I ended up not installing via the <code>curl</code> method that the <a href="http://pow.cx/">37signals suggests</a> as it wasn&#8217;t recognizing my rbenv and was running on my system ruby. So I uninstalled and tried it with <code>homebrew</code>, which required a different path in my <code>.powconfig</code> file. Just like the <a href="https://github.com/basecamp/pow/wiki/Troubleshooting#rbenv">troubleshooter</a> said it would via the <a href="https://github.com/basecamp/pow/issues/202#issuecomment-2640707">github issue</a>, this worked.</p>

<p>Final code: <code>export PATH="/usr/local/opt/rbenv/shims:/usr/local/opt/rbenv/bin:$PATH"</code></p>

<p>Boom! Smack! Pow!</p>

<h2>UPDATE (Summer &#8216;14):</h2>

<p>The new hotness is <a href="https://ngrok.com/">ngrok</a>. An easier way to expose a local web server to the internet. It&#8217;s the jam.</p>

<ul>
<li>Works with <code>ngrok localhost:3000</code> for a rails app for example.</li>
<li>Then open it up on the provided url and you&#8217;ve got yourself a stew.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber with Scott]]></title>
    <link href="http://www.adamjonas.com/blog/cucumber-with-scott/"/>
    <updated>2014-02-17T15:09:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/cucumber-with-scott</id>
    <content type="html"><![CDATA[<p>The point of BDD is to build a system form a perspective of a user, rather than just as a developer.</p>

<h2>Login</h2>

<p>As a partner, I need to be able to login, so that I can update my upcoming events.</p>

<p>Need to deliver a story and prove that it works.</p>

<p>An integration test is any test that cross the boundries of a system</p>

<h3>Why cucumber</h3>

<ul>
<li>Gherkin language for feature files</li>
<li>rspec for tests</li>
<li>capybara to drive the browser</li>
</ul>


<p>The tools are the same just when with gherkin thrown on top
  - cucumber is platform and language agnostic</p>

<p>So a problem I have is when to test built in features of the framework or gem.</p>

<h2>Given, When, Then</h2>

<ul>
<li><p>same as Arrage, Act, Assert (which is what ALL tests do) in people talk</p></li>
<li><p>Arrage</p>

<p><code>let(:something) {do_something}</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">arrange_things</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Act, and Assert</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;does something when I do this&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">do_a_thing</span> <span class="c1">#=&gt; act</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">that_thing</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">something</span><span class="p">)</span> <span class="c1">#=&gt; assert</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Misc</h3>

<ul>
<li>user regex in the step file if you are going to reuse it</li>
<li>acceptance tests should be used to test large swatches rather than every permuation</li>
</ul>


<h3>tags</h3>

<ul>
<li><code>@pause</code> like a binding</li>
<li><code>@wip</code> won&#8217;t run unless specified to run</li>
<li>custom tags work too, so even then you&#8217;d run it with <code>cucumber -t @jonas</code></li>
<li>or you can run multiple tags at one time, e.g. <code>cucumber --tags @billing,@important</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber]]></title>
    <link href="http://www.adamjonas.com/blog/cucumber/"/>
    <updated>2014-02-17T11:34:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/cucumber</id>
    <content type="html"><![CDATA[<h2>Cucumber</h2>

<p>Cucumber is a BDD tool that supports Outside-in development by running plain text features or user stories as acceptance tests.</p>

<ul>
<li><a href="http://blog.codeship.io/2013/04/30/BDD-With-Cucumber.html">Intro screencast</a></li>
<li><a href="http://35qk152ejao6mi5pan29erbr9.wpengine.netdna-cdn.com/wp-content/uploads/2011/08/Cucumber-Regular-Expressions-Cheat-Sheet.pdf">cucumber regex cheatsheet</a></li>
<li><a href="http://rubylearning.com/blog/2010/10/05/outside-in-development/">An Introduction to Outside-in Development</a></li>
</ul>


<h3>Features</h3>

<p>Let’s create our first feature. The anatomy of a feature is the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: [feature]
</span><span class='line'>  In order to [business value]
</span><span class='line'>  As a [role]
</span><span class='line'>  I want to [some action]</span></code></pre></td></tr></table></div></figure>


<p>Notice how a feature includes who, what and most importantly: <strong><em>why</em></strong>.</p>

<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: Manage Articles
</span><span class='line'>  In order to make a blog
</span><span class='line'>  As an author
</span><span class='line'>  I want to create and manage articles</span></code></pre></td></tr></table></div></figure>


<h3>Scenarios</h3>

<p>There will be many scenarios accompanying a feature. Scenarios will follow the four stages of testing: setup, exercise, verify and teardown. A simple scenario looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Given [context]
</span><span class='line'>When I do [action]
</span><span class='line'>Then I should see [outcome]</span></code></pre></td></tr></table></div></figure>


<ul>
<li> The <code>Given</code> step is where you set up the context of your scenario. Every scenario starts with a blank slate, so it is important to create a state in your application for example by creating data in the database, or by navigating to a specific page.</li>
<li> The <code>When</code> step is where you exercise the application in order to accomplish what needs testing. This is usually where you might fill in forms, press buttons, click links, or otherwise interact with the system in some way.</li>
<li> The <code>Then</code> step is where you verify the result, and it’s where we check that the correct pages are rendered, that we see a success or error message, or anything that could help us verify that the prior action was successful.</li>
<li> The teardown, is taken care of by cucumber automatically.</li>
</ul>


<p>For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: Articles List
</span><span class='line'>  Given I have articles titled Pizza, Breadsticks
</span><span class='line'>  When I go to the list of articles
</span><span class='line'>  Then I should see "Pizza"
</span><span class='line'>  And I should see "Breadsticks"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: User signs up with valid data
</span><span class='line'>  When I go to the sign up page
</span><span class='line'>  And I fill in "Email" with "email@person.com"
</span><span class='line'>  And I fill in "Username" with "user"
</span><span class='line'>  And I fill in "Password" with "password"
</span><span class='line'>  And I fill in "Confirm password" with "password"
</span><span class='line'>  And I press "Sign up"
</span><span class='line'>  Then I should see "instructions for confirming"
</span><span class='line'>  And a confirmation message should be sent to "email@person.com"</span></code></pre></td></tr></table></div></figure>


<p>We can also test a user attempting to sign up without filling in all the fields:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Scenario: User tries to sign up without a twiddr name
</span><span class='line'>  When I go to the sign up page
</span><span class='line'>  And I fill in "Email" with "email@person.com"
</span><span class='line'>  And I fill in "Password" with "password"
</span><span class='line'>  And I fill in "Confirm password" with "password"
</span><span class='line'>  And I press "Sign up"
</span><span class='line'>  Then the "Username" field should have the "can't be blank" error</span></code></pre></td></tr></table></div></figure>


<h3>Tags</h3>

<p>  <code>cucumber --tags @billing --tags @important</code> -> Runs the first scenario (Scenarios with @important AND @billing)
  <code>cucumber --tags @billing,@important</code> -> Runs both scenarios (Scenarios with @important OR @billing)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wit]]></title>
    <link href="http://www.adamjonas.com/blog/wit/"/>
    <updated>2014-02-13T14:15:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/wit</id>
    <content type="html"><![CDATA[<h2>.ruby-version &amp; rbenv</h2>

<ul>
<li>so rbenv now does support a ruby version file but doesn&#8217;t support fuzzy matching. <a href="http://stackoverflow.com/questions/18634933/how-can-i-make-rbenv-recognise-1-9-3-p-ruby-versions">See</a>.</li>
</ul>


<h2>Multipart = true</h2>

<ul>
<li>HTML forms provide two methods of encoding. The default is application/x-www-form-urlencoded, which is more or less the same as a query string on the end of the URL. The other, multipart/form-data, is a more complicated encoding but one which allows entire files to be included in the data. <a href="http://stackoverflow.com/a/4526286/1496757">via</a></li>
</ul>


<h2>Devise</h2>

<ul>
<li>had trouble with validation requirements built into the <code>validatable</code> module and configuring it to allow a user to edit their profile without requiring a password, which involved destroying the session because the salted password had changed. I ended up ripping it out and going with a <code>validates_presence_of :password, :on =&gt; :create</code> instead.

<ul>
<li><a href="https://github.com/plataformatec/devise/wiki/How-To%3a-Allow-users-to-edit-their-account-without-providing-a-password">I had attempted this</a>, but it seemed like a lot of work.</li>
</ul>
</li>
</ul>


<h2>Factory Girl Associations</h2>

<p><a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations">From the docs</a> it&#8217;s possible to set up associations within factories. If the factory name is the same as the association name, the factory name can be left out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">author</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To not save the associated object, specify strategy: <code>:build</code> in the factory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">association</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This does <em>not</em> work; causes author_id to be nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">author</span> <span class="ss">strategy</span><span class="p">:</span> <span class="ss">:build</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Staging assets broken</h2>

<p>Racked my brain (and everyone elses) over this one&#8230; It ended up I hadn&#8217;t added the <code>rails_12factor</code> gem to staging though I had added that environment.</p>

<h2>Capybara cheatsheet</h2>

<p><a href="https://gist.github.com/zhengjia/428105">Cheatsheet</a></p>

<h2>Server TimeZone</h2>

<ul>
<li>had a feature that pulls events once they have passed. Heroku&#8217;s time zone is by default set to <code>UTC</code>. So I did two things:

<ol>
<li>heroku config:add TZ=&#8221;America/New_York&#8221; as described <a href="http://blog.pardner.com/2012/08/setting-the-default-time-zone-for-a-heroku-app/">here</a>.</li>
<li>Set <code>config.time_zone = 'Eastern Time (US &amp; Canada)'</code> in <code>application.rb</code> as described in the <a href="http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html">rails docs</a>.</li>
</ol>
</li>
</ul>


<h3>Fragment Caching</h3>

<ul>
<li><p>Had an issue expiring the fragment cache. The issue was that when you cache the fragment in your view, a cache digest is being added to the cache key (views/all_available_releases/41cb0a928326986f35f41c52bb3d8352), but <code>expire_fragment</code> is not using the digest (views/all_available_releases).</p></li>
<li><p>By adding <code>skip_digest: true</code> to the cache call in the view it should prevent the digest from being used.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% cache </span><span class="s2">&quot;all_available_releases&quot;</span><span class="p">,</span> <span class="n">skip_digest</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;% @releases.each do |release| %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% cache(release) </span><span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">   &lt;html code with&gt;</span>
</span><span class='line'>   <span class="o">&lt;%</span><span class="n">ruby</span> <span class="n">code</span> <span class="vi">@release</span><span class="o">.</span><span class="n">name</span> <span class="n">blah</span> <span class="n">blah</span> <span class="n">blah</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%end%&gt;</span>
</span><span class='line'> <span class="o">&lt;%</span><span class="k">end</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;%end%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Cache digests are only intended to be used with automatic cache expiration. If you need to manually expire cache keys then you can&#8217;t use cache digests.</li>
<li>Saved by <a href="http://stackoverflow.com/a/17619414/1496757">stackoverflow</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

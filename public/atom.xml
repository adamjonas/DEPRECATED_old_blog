<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2013-01-22T09:33:19-05:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion Day 1]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-day-1/"/>
    <updated>2013-01-21T09:45:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-day-1</id>
    <content type="html"><![CDATA[<h3>Course Goals</h3>

<ul>
<li>Objective-c Conventions</li>
<li>Using C Libraries</li>
<li>Platform Idioms</li>
<li>Key concepts: pointers, memory management, objects, messages</li>
<li>Fundamental iOS libraries</li>
<li>Cocoa patterns</li>
<li>Testing</li>
</ul>


<h3>History of why Objective-C</h3>

<ul>
<li>NeXt

<ul>
<li>used objective-c to write the main platform

<ul>
<li>there was a debate on which was better between objective-c and c++, C++ eventually won</li>
</ul>
</li>
<li>If you wanted to write an application on NeXt you needed to use NeXt builder</li>
<li>OSX was built next and there are a lot of things in OSX that were inherited from NeXt</li>
</ul>
</li>
<li>iOS is basically a version of OS10</li>
</ul>


<h3>iOS Overview</h3>

<ul>
<li>The window server and Cocoa send events and messages to each other. It is a two way communication.</li>
<li><p>each application has its own loop of communication. Responsible for send and receiving events from the window server.</p></li>
<li><p>For each object in the nib file</p>

<ul>
<li>Class is sent <code>alloc</code> to create interface</li>
<li>New instance is sent <code>init</code></li>
<li>Instance variables are set</li>
</ul>
</li>
</ul>


<h3>Application States</h3>

<ul>
<li>Two states: foreground and background

<ul>
<li>two states for foreground: inactive and active</li>
<li>in the background: you can do tasks in the background, after it is done it will go to suspended</li>
</ul>
</li>
</ul>


<h3>Cocoa</h3>

<ul>
<li>UIkit is the main library that comes with cocoa and certainly the most important.</li>
</ul>


<h3>App delegate</h3>

<ul>
<li>There are at least two classes. The application class and the application delegate.</li>
</ul>


<h3>Create a new project</h3>

<p><code>motion create &lt;app name&gt;</code></p>

<ul>
<li>fonts, images, assets all go in the resources folder</li>
</ul>


<h3>Rake</h3>

<ul>
<li><code>rake -T</code> gives me a list of all the rake tasks

<ul>
<li>can build for a device or build for the simulator</li>
</ul>
</li>
<li>can create a static library with <code>rake static</code></li>
<li><code>rake config</code> gives you output on the frameworks, delegate_class, etc.

<ul>
<li>CoreGraphics lib is what we use for animation</li>
</ul>
</li>
</ul>


<h3>Deploying the application</h3>

<ul>
<li>need an apple certificate and developer certificate</li>
</ul>


<h3>To see the UI structure</h3>

<p><code>UIApplication.sharedApplication.keyWindow.recursiveDescription</code> -> this will give you the tree structure of what you have created.</p>

<h3>Changing attributes in the console</h3>

<p><code>self.font = UIFont.fontWithName("Noteworthy-Bold",size:18)</code> will change the font of the label that you have highlighted.</p>

<h2>Object C</h2>

<ul>
<li>objective-c is an objected oriented flavor of c</li>
<li>heavily influenced from Smalltalk language</li>
<li><p>all keywords begin with @</p></li>
<li><p>RubyMotion adds named parameters similar to Ruby 2.0</p></li>
<li>Both Ruby and Objective C has the notion of open classes, single inheritance and single message dispatch</li>
</ul>


<p><code>now dateByAddingTimeInterval:1000</code>, structure is the <code>receiver theSelector:argument</code></p>

<ul>
<li>messages always elclose the receiver and the selector insude a pair of square brackets. These brackets can be nested.</li>
<li><p><em>id</em> is a pointer to any object type.</p></li>
<li><p>you can invoke objective-c OR ruby methods against built in classes</p></li>
<li><code>[1,2,3].send(:objectAtIndex, 1)</code> -> you need the colon or it won&#8217;t find the selector!</li>
<li>helpful to use short methods and callbacks because the method will not be released until it is terminated.</li>
</ul>


<h3>Objective C Classes</h3>

<ul>
<li>NSString (similar to when you freeze something in Ruby) v. NSMutableString</li>
<li>NSSArray v. NSMutableArray</li>
<li>NSSet v. NSMutableSet</li>
<li><p>NSDictionary v. NSMutableDictionary</p></li>
<li><p><code>my_string = "hello"</code> -> this is mutable</p></li>
<li><code>my_stgring = NSString.alloc.init</code> -> this is immutable</li>
</ul>


<h3>NSArray</h3>

<ul>
<li>NSArray is immutable. Once you create one it can&#8217;t be modified. NSMutableArray is a mutable subclass of NSArray

<ul>
<li>need to terminate a <code>NSArray.arrayWithObjects(foo, bar, baz, nil)</code> with a <code>nil</code> or it will crash.</li>
</ul>
</li>
</ul>


<h3>NSSet</h3>

<ul>
<li>Sets are collections with no order and objects can be present only once (can only be added once).It is useful when dealing with membership issues.</li>
<li><code>.unionSet</code>, <code>.intersectSet</code></li>
</ul>


<h3>NSDictionary</h3>

<ul>
<li>Dictionaries are unordered and associate a key.</li>
</ul>


<h3>Constants</h3>

<ul>
<li>in objective c -> constants usually start with k -> <code>kItemCode</code></li>
<li>in Ruby make sure that this is uppercase -> <code>KItemCode</code></li>
</ul>


<h3>Defining a class</h3>

<ul>
<li>Obj c uses the keyword <code>@interface</code> to define the class</li>
<li>Obj c only supports <em>single inheritance</em>. You can only inherit from one superclass at a time.</li>
</ul>


<h3>Protocols</h3>

<ul>
<li>similar to the concept of interfaces in java or C-sharp</li>
<li>a protocol is a contract. It is a promise to the compiler that a given class will implement a given interface.</li>
</ul>


<h3>Categories</h3>

<ul>
<li>the way to add methods to an existing class</li>
</ul>


<h3>Structures</h3>

<ul>
<li>C structures are mapped to classes in RubyMotion. <code>CGPoint</code> is very common.</li>
<li>It is possible to pass the field views directly to the constructor `pt= CGPoint.new(100,200)</li>
</ul>


<h3>Pointers</h3>

<ul>
<li>Pointers are basic data types of the C language</li>
<li>RubyMotion supports the creation o structure pointers, by passing their runtime type accordingly to <code>Pointer.new</code></li>
</ul>


<h3>Blocks</h3>

<ul>
<li>The caret (<sup>)</sup> character is used to define C blocks</li>
<li>The Prob object must have the same number of args as the C function pointer or block, otherwise an exception will be raised at runtime</li>
</ul>


<h3>Keyboard doesn&#8217;t toggle by default</h3>

<ul>
<li>Add this code</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">textFieldShouldReturn</span><span class="p">(</span><span class="n">textfield</span><span class="p">)</span>
</span><span class='line'>    <span class="n">textfield</span><span class="o">.</span><span class="n">resignFirstResponder</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setting a title of a button</h3>

<p><code>@instance_var.setTitle("TITLE",forState:UIControlStateNormal)</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Pre-work]]></title>
    <link href="http://www.adamjonas.com/blog/rubymotion-pre-work/"/>
    <updated>2013-01-20T19:29:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/rubymotion-pre-work</id>
    <content type="html"><![CDATA[<ul>
<li>Ruby Motion Tool Chain from the command line with <code>motion</code></li>
<li><p>create a new project with <code>motion create &lt;app name&gt;</code></p></li>
<li><p><code>rake -T</code> gives you a list of tasks</p></li>
<li><p><code>rake</code> builds the application and opens the simulator</p></li>
<li><p>Cocoa touch is a framework and calls back into our code using the delegate pattern.</p>

<ul>
<li>there are special callback methods to hook into the lifecycle</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>Creating an alert</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span><span class="ss">:launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alert</span> <span class="o">=</span> <span class="no">UIAlertView</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'>    <span class="n">alert</span><span class="o">.</span><span class="n">show</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>What is the frame?</h3>

<ul>
<li>a rectangle for the window.

<ul>
<li>it&#8217;s an origin, an X and Y coordinate</li>
<li>and it&#8217;s also a size</li>
</ul>
</li>
</ul>


<h3>Making a Yellow Screen</h3>

<figure class='code'><figcaption><span>A Yellow Flashlight!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span><span class="ss">:launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@window</span> <span class="o">=</span> <span class="no">UIWindow</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">initWithFrame</span><span class="p">(</span><span class="no">UIScreen</span><span class="o">.</span><span class="n">mainScreen</span><span class="o">.</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@window</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="no">UIColor</span><span class="o">.</span><span class="n">yellowColor</span>
</span><span class='line'>    <span class="vi">@window</span><span class="o">.</span><span class="n">makeKeyAndVisible</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using the Console</h3>

<p>When the console builds it provides a console. If I hover with the mouse, nothing happens. But if I hold the cmd key, it puts the element in the console and you can assign it to self or a variable.</p>

<p>So <code>#&lt;UIWindow:0x10922060&gt;)&gt; self</code>
and <code>#&lt;UIWindow:0x10922060&gt;)&gt; self.backgroundColor = UIColor.greenColor</code> will change the color right in the console.</p>

<p>Can grab objects, put them in the console and manipulate them interactively.</p>

<h3>Views</h3>

<ul>
<li>each view that we have sits in a view and is managed by a view controller</li>
<li><p>Each</p></li>
</ul>


<h3>ViewController</h3>

<ul>
<li>UIViewController is where all the magic happens</li>
</ul>


<h3>UI Kit</h3>

<ul>
<li>the x and y coordinate starts in the upper left corner and x goes -> and y goes down.</li>
</ul>


<h3>Gesture Recognition</h3>

<ul>
<li>when a view is tapped it sends an action to a particaular target.</li>
</ul>


<h3>What is a delegate</h3>

<p>When the user launches our app, the system sets up a bunch of stuff for us. We need to give the operating system an object which can respond to different events during that process; we refer to that object as the &#8220;application delegate&#8221;. It gets callbacks for when the app starts, ends, goes to the background, gets a push notification, etc. <a href="http://rubymotion-tutorial.com/1-hello-motion/">source</a></p>

<h3>Views</h3>

<ul>
<li>Everything displayed in an app is called a &#8220;view&#8221;.- A view can have many &#8220;subviews&#8221;; when you move a view, you also move its subviews.

<ul>
<li>Subviews visually stacked on top of each other within their parent.</li>
</ul>
</li>
</ul>


<h3>Resources:</h3>

<ul>
<li><a href="http://pragmaticstudio.com/screencasts/rubymotion">50 min screencast</a></li>
<li><a href="http://www.clearsightstudio.com/insights/ruby-motion-promotion-tutorial">Promotion</a></li>
<li><a href="http://rubymotion-tutorial.com/">HTML book</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formulating a Gitbo plan]]></title>
    <link href="http://www.adamjonas.com/blog/formulating-a-gitbo-plan/"/>
    <updated>2013-01-17T19:23:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/formulating-a-gitbo-plan</id>
    <content type="html"><![CDATA[<p>Intro to the product&#8230;</p>

<p>present gitbo
  - show that it is integrated with github</p>

<pre><code>- largest open source code sharing platform
</code></pre>

<ul>
<li>show how easy it is to find and work on an issue.

<ul>
<li>by upvoting an issue, I communicate what is important to me, which is relfected in the popularity and the visibility of each issue and repository</li>
<li>uploading a third party repo bring visibility to a repo that you think deserves attention.</li>
</ul>
</li>
<li>bounty process</li>
<li><p>notified when solved (verbal &#8216;notified by email&#8217;)</p>

<ul>
<li>prompted to pay show stripe js (needed?)</li>
</ul>
</li>
<li><p>Founded a company.</p></li>
<li><p>express passion</p></li>
<li>capability</li>
<li>team cohesiveness - 3 month intense bootcamp</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to Sinatra]]></title>
    <link href="http://www.adamjonas.com/blog/back-to-sinatra/"/>
    <updated>2013-01-17T19:19:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/back-to-sinatra</id>
    <content type="html"><![CDATA[<ul>
<li>Couldn&#8217;t launch on heroku because I didn&#8217;t have a gemfile.</li>
<li><p>Then I could removed all the gem requirements from the top of the <code>main.rb</code> file. Not how it&#8217;s done.</p></li>
<li><p>Since I need two different keys to for FB authentication I configured them in the main <code>app.rb</code> file. I tried setting these in a <code>.env</code> file and start up the app locally with foreman, but I couldn&#8217;t get it to work.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyApp</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">configure</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;FACEBOOK_APP_ID&quot;</span><span class="o">]=</span><span class="s1">&#39;numbers&#39;</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;FACEBOOK_SECRET&quot;</span><span class="o">]=</span><span class="s1">&#39;key&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">configure</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;FACEBOOK_APP_ID&quot;</span><span class="o">]=</span><span class="s1">&#39;numbers&#39;</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;FACEBOOK_SECRET&quot;</span><span class="o">]=</span><span class="s1">&#39;key&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Found this solution on <a href="http://stackoverflow.com/questions/4486634/is-there-a-rack-or-sinatra-based-environment-configuration-utility">stackoverflow</a></p>

<ul>
<li><a href="http://stackoverflow.com/questions/658044/tick-symbol-in-html-xhtml">HTML Tick symbol</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jan 14 Notes]]></title>
    <link href="http://www.adamjonas.com/blog/jan-14-notes/"/>
    <updated>2013-01-15T11:05:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/jan-14-notes</id>
    <content type="html"><![CDATA[<h3>Simple Search</h3>

<p><a href="http://railscasts.com/episodes/37-simple-search-form">Ryan Bates to the rescue</a></p>

<h3>Find</h3>

<p>Getting back to basics (or at least closer to SQL). I haven&#8217;t used find much in the couple months, but it was what I needed for the set up search on the index pages.</p>

<p>The <a href="http://apidock.com/rails/ActiveRecord/Base/find/class">documentation is awesome</a>.</p>

<h3>ActiveRelation Queries</h3>

<p><a href="http://blog.mitchcrowe.com/blog/2012/04/14/10-most-underused-activerecord-relation-methods/">Good article on underused queries</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XMPP]]></title>
    <link href="http://www.adamjonas.com/blog/xmpp/"/>
    <updated>2013-01-12T06:57:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/xmpp</id>
    <content type="html"><![CDATA[<h2>XMPP</h2>

<ul>
<li>instant messaging for servers -> mobile, desktop or whatever</li>
<li>it&#8217;s an open standard -> what google uses.</li>
<li>rss -> needs to ask every server if they have info.

<ul>
<li><strong>Polling is inefficient</strong></li>
</ul>
</li>
<li>In email, messages are push to the recipient -> it&#8217;s push notification.

<ul>
<li>the server and the client need to stay online constantly.</li>
</ul>
</li>
</ul>


<blockquote><p>XMPP is about pushing out info rather than pulling (which would be a continuous poll).</p></blockquote>

<h3>XMPP is built around push (not pull)</h3>

<ul>
<li>a not guaranteed queue, if a client is offline when it is sent, it may be lost</li>
<li>XMPP is built around XML</li>
<li>it can be secure, but it isn&#8217;t required by default</li>
</ul>


<h3>Upsides</h3>

<ul>
<li>publish notifications to a list of subscribers (maybe a replacement for RSS)</li>
<li>Declare presence (think about status messages)</li>
<li>control</li>
</ul>


<h3>Message status is an attribute</h3>

<ul>
<li>:normal</li>
<li>:chat</li>
<li>:groupchat</li>
<li>:heading</li>
<li>:error</li>
</ul>


<h3>Presence is also an attribute</h3>

<ul>
<li>nil</li>
<li>:chat</li>
<li>:away</li>
<li>:dnd</li>
<li>:xa</li>
</ul>


<h3>Jabber account</h3>

<ul>
<li>sign up at &lt;jabber.orb></li>
<li>IM client applications that speak jabber e.g. Psi, cross platform, can monitor raw xml sent in between</li>
<li>openfire on mac os 10 is a jabber server</li>
<li>&lt;ejabberd.im> an open source jabber server written in erlang</li>
<li><code>cd /Applications/ejabberd-2.0.1/bin</code></li>
<li><code>./ejabberdctl start</code></li>
<li>there is a web intergace on port 5280 by default</li>
<li>can only register one account every 10 minutes</li>
</ul>


<h3>xmpp4r Gem</h3>

<ul>
<li><a href="http://home.gna.org/xmpp4r/">Docs</a></li>
<li><a href="https://github.com/ln/xmpp4r">The source files on github</a></li>
</ul>


<h3>XMPP callbacks</h3>

<ul>
<li>receive parameters about the context, the sender, and the message</li>
</ul>


<h3>Create a config</h3>

<ul>
<li>create outside the class and then just pass it in later</li>
</ul>


<h3>Jabber is not the place for complicated logic</h3>

<ul>
<li>Keep your jabber simple as possible and use the rails API for more complicated business logic</li>
</ul>


<h3>There are examples in xmpp4r gem</h3>

<ul>
<li>There are some inconsistencies, but they are decent templates</li>
</ul>


<h3>Tips</h3>

<ul>
<li>can customize the avatar</li>
</ul>


<h3>Interacting with rails</h3>

<ul>
<li><code>render_then_call(render)</code> from merb (not sure what it&#8217;s current status is)</li>
<li>can also sent this to a job queue so that it is done asynchronously, but this uses two jabber accounts which will send the original message from the other</li>
<li>keep a DRb port open on your jabber script, its not fully asynchronous, but it works since the slowest part is opening the connection</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://www.adamjonas.com/blog/recursion/"/>
    <updated>2013-01-11T22:04:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/recursion</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://www.youtube.com/watch?v=MyzFdthuUcA">How to write a recursive method</a></p></li>
<li><p>Step one- write &#8216;if&#8217;
a. There must be two cases: a recursive case (where the method calls itself)
b. and a base case (where the method does not)</p></li>
<li>Handle the simplest case(s).
a. Simplest = no recursive call needed (no looping)</li>
<li>Write the recurisve call(s)
a. On the next simplest input/state</li>
<li>Assume the recursive call works (maybe store the result in a variable)
a. Ask yourself, what does it do?
b. How does it help?</li>
</ul>


<p>9! = <code>9*8*7*6..</code>
10! = <code>10*9!</code>
n! = n * (n - 1)! -> a recursive definition of factorial</p>

<p>&#8220;`ruby
def factorial(n)
  if n == 0</p>

<pre><code>return 1
</code></pre>

<p>  else</p>

<pre><code>result = factorial(n - 1) #computes n-1 factorial
result * n
</code></pre>

<p>  end
end</p>

<ul>
<li><a href="http://www.youtube.com/watch?v=ozmE8G6YKww">How recursion works</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structures]]></title>
    <link href="http://www.adamjonas.com/blog/data-structures/"/>
    <updated>2013-01-11T17:55:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/data-structures</id>
    <content type="html"><![CDATA[<h3>MIT lecture on Intro to Algorithms</h3>

<p><em>Analysis of algorithms:</em></p>

<blockquote><p>the theoretical study of computer program performance and resource usage</p></blockquote>

<ul>
<li><p>What is more important than performance?</p>

<ul>
<li>correctness</li>
<li>simplicity</li>
<li>maintainability</li>
<li>stability / robustness</li>
<li>features / functionality</li>
<li>modularity</li>
<li>security</li>
<li>user friendliness</li>
</ul>
</li>
<li><p>Why study this then?</p>

<ul>
<li>real time constraints</li>
<li>sometime user friendliness is a function of performance</li>
<li>performance measures the line between feasible and infeasible -> algorithms are on the edge of entrepreneurship</li>
<li>algorithms provides a common language to talk about programming behavior</li>
</ul>
</li>
<li><p>Permutation (an arrangement of numbers)</p></li>
</ul>


<blockquote><p>Take a bunch of numbers and arrangement them in order</p></blockquote>

<ul>
<li>Insertion sort:

<ul>
<li>depends on the input order. If sorted, there is little work to do. Worst case is if it is reverse sorted.</li>
<li>depends also on the input size.</li>
<li><em>expected time</em> is the time of every input multiplied by the probability of every input AKA a weighted average.

<ul>
<li>the assumption is based on the statistical distribution of the inputs

<ul>
<li>all inputs are equally likely -> uniform distribution</li>
</ul>
</li>
<li>a best case analysis is bogus&#8230;</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Relative speed:</p>

<blockquote><p>speed that depends on the speed of the</p></blockquote>

<p>Absolute speed:</p>

<blockquote><p>speed that depends on the speed of the</p></blockquote>

<p>Asymptotic Analysis:</p>

<blockquote><p>Considers the performance of algorithms when applied to very large input datasets. It ignores machine dependent constants and focuses on the growth of the running time.</p></blockquote>

<ul>
<li>Asymptotic notation:

<ul>
<li>Theta notation -> drop low order terms and ignore leading constants</li>
<li>e.g. -> <code>3n^3 + 90n^2 - 5n + 6046 = θ(n^3)</code> in asymptotic notation

<ul>
<li>As n approaches infinity, <code>θ(n^2)</code> <strong>always beats</strong> <code>θ(n^3)</code> alogrithm.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Sometimes choosing a slower algorithm allows you to attack a problem that a faster algorithm would not allow you to. (56 min)</p>

<ul>
<li>can</li>
</ul>


<h3>Selection Sort</h3>

<ul>
<li><a href="http://www.youtube.com/watch?v=MZ-ZeQnUL1Q">Vid</a></li>
<li>Time complexity is O(n<sup>2).</sup> It makes n comparisons, n times. It needs to make a pass through the list for every element it sorts.</li>
<li>For whatever data you give it, it will make the exact same amount of comparisons. Even if you give selection sort a sorted list, it still will have to make the same amount of passes. Thus, the best case, worst case and average case are all O(n<sup>2).</sup></li>
</ul>


<h3>Bubble Sort</h3>

<ul>
<li><a href="http://www.youtube.com/watch?v=jAoBsroEow4">Vid</a></li>
<li>Compare items with the item to its right (or left).</li>
<li>Large numbers are pushed to the right side of an unsorted list.</li>
<li>Called a bubble sort since the large numbers rise up to the right.</li>
<li>A O(n<sup>2),</sup> same time complexity as selection sort.

<ul>
<li>while selection sort will always be a O(n<sup>2),</sup> bubble sort may be more efficient if the list is fully sorted.</li>
<li>the best case is a O(n), while the average and worst case are both O(n<sup>2)</sup></li>
</ul>
</li>
</ul>


<h3>Cocktail Sort</h3>

<ul>
<li><a href="http://www.youtube.com/watch?v=Xmx_6YRBaq8">Vid</a></li>
<li>Saw in bubble sort, that larger numbers rise to the right.

<ul>
<li>The larger numbers are sorted to the right and on the pass back, the smaller numbers are bubbled to the left.</li>
<li>The time complexity is still O(n<sup>2)</sup> and is pretty similar to bubble sort.</li>
</ul>
</li>
</ul>


<h3>Insertion Sort</h3>

<ul>
<li>Only makes one pass through the list. This doesn&#8217;t mean it is an efficient algorithm.</li>
<li>Start at the second element</li>
<li>with each new item, you are sorting the item in its correct position it will be sorted in its relative position.

<ul>
<li>Every arrow to the left are sorted properly.</li>
</ul>
</li>
<li>As it is inserting itself back through the list, but this is still n comparisons or n items meaning it is a O(n<sup>2)</sup> time complexity.</li>
<li>The best case scenario is like bubble sort of n comparisons. An inversely sorted list will require O(n<sup>2).</sup>
-> moderately fast for small n, but not at all for large n</li>
</ul>


<h3>Bucket Sort</h3>

<ul>
<li><a href="http://www.youtube.com/watch?NR=1&amp;feature=endscreen&amp;v=ovAfqUafjAA">Vid</a></li>
<li>Not a sorting algorithm. It breaks down a list into sub-lists. The purpose is to break it down into smaller chunks so that each list takes less time to sort than the larger list.

<ul>
<li>Instead of sorting one list of 8 items, I could sort two lists of 4 items.

<ul>
<li>need to know the upper and lower items of each list.</li>
</ul>
</li>
</ul>
</li>
<li>Why do this? Because if you use bubble sort you reduce the overall time complexity of N<sup>2</sup> if the list 8<sup>2</sup> items by making it 2 x 4<sup>2.</sup></li>
<li>Average case is O(n+k), k represents the number of buckets created. Worst case scenario is still O(n<sup>2).</sup></li>
</ul>


<h3>Recursion</h3>

<ul>
<li>similar to recurrence relations in math</li>
<li>any form of recursion must have a base case for the recursion to stop as well as a recursive case which makes recursive calls to itself.</li>
</ul>


<h3>Quick Sort</h3>

<ul>
<li>sorting algorithm that relies on recursion.</li>
<li>where you put the pivot doesn&#8217;t matter, pointers go to the extreme left or right of the list</li>
<li>the items at the pointers are compared</li>
<li>when both pointers and pivot are at the same value, it is in the right position</li>
<li>recursively done on the left sublist and then the right sublist.</li>
<li>Time complexity -> O(nlogn) for best and average. An inversely sorted list will still require O(n<sup>2).</sup></li>
</ul>


<h3>Merge Sort</h3>

<ul>
<li>MIT-> 1:03</li>
<li><p>A[1..n]</p></li>
<li><p>If n=1, done</p></li>
<li>Recursively sort A[1..(n/2)] &amp;&amp; A[n/2+1..n] (we are sorting two halves of the input)</li>
<li>Take the two lists and merge them
a. say you have two lists [2, 7, 13, 20], [1, 9, 11, 12]
b. check the head of the two arrays, then ouput the smallest.</li>
<li><p>The time to do this is θ(n) or linear time which is proportional to the size of n.</p></li>
<li><p>Worst case this is a O(nlogn). Anything more than 30 this would be more performant than insert sort (1:20 MIT)</p></li>
</ul>


<h3>Example</h3>

<p>Given  a  sorted  array  of  integers,  how  can  you  find  the  location  of  a  particular  integer  x?</p>

<p><em>Good  answer:</em>  Use  binary  search.   Compare  the  number  in  the  middle  of  the  array  with  x.   If  it  is  equal,  we  are  done.   If  the  number  is  greater,  we  know  to  look  in  the  second  half  of  the  array.   If  it  is  smaller,  we  know  to  look  in  the  first  half.   We  can  repeat  the  search  on  the  appropriate  half  of  the  array  by  comparing  the  middle element  of  that  array  with  x,  once  again  narrowing  our  search  by  a  factor  of  2.   We  repeat  this  process  until  we  find  x.  This  algorithm  takes  <em>O(log n)</em>  time.</p>

<p><em>Not‐so‐good  answer</em>:  Go  through  each  number  in  order  and  compare  it  to  x.  This 
algorithm  takes  <em>O(n)</em>  time.</p>

<ul>
<li>(<a href="http://courses.csail.mit.edu/iap/interview/Hacking_a_Google_Interview_Handout_1.pdf">from</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jan 8 Notes]]></title>
    <link href="http://www.adamjonas.com/blog/jan-8-notes/"/>
    <updated>2013-01-08T12:14:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/jan-8-notes</id>
    <content type="html"><![CDATA[<h3>Railscast 240 8min</h3>

<ul>
<li>Sortable table columns #228 railscast</li>
<li>pagination with will_paginate gem, 3.0.pre2 version</li>
<li>Will ajax improve the user experience?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jan 4 Notes]]></title>
    <link href="http://www.adamjonas.com/blog/jan-4-notes/"/>
    <updated>2013-01-04T11:30:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/jan-4-notes</id>
    <content type="html"><![CDATA[<ul>
<li>Created deploy user or go as root?

<ul>
<li>scp => ssh copy from home dir to files online</li>
</ul>
</li>
</ul>


<h3>Goals for payments</h3>

<ul>
<li>verification is done.

<ul>
<li>set up payment long form for when a user submits a bounty for the first time.

<ul>
<li>short form for 2nd payment and beyond?</li>
</ul>
</li>
<li>need to notify the bounty author when a bounty has been claimed &amp;&amp; verified.</li>
</ul>
</li>
</ul>


<h3>Reference Spike&#8217;s resources</h3>

<ul>
<li><a href="https://github.com/spikegrobstein/flatironschool-deployment_lecture">Github</a></li>
</ul>


<h3>Setting up a staging server</h3>

<ul>
<li><p>need to configure nginx to handle another environment</p></li>
<li><p>configured <code>nginx.conf</code></p></li>
<li><p>copy up or pull down files: <code>scp /fileonmycomp deploy@git.bo:filename</code></p></li>
<li><p><code>sudo nginx -s stop</code></p></li>
<li><p><code>sudo nginx</code> -> starts nginx</p></li>
<li><p>update the DNS so that it points to that IP address</p></li>
</ul>


<h3>Railscast on setting up another env #72</h3>

<ul>
<li>can make as many environments as you want

<ul>
<li>add a <code>staging.rb</code></li>
<li>copy <code>production.rb</code>, but enable debug for the log</li>
<li>need to create block in the <code>database.yml</code> file as well</li>
<li><code>rails s -e staging</code> will start the server in that env

<ul>
<li><code>rails c staging</code> will start the console in that env</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ul>


<h3>Ruby Gems</h3>

<p><code>gem env</code> shows the paths of your RubyGem Enviroment</p>

<h3>Create Postgres DB</h3>

<ul>
<li><a href="http://www.cyberciti.biz/faq/howto-add-postgresql-user-account/">Cyberciti</a></li>
</ul>


<h3>Migrate Postgres DB</h3>

<ul>
<li><code>bundle exec rake db:migrate RAILS_ENV=staging</code></li>
</ul>


<h3>Precompiling locally</h3>

<ul>
<li><code>bundle exec rake assets:precompile</code></li>
</ul>


<h3>Undoing the last Github commit</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/927358/undo-last-git-commit"><code>git reset --soft HEAD^</code></a></li>
</ul>


<h3>Passenger environment nginx config</h3>

<ul>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jan 3 Notes]]></title>
    <link href="http://www.adamjonas.com/blog/jan-3-notes/"/>
    <updated>2013-01-03T12:12:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/jan-3-notes</id>
    <content type="html"><![CDATA[<h3>Adding a comma for big numbers</h3>

<p><code>&lt;%= number_with_delimiter(repo.watchers, :delimiter =&gt; ',')</code>
<a href="http://stackoverflow.com/questions/1078347/is-there-a-rails-trick-to-adding-commas-to-large-numbers">From</a></p>

<h3>UI/UX strategy</h3>

<ul>
<li>kickstarter- encouraging click through rather than interaction.</li>
<li>digg, stackoverflow, and reddit are closer to the functionality we want.</li>
<li>don&#8217;t reinvent the wheel -> move forward.</li>
</ul>


<h3>Bounty Claims</h3>

<ul>
<li><p>Psuedo code: collect the info from the user (modal)</p></li>
<li><p>this is sent to verification layer</p>

<ul>
<li><p>bounty controller?</p></li>
<li><p>make sure the issue is closed</p></li>
<li>make sure that an issue has a bounty</li>
<li>make sure the issue was solved by the bounty claimer</li>
</ul>
</li>
<li><p>if true- send verification to both bounty claimer and bounty author</p>

<ul>
<li>write the user id for all bounties the claimer solved</li>
<li>change the badge/trigger payment on the profile pages of the bounty issuer</li>
<li>tell gitbo admin that this was solved.</li>
</ul>
</li>
<li><p>if false tell them why</p></li>
</ul>


<h3>A modal mess</h3>

<ul>
<li>We were trying to pass in multiple parameters in the url. But why do that?</li>
</ul>


<figure class='code'><figcaption><span>This is simpler</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;modal-body&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= form_tag(bounty_claim_path) do %&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;owner_name&quot;</span><span class="o">&gt;</span><span class="no">Repo</span> <span class="no">Owner</span> <span class="no">Name</span><span class="o">&lt;</span><span class="sr">/label&gt;</span>
</span><span class='line'><span class="sr">    &lt;input id=&quot;owner_name&quot; name=&quot;owner_name&quot; type=&quot;text&quot; /</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;field&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;label for=&quot;repo_name&quot;&gt;Repo Name&lt;/</span><span class="n">label</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;repo_name&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;repo_name&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="sr">/&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;git_number&quot;</span><span class="o">&gt;</span><span class="no">Github</span> <span class="no">Issue</span> <span class="no">Number</span><span class="o">&lt;</span><span class="sr">/label&gt;</span>
</span><span class='line'><span class="sr">    &lt;input id=&quot;git_number&quot; name=&quot;git_number&quot; type=&quot;text&quot; /</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;modal-footer&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;span id=&quot;error&quot;&gt;&lt;/s</span><span class="n">pan</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;actions&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">button</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;btn btn-success btn-small&#39;</span><span class="o">&gt;</span><span class="no">Submit</span><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span><span class='line'><span class="sr">      &lt;button class=&quot;btn btn-danger btn-small&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;Oopsy&lt;/</span><span class="n">button</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Just submit to a static url and pass in the info via params.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jan 2 Notes]]></title>
    <link href="http://www.adamjonas.com/blog/jan-2-notes/"/>
    <updated>2013-01-02T13:11:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/jan-2-notes</id>
    <content type="html"><![CDATA[<h3>Bash Environment Variables</h3>

<p>I was getting a double render on my bounty form. This was because I had precompiled my assets in an attempt to rectify Gitbo&#8217;s server issue last week. Since <code>issue.js</code> has been compiled into <code>application.js</code>, it is listening twice.</p>

<p>StackOverflow had <a href="http://stackoverflow.com/questions/9641320/rails-assets-dont-get-updated">this to say</a> and this solution <code>bundle exec RAILS_ENV=development rake rails_group=assets assets:clean</code>.</p>

<ol>
<li>The <code>bundle exec</code> would be needed if the gem file and my system files were different. In Gitbo&#8217;s case, there is no discrepancy. On the server, that can&#8217;t be assumed and <code>bundle exec</code> would be needed.</li>
<li>The default environment for a rake task is development <strong>except</strong> for assets which obviously have more to do with production.</li>
<li>Rake tasks are very flexible in terms of how they take <em>bash environment variables</em> (they are sort of like arguments, but they aren&#8217;t). Passing in the rails_environment before the rake task is how I did it, but they could be passed in afterwards and that would be fine because BASH reads the entire line of code before it executes it.</li>
</ol>


<p>Here was the final command I used: <code>RAILS_ENV=development RAILS_GROUP=assets rake assets:clean</code></p>

<h3>Skeleton</h3>

<ul>
<li>Site is <a href="http://www.getskeleton.com/">here</a></li>
<li>Installed <a href="https://github.com/helios-technologies/skeleton-rails">skeleton-rails</a></li>
<li>An alternative to rails</li>
</ul>


<h3>Instance Variables</h3>

<ul>
<li><p>Show does have an instance variable. The view is attached to an instance of a controller</p></li>
<li><p>In a partial, this is just crazy&#8230;</p>

<ul>
<li>a view is not part of the controller, so why should it have access to an instance of a controller.</li>
</ul>
</li>
</ul>


<p>Further reading on this: <a href="http://rails-bestpractices.com/posts/27-replace-instance-variable-with-local-variable">Rails Best Practices</a> and <a href="http://programmers.stackexchange.com/questions/127838/why-do-people-suggest-not-to-use-instance-variable-for-views-in-ruby-on-rails">Stack Exchange</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallelism]]></title>
    <link href="http://www.adamjonas.com/blog/parallelism/"/>
    <updated>2013-01-01T21:30:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/parallelism</id>
    <content type="html"><![CDATA[<h3>Threads  and  processes:</h3>

<p>A  computer  will  often  appear  to  be  doing  many  things  simultaneously,  such  as  checking  for  new  e‐mail  messages,  saving  a  Word  document,  and  loading  a  website. Each  program  is  a  separate  &#8220;process&#8221;.   Each  process  has  one  or  more  &#8220;threads. &#8220;  If  a  process  has  several  threads,  they  appear  to  run  simultaneously.  For  example,  an  e‐mail  client  may  have  one  thread  that  checks  for  new  e‐mail  messages  and  one  thread  for  the  GUI  so  that  it  can  show  a  button  being  pressed.  In  fact,  only  one  thread  is  being  run  at  any  given  time.  The  processor  switches  between  threads  so  quickly  that  they  appear  to  be  running  simultaneously. Multiple  threads  in  a  single  process  have  access  to  the  same  memory.   By  contrast,  multiple  processes  have  separate  regions  of  memory  and  can  only  communicate  by  special  mechanisms.  The  processor  loads  and  saves  a  separate  set  of  registers  for  each  thread. Remember,  each  process  has  one  or  more  threads,  and  the  processor  switches  between  threads.</p>

<ul>
<li><a href="http://courses.csail.mit.edu/iap/interview/Hacking_a_Google_Interview_Handout_1.pdf">From</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big O Notation]]></title>
    <link href="http://www.adamjonas.com/blog/big-o-notation/"/>
    <updated>2012-12-29T22:59:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/big-o-notation</id>
    <content type="html"><![CDATA[<h3>What is it? Let me say it a few different ways&#8230;</h3>

<ul>
<li>Big-O measures how well an operation will “scale” when you increase the amount of “things” it operates on.</li>
<li>Big-O can be used to describe how fast an algorithm will run, or it can describe other behavior such as how much memory an algorithm will use.</li>
</ul>


<blockquote><p>Big O notation refers to the asymptotic upper bound (see below for fuller explanation), which means that it&#8217;s a cap on how much the time complexity will grow. If we say that a function is O(1), then there&#8217;s no growth and the function will always take a fixed amount of time to complete. If we say that a function is O(N) then if N doubles, the function&#8217;s time complexity at most will double. It may be less, but never more. That&#8217;s the upper bound of an algorithm, and it&#8217;s the most common notation. <a href="http://eternallyconfuzzled.com/arts/jsw_art_bigo.aspx">credit</a></p></blockquote>

<h3>Asymptotic Bounds</h3>

<ul>
<li>By removing the constants from an equation, we can focus on the part of the measure that grows and derive a simplified asymptotic bound on the algorithm.</li>
<li><strong>The reference to bounds is pretty much a reference to the best-case (lower bound, also known as Omega -> Ω) and worst-case (upper bound, also known as Big O) scenarios.</strong>

<ul>
<li><strong>If these end up being the same, we can call it theta -> Θ.</strong></li>
</ul>
</li>
<li>For more on Asymptotic Bounds, read a <a href="http://eternallyconfuzzled.com/arts/jsw_art_bigo.aspx">good explanation</a>.</li>
</ul>


<h3>Time complexity</h3>

<ul>
<li><p>Time complexity is a measure of efficiency.</p>

<ul>
<li>In a list of N items, how many times do I need to go through this list to get the task done?

<ul>
<li>e.g. which number is the smallest. Only once I pass through the entire list can I figure out which is the smallest. <em>It must make N comparisons.</em></li>
<li>Selection sort and bubble sort are N<sup>2</sup> algorithms.</li>
</ul>
</li>
</ul>
</li>
<li><p><em>O(1)</em> -> Constant Time -> describes an algorithm that will always execute in the same time regardless of the size of the input data set.</p></li>
</ul>


<figure class='code'><figcaption><span>This will never change no matter the size</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">checking_nil</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another e.g. determining if a number is even or odd.</p>

<ul>
<li><em>O(log n)</em> -> logarithmic time -> Any algorithm which cuts the problem in half each time is O(log n). The operation will take longer as the input size increases, but once the input gets fairly large it won&#8217;t change enough to worry about. If you double n, you have to spend an extra amount of time t to complete the task. If n doubles again, the time it takes to complete the task won’t double, but will increase by a constant amount. (e.g. a binary search tree

<ul>
<li>A <em>Binary Search Tree</em> is a tree comprised of multiple nodes with one root node to start with.  Each node has a value, left node, and a right node.  The left node value has to be less than the current node value, while the right node value is greater than the current.  The biggest concern with a binary search tree is balancing.  If the tree becomes unbalanced, the O(log(n)) benefit can become O(n) if the tree unbalanced (a tree with only a right path).

<ul>
<li><a href="http://styliii.com/blog/2012/12/26/what-is-a-binary-search-tree/">further Binary Search Tree reading</a>)</li>
</ul>
</li>
</ul>
</li>
<li><em>O(N)</em> -> Linear Time -> the larger the input, the longer it takes. AKA it will grow linearly and in direct proportion to the size of the input data set.</li>
<li><em>O(n log n)</em> means that you’re performing an <em>O(log n)</em> operation for each item in your input. Most (efficient) sort algorithms are an example of this including quicksort (in the average and best case), heapsort and merge sort.</li>
<li>*O(N<sup>2)*</sup> represents an algorithm whose performance is directly proportional to the square of the size of the input data set. Every time n doubles, the operation takes four times as long. (e.g.s are comparison algorithms like quicksort and bubble sort)</li>
<li><em>O(2<sup>N)*</sup> -> exponential time -> denotes an algorithm whose growth will double with each additional element in the input data set. Totally impractical for any reasonably large input size </em>n*.</li>
<li><em>O(n!)</em> -> factorial time -> for all possible permutations&#8230; that&#8217;s just crazy.</li>
</ul>


<p>Constant Time -> O(1) &lt; Linear Time -> O(n) &lt; Linearithmic Time -> O(nlogn) &lt; Quadratic -> O(n<sup>2)</sup></p>

<table>
<thead>
<tr>
<th></th>
<th> Big-O </th>
<th> Operations for 10 “things” </th>
<th> Operations for 100 “things” </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> O(1) </td>
<td> 1 </td>
<td> 1 </td>
</tr>
<tr>
<td></td>
<td> O(log n) </td>
<td> 3 </td>
<td> 7 </td>
</tr>
<tr>
<td></td>
<td> O(n) </td>
<td> 10 </td>
<td> 100 </td>
</tr>
<tr>
<td></td>
<td> O(n log n) </td>
<td> 30 </td>
<td> 700 </td>
</tr>
<tr>
<td></td>
<td> O(n<sup>2)</sup> </td>
<td> 100 </td>
<td> 10000 </td>
</tr>
<tr>
<td></td>
<td> O(2<sup>n)</sup> </td>
<td> 1024 </td>
<td> 2<sup>100</sup> – a lot! </td>
</tr>
<tr>
<td></td>
<td> O(n!) </td>
<td> 3628800 </td>
<td> 100! – also a lot! </td>
</tr>
</tbody>
</table>


<p><a href="http://therecyclebin.files.wordpress.com/2008/05/time-complexity.png"><img class="left" src="http://www.adamjonas.com/images/time-complexity.png" title="Time Complexity" ></a></p>

<h2>Further reading:</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/107165/big-o-for-eight-year-olds/107189#107189">stackoverflow</a></li>
<li><a href="http://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/">Rob Bell&#8217;s Beginner&#8217;s Guide</a></li>
<li><a href="http://eternallyconfuzzled.com/arts/jsw_art_bigo.aspx">This nails asymptotic notation</a></li>
<li><a href="http://recursive-design.com/blog/2010/12/07/comp-sci-101-big-o-notation/">Pulled a lot from here</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to Gitbo]]></title>
    <link href="http://www.adamjonas.com/blog/back-to-gitbo/"/>
    <updated>2012-12-28T21:37:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/back-to-gitbo</id>
    <content type="html"><![CDATA[<h3>Deleting Remote Github Branches</h3>

<ul>
<li>There are some solutions <a href="http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github">here</a>, but I wasn&#8217;t overjoyed with them considering I have 70 some branches to prune. There are some other ideas <a href="http://www.gitguys.com/topics/adding-and-removing-remote-branches/">here</a> and in the <a href="http://git-scm.com/book/ch3-5.html">GitBook</a>.</li>
</ul>


<h3>Responsive Layout</h3>

<ul>
<li>we have been having issues with the homepage loading with two of the three buttons in one row and the third on the bottom.

<ul>
<li>The lion share of the fix was changing the layout from grid to responsive and changing the span number from 3 to 4.

<ul>
<li>A fuller explanation can be found <a href="http://twitter.github.com/bootstrap/scaffolding.html">here</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Server issues</h3>

<ul>
<li>I had some problems with deploying. After some frustration, I saw that the <code>application.yml</code> file was not being included. There was no sym link and there was no actual file in the shared folder on the server. I ssh&#8217;ed into the server, but didn&#8217;t have much luck. At the end, I simply used an FTP uploader to create the <code>application.yml</code> file and cut and pasted the content. It worked, but I didn&#8217;t feel great about the solution.</li>
</ul>


<h3>Oauth Permissions</h3>

<ul>
<li>Previously we required users to give us read/write access to both there public and private repos. That isn&#8217;t really necessary. Changing the scope permissions in outlined <a href="http://developer.github.com/v3/oauth/#scopes">here</a>.

<ul>
<li>I changed the permissions and saw that I need to restart the server for those changes to take effect locally. I assume the same is necessary on the server.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Prep]]></title>
    <link href="http://www.adamjonas.com/blog/interview-prep/"/>
    <updated>2012-12-27T21:05:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/interview-prep</id>
    <content type="html"><![CDATA[<p>from <a href="https://github.com/afeld/rails_interview_questions">https://github.com/afeld/rails_interview_questions</a></p>

<h3>Q: What is the difference between a lambda, a block and a proc?</h3>

<p>A:  In Ruby we create an anonymous chunk of code called a proc with the code <code>Proc.new</code>. We call this using the <code>.call</code> method.</p>

<p>Lambdas appear to be the same as procs, but lambdas are pickier about arguments. You can&#8217;t pass an extra arg to a lambda (it will blow up), while the proc will just throw away the extras.</p>

<p>Lambda return statement just exit execution of the statement itself while the proc ended execution of containing method.</p>

<p>As a rule, stick with lambdas until you find a specific reason not to.</p>

<p>It is often convenient to write methods that accepts a single proc as arguments. Callers can pass in whatever code they want to be executed once for each name for example. It is so common to write a method that has a single argument that is expected to be a proc that it got it&#8217;s own name &#8211; a block. Every ruby method can implicitly receive a proc arg with the yield keyword.</p>

<h3>Q: How do you sort an Array of objects by a particular attribute? What is a better way to do sorting with ActiveRecord?</h3>

<p>A: Let SQL do its job. It will be more efficient than writing it in Ruby.</p>

<figure class='code'><figcaption><span>For example&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="n">u</span><span class="o">.</span><span class="n">first_name</span><span class="p">}</span> <span class="c1">#=&gt; O(log n)</span>
</span><span class='line'><span class="c1">#versus</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="err">“</span><span class="n">first_name</span> <span class="no">DESC</span><span class="err">”</span><span class="p">)</span> <span class="c1">#=&gt; O(1)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Q: What are some of your favorite gems? What are their alternatives?</h3>

<ul>
<li>Dalli over the standard Memcached library- Higher performance memcached client</li>
<li>paperclip and carrierwave.</li>
</ul>


<h3>Q: In Ruby, which is generally the better option: a recursive function or an iterative one?</h3>

<p>A: Loops may achieve a performance gain for your computer. Recursion may achieve a performance gain for your programmer. Choose which is more important in your situation!</p>

<p>Comparing recursion to iteration is like comparing a phillips head screwdriver to a flat head screwdriver. For the most part you could remove any phillips head screw with a flat head, but it would just be easier if you used the screwdriver designed for that screw right?
Some algorithms just lend themselves to recursion because of the way they are designed (Fibonacci sequences, traversing a tree like structure, etc.). Recursion makes the algorithm more succinct and easier to understand (therefore shareable and reusable).<a href="http://stackoverflow.com/questions/72209/recursion-or-iteration">Pulled from</a></p>

<p>Recursion is, in general, the more natural approach in functional languages, and iteration is normally more intuitive in imperative languages.</p>

<h3>Q: What are #method_missing and #send? Why are they useful?</h3>

<ul>
<li><a href="http://rubylearning.com/satishtalim/ruby_method_missing.html">Method Missing</a></li>
</ul>


<h3>Q: What is the general history of Rails?</h3>

<ul>
<li>Rails open sourced in 2004</li>
<li> 2006 macs were shipped with rails</li>
<li>Dec 2008 merb was merged with rails 3.0</li>
<li>‘11-> rails 3.1 had reversible db migrations, jquery, asset pipeline</li>
</ul>


<h3>Q: Explain the different pieces of Rails.</h3>

<ul>
<li>ActiveRecord -> ORM</li>
<li>ActiveResource -> the main class for mapping RESTful resources as models in a Rails application.</li>
<li>ActionPack ->  the Controller and View layers are handled together by Action Pack.</li>
<li>ActiveSupport-> Active Support is a grab bag of utility methods and extensions to the Ruby standard library that accelerate development by providing syntactic sugar and easy ways to write expressive and DRY code</li>
<li>ActionMailer -> mailer</li>
</ul>


<h3>Q: Walk through the flow of a request through Rails.</h3>

<p>A: The primary components of a Rails app relating to general request cycle are ActionPack (ActionController, ActionDispatch, ActionView), ActiveModel and ActiveRecord. Let’s take the example of a contact management app where each instance of a contact has many addresses, phone number and emails, and we click on a link to a specific contact and are expecting to see a “show” view of some sort.</p>

<h3>Q: What are the different server options for running a Rails/Rack app?</h3>

<ul>
<li>Apache vs. Nginx (webservers)

<ul>
<li>Apache is more popular, nginx is smaller and faster</li>
</ul>
</li>
</ul>


<p><strong>Mongrel vs Webrick</strong>
mongrel is a ruby application server. Which means it:</p>

<ol>
<li>Loads your rails app inside its own process space.</li>
<li>sets up a TCP socket, allowing it to communicate with the outside world.</li>
</ol>


<p><strong>WEBrick does the same thing but:</strong></p>

<ol>
<li>it’s written entirely in C</li>
<li>slower and less robust</li>
<li>installed in rails by default</li>
</ol>


<p><strong>Phusion Passenger</strong></p>

<ul>
<li>Ruby app server, but works differently than mongrel</li>
<li><p>integrates directly into apache or nginx.</p></li>
<li><p>loads the ruby code and sends a request to my application</p></li>
</ul>


<p><strong>Capistrano</strong></p>

<ul>
<li>Allows you to upload the rails app’s code and files to the server machine</li>
<li>set up/ migrate DB</li>
<li>install libs that your app depends on</li>
<li>Capistrano is not the application server&#8211; it is a tool for automating all the preparation work. Technically you could upload with FTP.</li>
</ul>


<p><a href="http://stackoverflow.com/questions/4113299/ruby-on-rails-server-options">http://stackoverflow.com/questions/4113299/ruby-on-rails-server-options</a></p>

<h3>Q: Explain CSRF and how Rails combats it.</h3>

<p>A: <a href="http://www.adamjonas.com/blog/cross-site-request-forgery/">http://www.adamjonas.com/blog/cross-site-request-forgery/</a>
<a href="http://stackoverflow.com/questions/941594/understand-rails-authenticity-token">http://stackoverflow.com/questions/941594/understand-rails-authenticity-token</a></p>

<p>protect from forgery in the application_controller to add authenticity token that is unique for each user session -> checked for all post/put/delete request.
This token is not checked for GET requests, so make sure you don’t do anything damaging with a GET request.</p>

<p>Rails 3 escapes all HTML content <code>&lt;%=h task.name %&gt;</code> to prevent cross-site scripting. Can also look into the sanitize methods.</p>

<h3>Q: Explain mass-assignment vulnerability.</h3>

<p>A: <a href="http://blog.mhartl.com/2008/09/21/mass-assignment-in-rails-applications/">http://blog.mhartl.com/2008/09/21/mass-assignment-in-rails-applications/</a>
Mass assignment throws all the parameter from the form so the user can update any of the attributes or associations</p>

<h3>Rails Security in general</h3>

<ul>
<li><a href="http://railscasts.com/episodes/178-seven-security-tips">Railscasts 178</a></li>
</ul>


<p>SQL injection (railscasts episode 25)</p>

<figure class='code'><figcaption><span>Eliminating SQL injection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@projects</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">projects</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;name like ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:search</span><span class="o">]</span><span class="si">}</span><span class="s2">%&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="sb">``</span>
</span><span class='line'><span class="no">Can</span> <span class="n">just</span> <span class="n">enter</span> <span class="k">in</span> <span class="sb">`) or (&#39;`</span> <span class="ow">and</span> <span class="n">that</span> <span class="n">will</span> <span class="n">retrieve</span> <span class="n">all</span> <span class="n">the</span> <span class="n">projects</span><span class="o">.</span> <span class="no">Can</span> <span class="n">just</span> <span class="n">use</span> <span class="n">the</span> <span class="n">question</span> <span class="n">mark</span> <span class="n">syntax</span> <span class="n">to</span> <span class="n">avoid</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">###Q: Law of Demeter - </span>
</span><span class='line'>
</span><span class='line'><span class="no">Refers</span> <span class="n">to</span> <span class="n">loose</span> <span class="n">coupling</span> <span class="n">of</span> <span class="n">objects</span>
</span><span class='line'>
</span><span class='line'><span class="no">Refers</span> <span class="n">to</span> <span class="n">sending</span> <span class="n">messages</span><span class="p">,</span> <span class="n">prohibits</span> <span class="n">sending</span> <span class="n">a</span> <span class="n">message</span> <span class="n">from</span> <span class="n">object</span> <span class="n">A</span> <span class="n">to</span> <span class="n">object</span> <span class="n">C</span> <span class="n">through</span> <span class="n">object</span> <span class="n">B</span><span class="p">,</span> <span class="k">if</span> <span class="n">object</span> <span class="n">B</span> <span class="n">is</span> <span class="n">of</span> <span class="n">a</span> <span class="n">different</span> <span class="n">type</span><span class="o">.</span>
</span><span class='line'><span class="no">States</span> <span class="n">that</span> <span class="n">objects</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">reach</span> <span class="n">through</span> <span class="n">other</span> <span class="n">objects</span> <span class="n">to</span> <span class="k">return</span> <span class="n">information</span> <span class="n">about</span> <span class="n">a</span> <span class="n">third</span> <span class="n">object</span><span class="o">.</span> <span class="no">Using</span> <span class="n">dot</span> <span class="n">notation</span> <span class="n">examples</span><span class="p">,</span> <span class="n">loosely</span> <span class="n">means</span> <span class="n">to</span> <span class="n">reduce</span> <span class="n">the</span> <span class="n">number</span> <span class="n">of</span> <span class="n">dot</span> <span class="nb">methods</span> <span class="n">strung</span> <span class="n">together</span><span class="p">,</span> <span class="n">so</span> <span class="n">that</span> <span class="n">you</span><span class="s1">&#39;re not performing actions on some intermediary returned object or data. </span>
</span><span class='line'>
</span><span class='line'><span class="s1">LoD violations are more tolerable if reaching through objects to return ‘attributes’, as opposed to invoking ‘behavior’ - ex. customer.bicycle.wheel.tire ← many dots, but is only returning what may be a stable attribute </span>
</span><span class='line'>
</span><span class='line'><span class="s1">More about the ‘type’ of object returned by each expression in a method chain than by the amount of dots, don’t want to be traversing different types, as this is more tightly coupling your code</span>
</span><span class='line'>
</span><span class='line'><span class="s1">###Q: SOLID design</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Coined by Michael Feathers, popularized by Uncle Bob Martin</span>
</span><span class='line'><span class="s1">5 of the most well known design principles </span>
</span><span class='line'>
</span><span class='line'><span class="s1">Single Responsibility - separation of concerns, classes should have a single responsibility, methods should have a single responsibility, makes your code more modular and more adaptable</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Open/Closed - Related to inheritance hierarchies. By using classical inheritance and modules, you&#39;</span><span class="n">re</span> <span class="n">declaring</span> <span class="n">that</span> <span class="n">objects</span> <span class="p">(</span><span class="n">classes</span><span class="p">)</span> <span class="n">are</span> <span class="err">‘</span><span class="nb">open</span><span class="err">’</span> <span class="k">for</span> <span class="n">extension</span> <span class="n">but</span> <span class="err">‘</span><span class="n">closed</span><span class="err">’</span> <span class="n">to</span> <span class="n">modification</span><span class="o">.</span> <span class="no">In</span> <span class="n">this</span> <span class="n">way</span><span class="p">,</span> <span class="n">the</span> <span class="n">developer</span> <span class="n">is</span> <span class="n">encouraged</span> <span class="n">to</span> <span class="err">‘</span><span class="kp">extend</span><span class="err">’</span> <span class="n">an</span> <span class="n">objects</span> <span class="n">behavior</span> <span class="ow">or</span> <span class="n">capabilities</span> <span class="n">through</span> <span class="n">subclasses</span><span class="p">,</span> <span class="ow">and</span> <span class="n">discouraged</span> <span class="n">from</span> <span class="n">modifying</span> <span class="n">existing</span> <span class="n">objects</span><span class="o">.</span> <span class="no">Open</span> <span class="k">for</span> <span class="n">extension</span> <span class="n">creates</span> <span class="n">hierarchies</span> <span class="n">that</span> <span class="n">are</span> <span class="n">well</span> <span class="n">suited</span> <span class="n">to</span> <span class="n">change</span> <span class="ow">and</span> <span class="n">growth</span> <span class="k">in</span> <span class="n">an</span> <span class="n">application</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liskov</span> <span class="no">Substitution</span> <span class="o">-</span> <span class="no">Subclasses</span> <span class="n">should</span> <span class="n">be</span> <span class="n">substitutable</span> <span class="k">for</span> <span class="n">the</span> <span class="no">Superclasses</span><span class="o">.</span> <span class="no">Subclasses</span> <span class="n">are</span> <span class="n">expected</span> <span class="n">to</span> <span class="n">conform</span> <span class="n">to</span> <span class="n">their</span> <span class="n">superclasses</span> <span class="n">interfaces</span> <span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">e</span><span class="o">.</span> <span class="n">must</span> <span class="n">respond</span> <span class="n">to</span> <span class="n">every</span> <span class="n">message</span> <span class="k">in</span> <span class="n">that</span> <span class="n">interface</span><span class="o">.</span> <span class="no">Other</span> <span class="n">objects</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">have</span> <span class="n">to</span> <span class="n">check</span> <span class="n">the</span> <span class="n">type</span> <span class="n">of</span> <span class="n">a</span> <span class="n">subclass</span><span class="o">.</span> <span class="no">Subclasses</span> <span class="n">need</span> <span class="n">to</span> <span class="n">be</span> <span class="n">a</span> <span class="err">‘</span><span class="n">kind</span><span class="err">’</span> <span class="n">of</span> <span class="n">their</span> <span class="n">superclass</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Interface</span> <span class="no">Segregation</span> <span class="o">-</span> <span class="n">separation</span> <span class="n">between</span> <span class="kp">public</span> <span class="ow">and</span> <span class="kp">private</span> <span class="n">interfaces</span><span class="o">.</span> <span class="no">Public</span> <span class="n">interfaces</span> <span class="n">are</span> <span class="k">for</span> <span class="n">messages</span> <span class="p">(</span><span class="nb">methods</span><span class="p">)</span> <span class="n">that</span> <span class="n">will</span> <span class="n">be</span> <span class="n">sent</span> <span class="n">to</span> <span class="n">other</span> <span class="n">objects</span><span class="o">.</span> <span class="no">Private</span> <span class="n">interfaces</span> <span class="n">are</span> <span class="k">for</span> <span class="n">messages</span> <span class="n">that</span> <span class="n">will</span> <span class="n">only</span> <span class="n">ever</span> <span class="n">be</span> <span class="n">sent</span> <span class="n">to</span> <span class="nb">self</span><span class="o">.</span> <span class="no">Private</span> <span class="n">interfaces</span> <span class="n">are</span> <span class="n">where</span> <span class="n">a</span> <span class="n">majority</span> <span class="n">of</span> <span class="n">the</span> <span class="n">how</span><span class="p">,</span> <span class="ow">or</span> <span class="n">the</span> <span class="n">logic</span> <span class="p">(</span><span class="n">manipulating</span> <span class="n">data</span> <span class="n">structures</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span><span class="p">)</span> <span class="n">should</span> <span class="n">occur</span><span class="p">,</span> <span class="k">while</span> <span class="no">Public</span> <span class="n">interfaces</span> <span class="n">should</span> <span class="n">just</span> <span class="n">declare</span> <span class="n">the</span> <span class="err">‘</span><span class="n">what</span><span class="err">’</span> <span class="p">(</span><span class="n">largely</span> <span class="n">by</span> <span class="n">calling</span> <span class="kp">private</span> <span class="n">interface</span> <span class="nb">methods</span><span class="p">)</span><span class="o">.</span> <span class="no">This</span> <span class="n">is</span> <span class="n">because</span> <span class="kp">public</span> <span class="n">interfaces</span> <span class="n">are</span> <span class="n">accessible</span> <span class="n">by</span> <span class="n">other</span> <span class="n">objects</span><span class="p">,</span> <span class="ow">and</span> <span class="n">by</span> <span class="n">exposing</span> <span class="n">too</span> <span class="n">much</span> <span class="n">of</span> <span class="n">the</span> <span class="n">how</span><span class="p">,</span> <span class="n">you</span><span class="err">’</span><span class="n">re</span> <span class="n">giving</span> <span class="n">too</span> <span class="n">much</span> <span class="n">information</span> <span class="n">to</span> <span class="n">other</span> <span class="n">objects</span><span class="p">,</span> <span class="n">which</span> <span class="n">results</span><span class="p">,</span> <span class="ow">or</span> <span class="n">is</span> <span class="n">a</span> <span class="n">symptom</span> <span class="n">of</span><span class="p">,</span> <span class="n">tight</span> <span class="n">coupling</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dependency</span> <span class="no">Inversion</span> <span class="o">-</span> <span class="no">Less</span> <span class="no">Stable</span> <span class="n">objects</span> <span class="n">should</span> <span class="n">depend</span> <span class="n">on</span> <span class="n">more</span> <span class="n">stable</span> <span class="n">objects</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">e</span><span class="o">.</span> <span class="n">more</span> <span class="n">concrete</span> <span class="n">objects</span> <span class="n">should</span> <span class="n">depend</span> <span class="n">on</span> <span class="n">more</span> <span class="n">abstract</span> <span class="n">objects</span><span class="p">,</span> <span class="n">making</span> <span class="n">your</span> <span class="n">code</span> <span class="n">less</span> <span class="n">brittle</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">###Q: Ruby Closures - </span>
</span><span class='line'>
</span><span class='line'><span class="no">Blocks</span><span class="o">/</span><span class="no">Procs</span><span class="o">/</span><span class="no">Lambdas</span> <span class="o">-</span> <span class="n">essentially</span> <span class="n">anonymous</span> <span class="nb">methods</span><span class="o">/</span><span class="n">functions</span><span class="o">.</span> <span class="no">Procs</span> <span class="ow">and</span> <span class="no">Lambdas</span> <span class="n">are</span> <span class="no">Blocks</span> <span class="n">that</span> <span class="n">can</span> <span class="n">be</span> <span class="n">passed</span> <span class="n">around</span> <span class="n">as</span> <span class="n">variables</span><span class="o">.</span> <span class="no">By</span> <span class="n">defining</span> <span class="n">the</span> <span class="nb">proc</span> <span class="ow">or</span> <span class="nb">lambda</span> <span class="n">as</span> <span class="n">such</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby
proc = Proc.new do |name|
  puts “Hello #{name}”
end</p>

<p>can run proc.(“Matt”) -> “Hello Matt”</p>

<figure class='code'><figcaption><span>Eliminating SQL injection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">essentially</span> <span class="n">acts</span> <span class="n">as</span> <span class="n">a</span> <span class="nb">method</span> <span class="n">that</span> <span class="n">can</span> <span class="n">take</span> <span class="n">parameters</span><span class="p">,</span> <span class="n">but</span> <span class="n">is</span> <span class="n">an</span> <span class="n">unnamed</span> <span class="nb">method</span> <span class="n">that</span> <span class="n">can</span> <span class="n">be</span> <span class="n">called</span> <span class="n">by</span> <span class="n">other</span> <span class="nb">methods</span> <span class="n">as</span> <span class="n">an</span> <span class="n">argument</span>
</span><span class='line'>
</span><span class='line'><span class="n">can</span> <span class="n">use</span> <span class="k">yield</span> <span class="n">to</span> <span class="nb">send</span> <span class="n">to</span> <span class="n">the</span> <span class="nb">proc</span><span class="o">/</span><span class="n">block</span><span class="o">/</span><span class="nb">lambda</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby
def named_method(&amp;block)
  yield “Matt”
end
&#8220;`</p>

<p><code>named_method{|name| proc.(name)} -&gt; “Hello Matt”</code></p>

<p>procs and lambdas differ in how they deal with ‘return’ statements and arguments</p>

<p>ORMs - ActiveRecord vs. DataMapper</p>

<h3>Pros and cons of Datamapper</h3>

<ul>
<li>don’t have to write migrations (this can be a pro or con)</li>
</ul>


<p>Datamapper has ‘eager loading’ by default, while ActiveRecord, you need to stipulate using the ‘includes’ method. This basically can cut down the amount of database queries in a normalized database by an order of magnitude. Instead of first running a query on the parent table, then running the same numbers of queries on the association table to get associated data, it just collects foreign keys for all the associations and then loads all associated objects with one query. Pretty cool!</p>

<p>Datamapper - model driven, whereas ActiveRecord is Database driven. Meaning, once the needs of the application dictate that the database become fairly complex, it can be a pain point when using AR.</p>

<h3>Recursion</h3>

<ul>
<li><p><a href="http://ruby.bastardsbook.com/chapters/recursion/">Bastards Book on recursion (still a draft at this time )</a></p></li>
<li><p>There are two principles of recursion</p>

<ol>
<li>An end goal, or base case</li>
<li>A process in which the task at hand is reduced towards that end goal</li>
</ol>
</li>
</ul>


<h3>Pointer-based algorithms</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Pointer_(computer_programming">Pointers</a>)</li>
</ul>


<h3>P = NP?</h3>

<ul>
<li>Are there situations where brute-force search— that is, trying an exponential number of possibilities one-by-one, until we find a solution that satisfies all the stated constraints— is essentially the best algorithm possible? (<a href="http://www.scottaaronson.com/blog/?p=459">from p vs. np for dummies</a>)</li>
<li><a href="http://en.wikipedia.org/wiki/P_versus_NP_problem">wikipedia</a>

<ul>
<li>P vs NP is basically talking about problems where you can checking each possibility in a reasonable amount of time, but the number of possibility&#8217;s keeps growing faster as the numbers get larger.</li>
<li>some of these problems are such that there is no way to come up with an exact solution that is faster than being forced to do a brute force check of all or many of the possible solutions.</li>
<li>The essence of P vs. NP. P is the class of problems where the cost of computing an exact solution doesn&#8217;t necessarily grow too fast relative to input sizes to be impractical with real-world computers. NP is the class of problems that are equivalent to P problems if you happen to have a magical computer which could evaluate and compare any number of possible solutions simultaneously. Naturally, NP will include all of the P problems, so NP-complete problems are taken to be the set of problem for which only the magical computer would be suitable. (from <a href="http://news.ycombinator.com/item?id=1605415">Hacker news discussion</a>)</li>
</ul>
</li>
</ul>


<h3>Practice</h3>

<ul>
<li><a href="http://www.reddit.com/r/dailyprogrammer/">Daily programmer</a></li>
<li><a href="http://rubyquiz.com/">Ruby Quiz</a></li>
<li><a href="https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions">5 essential phone screens</a></li>
<li><a href="http://courses.csail.mit.edu/iap/interview/materials.php">Hacking a google interview</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Bits 2]]></title>
    <link href="http://www.adamjonas.com/blog/ruby-bits-2/"/>
    <updated>2012-12-20T12:39:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/ruby-bits-2</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Multiple Lambdas</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">exec_game</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">error_handler</span><span class="p">)</span>
</span><span class='line'>    <span class="n">game</span> <span class="o">=</span> <span class="n">games</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">game</span><span class="o">|</span> <span class="n">game</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">action</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">game</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span>
</span><span class='line'>      <span class="n">error_handler</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Lambda or Proc to Block</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">library</span> <span class="o">=</span> <span class="no">Library</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">GAMES</span><span class="p">)</span>
</span><span class='line'><span class="n">printer</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">game</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">game</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">game</span><span class="o">.</span><span class="n">system</span><span class="si">}</span><span class="s2">) - </span><span class="si">#{</span><span class="n">game</span><span class="o">.</span><span class="n">year</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">library</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">printer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Calling a method with &amp; in front of a parameter</em>
<code>tweets.each(&amp;printer)</code></p>

<p><em>Defining a method with &amp; in front of a parameter</em>
<code>def each(&amp;block)</code></p>

<figure class='code'><figcaption><span>Passing blocks around&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">each</span>
</span><span class='line'>    <span class="n">games</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">game</span><span class="o">|</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">game</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#refactored as</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">games</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript hoisting]]></title>
    <link href="http://www.adamjonas.com/blog/javascript-hoisting/"/>
    <updated>2012-12-19T12:34:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/javascript-hoisting</id>
    <content type="html"><![CDATA[<h3><a href="http://net.tutsplus.com/tutorials/javascript-ajax/quick-tip-javascript-hoisting-explained/">Hoisting Explained Video</a></h3>

<ul>
<li><p>Some variables and functions get hoisted to the top of the scope. Just the declaration, not the inialization.</p>

<ul>
<li>Recommend to put all your variable declarations at the top of the function.</li>
</ul>
</li>
<li><p>Functions are hoisted to the top too, but not function expressions.</p></li>
</ul>


<h3>Further reading</h3>

<ul>
<li><a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting">JS Scopting and Hoisting</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cache layer]]></title>
    <link href="http://www.adamjonas.com/blog/cache-layer/"/>
    <updated>2012-12-18T17:02:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/cache-layer</id>
    <content type="html"><![CDATA[<p>I was asked today to diagram the cache layer in Gitbo and stammered my way through an answer that was at-best vague and at-worst inaccurate. Our cache layer lives between the Github API and our Octokit Wrapper. We pull in the data on an authenticated user from the API and serialize the data in the user model (which allows us to access the data in multiple views). In a future refactor, we should probably be doing this in the wrapper model or even a memcache manager model.</p>

<p>Given the fact that I didn&#8217;t fully grasp the cache system that I had a heavy hand in designing, I did a little more research on the subject&#8230; The cache storage system in Rails is very modular. It uses the file system to store the cache by default, but can be customized as we did. We used <a href="https://github.com/mperham/dalli">Dalli</a> instead of <code>mem_cache_store</code> because it has support for memcached&#8217;s binary protocol. (I believe Dalli will be the default in Rails 4.)</p>

<h3>Methods</h3>

<p>From the <a href="http://guides.rubyonrails.org/caching_with_rails.html#activesupport-cache-store">documentation</a>, the main methods to call are <code>read</code>, <code>write</code>, <code>delete</code>, <code>exist?</code>, and <code>fetch</code>. The <code>fetch</code> method accepts a block and will either return an existing value from the cache or write the result to the cache if none exists.</p>

<h3>Page Caching:</h3>

<p>This allows the request for a page to be served by the webserver (nginx in our case), without ever having to hit the Rails stack. Obviously, this is highly performant, but cannot be used across all situations (e.g. where authentication is required or any actions that have before filters).</p>

<h3>Action Caching:</h3>

<p>This is similar to page caching except the incoming web request hits the Rails stack to allow the before-filters to run before the cache is served. This is the best option for when authentication and other restrictions need to be run while still serving the result of the output from a cached copy.</p>

<h3>Fragment Caching:</h3>

<p>This allows a fragment of view logic to be wrapped in a cache block and served out of the cache store when the next request comes in. We tried running this for our indexed table views, but we need to work on bettering our server-side processing before this can be fully implemented.</p>

<h3>SQL Caching:</h3>

<p>This caches the results returned by each query so that if Rails encounters the same query again for that request, it will use the cached result rather than running the query against the database again.</p>

<h3>Need to the look into&#8230;</h3>

<p>In the future, I&#8217;d like to look how we might be better able to use <code>Rack::Cache</code> to better take advantage of HTTP caching regarding freshness (expires, cache-control) and/or validation (last-modified, ETags).</p>

<h3>Further Reading:</h3>

<ul>
<li><a href="http://code.google.com/p/memcached/wiki/TutorialCachingStory">Memcache Wiki</a></li>
<li><a href="http://guides.rubyonrails.org/caching_with_rails.html">Rails Guide on Caching</a></li>
<li><a href="https://github.com/rtomayko/rack-cache">Rack cache</a></li>
<li><a href="http://nubyonrails.com/articles/memcached-basics-for-rails">Memcached basics for Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Climate and Quality]]></title>
    <link href="http://www.adamjonas.com/blog/code-climate-and-quality/"/>
    <updated>2012-12-13T11:10:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/code-climate-and-quality</id>
    <content type="html"><![CDATA[<h2>Bryan Helmkamp, founder of Code Climate</h2>

<h3>Static Analysis</h3>

<ul>
<li>object design issues</li>
<li>code style</li>
<li>potential bugs</li>
<li>security vulnerabilities</li>
<li>conformance with conventions</li>
</ul>


<p>Churn:</p>

<ul>
<li><p><a href="http://ablogaboutcode.com/2012/02/27/understanding-the-law-of-demeter/">Understanding the law of demeter</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Remote_procedure_call">remote procedure call</a></p></li>
<li><p>Could get read-only access to the repo so that we wouldn&#8217;t need to pull down issues via the api? Would use fetches to stay up to date.</p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Composite_pattern">Composite pattern</a></p></li>
<li><p>be holistic about accomplishing 80% of a problem with 20% of the work. Understand why you are</p></li>
<li><p>Game of four book. Domain driven design.</p></li>
<li><a href="https://github.com/brynary/webrat">Webrat</a></li>
<li><p>Conferences and meetups</p></li>
<li><p>Feedback on Gitbo</p>

<ul>
<li>upvote bookmarklet. missing upvote button.</li>
<li>&lt;moveable.ink></li>
<li>before i take pledges, get the owner to approve.</li>
<li>high activity&#8230; post comment to the issue if there is a pledge.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-08-03T18:14:36-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HAW-day4]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/03/haw-day4/"/>
    <updated>2012-08-03T16:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/03/haw-day4</id>
    <content type="html"><![CDATA[<p>Error:
&#8220;SystemStackError: stack level too deep&#8221;
This means that you have entered an infinite loop. e.g. you have called something on itself.</p>

<p>Need to understand inject&#8230;
http://blog.jayfields.com/2008/03/ruby-inject.html</p>

<p>struggling with this&#8230;</p>

<figure class='code'><figcaption><span>Trying to make this work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">actions</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="n">action</span><span class="p">,</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="n">controller</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_created_at</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:error_class</span> <span class="o">=&gt;</span> <span class="n">error_class</span><span class="p">,</span> <span class="ss">:error_message</span> <span class="o">=&gt;</span> <span class="n">error_message</span><span class="p">,</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">airbrake_id</span><span class="p">,</span> <span class="ss">:line_number</span> <span class="o">=&gt;</span> <span class="n">line_number</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:most_recent_notice_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_most_recent_notice_at</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:notice_hash</span> <span class="o">=&gt;</span> <span class="n">notice_hash</span><span class="p">,</span> <span class="ss">:notices_count</span> <span class="o">=&gt;</span> <span class="n">notices_count</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:project_id</span> <span class="o">=&gt;</span> <span class="n">project_id</span><span class="p">,</span> <span class="ss">:rails_env</span> <span class="o">=&gt;</span> <span class="n">rails_env</span><span class="p">,</span> <span class="ss">:resolved</span> <span class="o">=&gt;</span> <span class="n">airbrake_resolved</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:search_index_me</span> <span class="o">=&gt;</span> <span class="n">search_index_me</span><span class="p">,</span> <span class="ss">:updated_at</span> <span class="o">=&gt;</span> <span class="n">airbrake_updated_at</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>      <span class="n">actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">airbrake_action</span><span class="p">,</span> <span class="n">our_action</span><span class="o">|</span>
</span><span class='line'>        <span class="vi">@airbrake_error</span><span class="o">.</span><span class="n">our_action</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="n">airbrake_action</span><span class="o">]</span>
</span><span class='line'>        <span class="vi">@airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span>
</span><span class='line'>        <span class="vi">@airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>This is the original&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">errors</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">error</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span> <span class="o">=</span> <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">action</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:action</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">controller</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:controller</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_created_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:created_at</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">error_class</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:error_class</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">error_message</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:error_message</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">file</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_id</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">line_number</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:line_number</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_most_recent_notice_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:most_recent_notice_at</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">notice_hash</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:notice_hash</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">notices_count</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:notices_count</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">project_id</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:project_id</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">rails_env</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:rails_env</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_resolved</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:resolved</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">search_index_me</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:search_index_me</span><span class="o">]</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">airbrake_updated_at</span> <span class="o">=</span> <span class="n">error</span><span class="o">[</span><span class="ss">:updated_at</span><span class="o">]</span>
</span><span class='line'>        <span class="c1"># airbrake.send(&quot;#{key}=&quot;, value)</span>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">attribute_updater</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">airbrake_error</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3/"/>
    <updated>2012-08-02T10:55:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/02/haw-day3</id>
    <content type="html"><![CDATA[<p>Rolled back git using the sha</p>

<p>used the fresh method to collect the fresh errors in an array. then we used the flatten method to un-nest the array to acccess the objects.</p>

<p>changed the interface to show the airbrake IDs so that we can differentiate the errors with the same name</p>

<p>p291
form_tag issues an HTTP request that replaces all the content in the browser.
form_remote_tag issues an HTTP request, but processes the results with JavaScript
rather than having the browser render them directly.</p>

<p>nav
filtering
all errors inbox
checkboxes(which don&#8217;t work but do display) - have the route for signal</p>

<p>event driven programming</p>

<p>dom fields</p>

<p>cmd option i - to open the</p>

<p>collect all values int eh cb
submit the request, submit the values manually
raise params.inspect</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day2]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/08/01/haw-day2/"/>
    <updated>2012-08-01T11:31:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/08/01/haw-day2</id>
    <content type="html"><![CDATA[<p>builder pattern versus the inheritance pattern</p>

<p>no diff between slugs and permalinks</p>

<p>To install a gem from a fork</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'</span></code></pre></td></tr></table></div></figure>


<p>add validation to prevent slug nil</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD
</span><span class='line'># could also reset to a specific point in time
</span><span class='line'>git reset --hard &lt;sha&gt;</span></code></pre></td></tr></table></div></figure>


<p>HEAD is the current version</p>

<p>delete local branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -d initial-error-tagging
</span><span class='line'>#to delete the remote...
</span><span class='line'>♕ git push origin :initial-error-tagging</span></code></pre></td></tr></table></div></figure>


<p>GOALS:
1. normalize the tag_names DONE</p>

<ol>
<li>should be able to mark the error as ignore and rerun the importer and when it&#8217;s reimported it should still be marked as ignored&#8230;.</li>
<li>inbox not show you errors with tag ignore</li>
<li>if we reimport these errors they need to maintain their tags (is this )
does the count update?</li>
</ol>


<p> look into scopes&#8211; need to filter ignore off the index
read about named scopes on mongoid
http://mongoid.org/en/mongoid/docs/querying.html#scoping
desired code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">not_ignored</span>
</span><span class='line'><span class="c1">#or better yet</span>
</span><span class='line'><span class="n">errors</span><span class="o">.</span><span class="n">fresh</span> <span class="c1"># =&gt; to get a list of errors that haven&#39;t been ignored.</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>li needs to build a show page of each error&#8217;s attributes</li>
</ol>


<p>NOTES:
Scoping - so scoping is like a filter
<a href="http://mongoid.org/en/mongoid/docs/querying.html#scoping">Mongoid scoping macro</a></p>

<figure class='code'><figcaption><span>Filtering/Scope</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tag</span><span class="o">.</span><span class="n">not_in</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;fresh&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:airbrake_errors</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">airbrake_errors</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Autocomplete for tags:
<a href="http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid">http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid</a></p>

<p><a href="http://railsforum.com/viewtopic.php?id=2151">Select all checkboxes</a>
<a href="http://www.rorexperts.com/select-and-unselect-all-checkboxes-by-selecting-single-check-t1614.html">or</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[haw-day1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1/"/>
    <updated>2012-07-31T15:15:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/31/haw-day1</id>
    <content type="html"><![CDATA[<h3>Deploying to Heroku</h3>

<p>Make sure to modify the <a href="https://devcenter.heroku.com/articles/mongohq#mongoid">mongoid.yml file</a> to config the production environment.</p>

<p><strong><em>2 major issues with the mongoid deploy:</em></strong></p>

<ol>
<li>Issue with ruby version was the first error we encountered&#8230; need to keep in that <em>mongoid only supports 1.9.3</em> this ended up being a big issue.</li>
</ol>


<p>In &#8211;> heroku logs &#8211;tail:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActionView::Template::Error (undefined method `[]' for nil:NilClass):
</span><span class='line'> 11:   &lt;/thead&gt;  
</span><span class='line'> 10:     &lt;/tr&gt;
</span><span class='line'> 12: 
</span><span class='line'> 13:   &lt;% @airbrake_errors.each_with_index do |a_e, index| %&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The other issue was to reconfigure the setting below from false to true as the</li>
</ol>


<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">ActionView</span><span class="o">::</span><span class="no">Template</span><span class="o">::</span><span class="no">Error</span> <span class="p">(</span><span class="n">images</span><span class="o">/</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="mi">144</span><span class="n">x144</span><span class="o">-</span><span class="n">precomposed</span><span class="o">.</span><span class="n">png</span> <span class="n">isn</span><span class="s1">&#39;t precompiled):</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> &lt;%= favicon_link_tag &#39;</span><span class="n">images</span><span class="o">/</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="mi">144</span><span class="n">x144</span><span class="o">-</span><span class="n">precomposed</span><span class="o">.</span><span class="n">png</span><span class="s1">&#39;, :rel =&gt; &#39;</span><span class="n">apple</span><span class="o">-</span><span class="n">touch</span><span class="o">-</span><span class="n">icon</span><span class="o">-</span><span class="n">precomposed</span><span class="s1">&#39;, :type =&gt; &#39;</span><span class="n">image</span><span class="o">/</span><span class="n">png</span><span class="s1">&#39;, :sizes =&gt; &#39;</span><span class="mi">144</span><span class="n">x144</span><span class="s1">&#39; %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> app/views/layouts/application.html.erb:19:in `_app_views_layouts_application_html_erb___1957659516384225917_21931620&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rewriting the writer</h3>

<figure class='code'><figcaption><span>Change the tag writer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>    <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#the find_or_create_by wasn&#39;t creating unique tag names</span>
</span><span class='line'>      <span class="c1">#the reason was because we were linking too many methods together</span>
</span><span class='line'>      <span class="c1">#mongoid is finicky</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># was changed to...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># but we discoved that the tags were no disappearing if they were left off the form</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tag_names</span><span class="o">=</span><span class="p">(</span><span class="n">string_of_names</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">#later we added this line because tags were persisting even if we tried to edit them.</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="n">string_of_names</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_name</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tag</span> <span class="o">=</span> <span class="no">Tag</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tag_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>the last td was changed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&lt;</span><span class="sx">% @airbrake_errors.each_with_index </span><span class="k">do</span> <span class="o">|</span><span class="n">a_e</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;tr&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="sx">%= a_e.tags.collect{ |tag|</span>
</span><span class='line'><span class="sx">         link_to(tag.name, tag_path(tag)) #=</span><span class="o">&gt;</span> <span class="s2">&quot;&lt;a href=&quot;</span><span class="n">adasda</span><span class="s2">&quot;&gt;Tag&lt;/a&gt;&quot;</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html_safe</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">     &lt;/td&gt;</span>
</span><span class='line'>      <span class="c1"># this needs to be better understood-- TODO</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HTTP Authentication</h3>

<p><a href="http://stackoverflow.com/questions/3839167/is-there-a-way-to-set-up-simple-http-authentication-for-an-app-on-heroku">This did it</a>.</p>

<h3>Pushing the seed file to heroku</h3>

<figure class='code'><figcaption><span>the last td was changed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♕</span> <span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:seed</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake tasks]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/31/rake-tasks/"/>
    <updated>2012-07-31T11:54:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/31/rake-tasks</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>This is a rake task file&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:load_errors</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">AirbrakeError</span><span class="o">.</span><span class="n">import_from_airbrake</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In heroku I would run this:</p>

<figure class='code'><figcaption><span>This is a rake task file&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♕</span> <span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">load_errors</span>
</span><span class='line'><span class="c1"># NOT</span>
</span><span class='line'><span class="err">♕</span> <span class="n">heroku</span> <span class="n">run</span> <span class="n">rake</span> <span class="n">task</span> <span class="n">bandaid</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW- Day0]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/30/haw-day0/"/>
    <updated>2012-07-30T10:13:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/30/haw-day0</id>
    <content type="html"><![CDATA[<p>Pivotal:
Move from icebox to current
Click Start
Each story is either a feature, a bug, or a chore</p>

<p>Generate our app
Some sort of layout
beginning data model
- main model
- tag model
Import script to retreive that data off the API</p>

<p>Views/Controllers
- index view
- tagging</p>

<p>Keep commits small and never develop in the master branch</p>

<p>Git:
Git create the repo
git clone the repo
git merge mongoid-setup &#8211;no-ff #no FF- will show the branch even after the commmit</p>

<p>Mongoid-
rails new myapp -O (&#8211;skip-active-record)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'mongoid', "~&gt; 3.0.0"</span></code></pre></td></tr></table></div></figure>


<p>Twitter Bootstrap
gem twitter-bootstrap</p>

<p>Airbrake Gem</p>

<p>Powder Gem
gem install powder
makes app available at airbrake.dev</p>

<p>Immediately want to start creating the &#8216;error model&#8217;, but error is a terrible title so call it airbrake model</p>

<p>Routes:
change index to errors#index</p>

<p>Generate airbrake_errors model
Generate errors_controller
Generate bootstrap</p>

<figure class='code'><figcaption><span>Fluid Layout</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">bootstrap</span> <span class="n">layout</span> <span class="n">application</span> <span class="n">fluid</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>In Console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AirbrakeError</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Test&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>in the test unit, want to check that AirbrakeError.delete_all
test to make sure the airbrake API gem tried to connect</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">AirbrakeError</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create initializer to config the connection to airbrake</p>

<h3>Next Steps</h3>

<p>build out the bootstrap layout
build the import script</p>

<p>Ruby Debugger: TODO
gem debugger at the bottom of the gem file
bundle</p>

<p>inspect the hashiemashie to see how the objects are composed</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">import_from_airbrake</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="no">AirbrakeAPI</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Airbrake Doc:
Can make calls to get a list of errors in general and a call to get more info about an error.
-The api in general isn&#8217;t all that detailed.</p>

<p>There is a diff between .error(&#8216;id&#8217;) and .errors &#8211; the difference is in what is returned&#8211; i.e. the backtrace etc.</p>

<p>check out what notices because we are probably interested more in the notice than the error itself.</p>

<figure class='code'><figcaption><span>Maybe Something Like This?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">ignore</span>
</span><span class='line'>  <span class="no">AirbrakeAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:resolved</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Diff between error and notice: an error is a unique conceptual item and a notice is the occurance of the error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="n">h</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="n">b</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'><span class="c1">#this is the same as the dynamic dispatching method</span>
</span><span class='line'><span class="n">airbrake</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>From there let&#8217;s go to the view and start formatting the output</p>

<p>Ruby alias method&#8211; this is built into ruby not rails or mongoid</p>

<figure class='code'><figcaption><span>airbrake_error.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span> <span class="ss">:name</span> <span class="ss">:error_message</span>
</span></code></pre></td></tr></table></div></figure>


<p>TIPS and Tricks section:
Gem Server shows the documentation locally</p>

<p><a href="http://www.codinghorror.com/">Jeff Atwood</a></p>

<p>LOOK-UP &#8216;Client&#8217;, &#8216;tap&#8217;, &#8216;send&#8217;
dynamic dispatch and the send method
rails cycle
Moped::BSON: &#8211; how it generates its unique IDs</p>

<p>GIT STUFF:</p>

<figure class='code'><figcaption><span>airbrake_error.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">pull</span> <span class="o">--</span><span class="n">rebase</span> <span class="c1">#=&gt; if the remote has merges, rewind and then move back forward</span>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="no">HEAD</span> <span class="c1">#=&gt; go to the last checkout (HEAD of the branch) without the warnings (hard)</span>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="c1"># save changes</span>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">pop</span> <span class="c1">#restore changes</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>airbrake_error.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">status</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">link</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">airbrake</span>
</span><span class='line'><span class="n">M</span>  <span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">airbrake_error</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">M</span>  <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">errors</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span>
</span><span class='line'><span class="no">Switched</span> <span class="n">to</span> <span class="n">a</span> <span class="kp">new</span> <span class="n">branch</span> <span class="s1">&#39;link-to-airbrake&#39;</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;added airbrake_url method and link_to in views&quot;</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">push</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">checkout</span> <span class="n">master</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">link</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">airbrake</span>
</span><span class='line'><span class="err">♕</span> <span class="n">git</span> <span class="n">push</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 7 -Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails/"/>
    <updated>2012-07-29T14:20:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/29/lecture-7-rails</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Song class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">genre_name</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">genres</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">g</span><span class="o">|</span> <span class="n">g</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">genre_name</span><span class="o">=</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">strip</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'>    <span class="no">SongGenre</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:genre</span> <span class="o">=&gt;</span> <span class="no">Genre</span><span class="o">.</span><span class="n">find_or_create_by_name</span><span class="p">(</span><span class="n">genre_name</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>an album has many songs&#8230; which means the accepts nested attributes for will be a good fit</p>

<h3>Nested Resource</h3>

<p>begins with the routes</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested Model Form Rails Cast</a></p>

<p><a href="http://blog.aviflombaum.com/blog/2012/07/dont-use-accepts-nested-attributes-for-with-belongs-to/"><strong><em>Dont&#8217; use nested attributes for a belongs_to association</em></strong></a></p>

<p>mass assignment and the .build(params[:user_name])</p>

<p>Form_for (2:40)</p>

<h3>Layouts and Sub-layouts</h3>

<figure class='code'><figcaption><span>On the Index Page</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% content_for </span><span class="ss">:sub_nav</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= link_to &quot;New Song&quot;, new_song_path %&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx"> # this could also be on the show page so they would share this sub_nav</span>
</span><span class='line'><span class="sx"> &lt;nav class=&quot;sub_nav&quot;&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="k">yield</span> <span class="ss">:sub_nav</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;% end %&gt;</span>
</span><span class='line'> <span class="c1"># this works because you create another yield in the app besides the body</span>
</span></code></pre></td></tr></table></div></figure>


<p>you can open up a sublayout as many times as you want to add links&#8230;</p>

<p><a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current">link_to_unless_current</a>- it just creates the title, not the link to its own page&#8230; useful for nav bars</p>

<p>polymorphic interfaces: depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mixtape_path</span><span class="p">(</span><span class="vi">@mixtape</span><span class="p">)</span> <span class="c1">#=&gt; &#39;/mixtapes/1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>real life e.g.s
subway slot can accept a metrocard and a credit card&#8211; depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</p>

<p>render is another flexible polymorphic object-</p>

<figure class='code'><figcaption><span>Rending Partials in a Collection- very important</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= render @mixtape.songs %&gt;</span>
</span><span class='line'><span class="sx">#Down a level of abstraction since it reveals the collection and partial:</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">render</span> <span class="ss">:collection</span> <span class="o">=&gt;</span> <span class="vi">@mixtape</span><span class="o">.</span><span class="n">songs</span><span class="p">,</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="n">songs</span><span class="o">/</span><span class="n">song_li</span><span class="err">&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:song</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Cast Variables</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= render &#39;songs/fields&#39;, :f =</span><span class="o">&gt;</span> <span class="n">song_form</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If skip album name is true, then
(3:40)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="n">include_album_name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=&quot;field&quot;&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="sx">% f.label </span><span class="ss">:album</span> <span class="sx">%&gt; &lt;br /&gt;</span><span class="c1">#more code....</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#asset-tag-helpers">Passing Local Variables into Partials</a>&#8230; need to scroll down a little</p>

<p>write_attribute</p>

<p><a href="http://www.davidverhasselt.com/2011/06/28/5-ways-to-set-attributes-in-activerecord/">5 ways to set attributes in ActiveRecord</a></p>

<p>Could use callbacks and lifecycle hooks to normalize as well&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_validate</span> <span class="ss">:normalize_name</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_name</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB &amp; Mongoid]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/28/mongodb-and-mongoid/"/>
    <updated>2012-07-28T12:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/28/mongodb-and-mongoid</id>
    <content type="html"><![CDATA[<p><a href="http://blog.wiemann.name/mongoid-cheat-sheet">Mongo Cheat Sheet</a></p>

<h1>NoSQL</h1>

<p>Non-relational, next-generation operational datastores and databases
-databases designed for the web and attacking the traditional problems that traditional DBs have such as scaling out.</p>

<p>-Horizontally scalable architectures => no joins + no complex transactions</p>

<p>Datamodels:</p>

<ol>
<li>Key / Value Stores - (memcached, Dynamo)</li>
<li>Tabular (BigTable) - a hybrid</li>
<li>Document Oriented (MongoDB, CouchDB)</li>
</ol>


<p>Memcached and key/value are high on the scalability and performance side, but low on depth of functionality</p>

<p>RDBMS (relational database management systems) - strong depth of functionality with join models etc., low on the scalability and performance scale.</p>

<p>MongoDB- try to get the scalability and performance of a key/value store and try to make as functional as possible</p>

<p>What&#8217;s Missing?
- Joins
- Complex multi-row transactions
- SQL</p>

<p>Terminology:
In RDBMS // MongoDB
 - database => database like in MySQL
 - table => collection
 - row => document</p>

<p> MongoDB uses JSON style documents called BSON (binary JSON)</p>

<h2>-There are not predefined schemas, can use nested structures to embed complex values based on the keys</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post = {author: "mike",
</span><span class='line'>date: new Date (),
</span><span class='line'>text: "my blog post",
</span><span class='line'>tags: ["mongodb", "intro"]} 
</span><span class='line'>
</span><span class='line'>db.posts.save(post)</span></code></pre></td></tr></table></div></figure>


<p>MongoDB expects to have every document to have a &#8216;_id&#8217; key&#8211; it&#8217;s a <strong>*unique primary key</strong>**</p>

<h3>Dynamic Queries</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.posts.find({author: "mike"})
</span><span class='line'>
</span><span class='line'>#more advanced
</span><span class='line'>db.posts.find()
</span><span class='line'>        .sort({date: -1})
</span><span class='line'>        .limit(10)</span></code></pre></td></tr></table></div></figure>


<p>MongoDB has its own document based query language.</p>

<h3>Indexing</h3>

<p>B-Tree indexes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.posts.ensureIndex({tags: 1})
</span><span class='line'>
</span><span class='line'>#Indexing / Querying on Embedded Docs (dot notation)
</span><span class='line'>db.posts.find({"comments.author": "eliot"})
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Focus on Performance</em></strong>:
Don&#8217;t use REST to talk to the database. Use a binary TCP wire protocol because it is faster.</p>

<h3>Replica Sets</h3>

<p>similar to master-slave replication, but there is a primary and secondary node</p>

<h3>Auto-sharding</h3>

<ul>
<li>split up the data so certain shards (which are groups of nodes- replica set or master //slave) are responsible for some subset of the data</li>
</ul>


<p><a href="http://www.youtube.com/watch?v=bwAqN9l14kI">Intro video</a></p>

<p><a href="http://www.mongodb.org/display/DOCS/MongoDB+Data+Modeling+and+Rails">###Types###</a></p>

<h2>Mongoid</h2>

<p><a href="http://blog.wiemann.name/mongoid-cheat-sheet">Cheatsheet</a>
<a href="http://vimeo.com/9864311">Intro by the creator</a>
<a href="http://railscasts.com/episodes/238-mongoid">RailsCast</a>
<a href="http://mongoid.org/en/mongoid/">Docs</a></p>

<p>-Mongoid by default stores documents in a collection that is the pluralized form of the class name. For the following Person class, the collection the document would get stored in would be named people.</p>

<p>When a document is stored in the database the ruby object will get serialized into BSON and have a structure like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "_id" : ObjectId("4d3ed089fb60ab534684b7e9"),
</span><span class='line'>  "title" : "Sir",
</span><span class='line'>  "name" : {
</span><span class='line'>    "_id" : ObjectId("4d3ed089fb60ab534684b7ff"),
</span><span class='line'>    "first_name" : "Durran"
</span><span class='line'>  },
</span><span class='line'>  "addresses" : [
</span><span class='line'>    {
</span><span class='line'>      "_id" : ObjectId("4d3ed089fb60ab534684b7e0"),
</span><span class='line'>      "city" : "Berlin",
</span><span class='line'>      "country" : "Deutschland"
</span><span class='line'>    }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Querying</h3>

<figure class='code'><figcaption><span>Mongoid Querying</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Band</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Depeche Mode&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">Band</span><span class="o">.</span>
</span><span class='line'>  <span class="n">where</span><span class="p">(</span><span class="ss">:founded</span><span class="o">.</span><span class="n">gte</span> <span class="o">=&gt;</span> <span class="s2">&quot;1980-1-1&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="k">in</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="o">[</span> <span class="s2">&quot;Tool&quot;</span><span class="p">,</span> <span class="s2">&quot;Deftones&quot;</span> <span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">union</span><span class="o">.</span>
</span><span class='line'>  <span class="k">in</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="o">[</span> <span class="s2">&quot;Melvins&quot;</span> <span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Attributes</h3>

<p>All relations contain a target, which is the proxied document or documents, a base which is the document the relation hangs off, and metadata which provides information about the relation.</p>

<p>attr_accessible and validation are the same in Mongo as in ActiveRecord</p>

<p>embeds_many similar to has_many => but the information is embedded in the document rather than in a separate record like in ActiveRecord. Will I need to fetch this record outside of the parent? If so, I need than has_many makes more sense. The advantage of course is that the information is right inside that record.</p>

<p><strong><em>Embedded 1-1 relationships</em></strong>
:    The parent document of the relation should use the embeds_one macro to indicate is has 1 embedded child, where the document that is embedded uses embedded_in.</p>

<p><strong>*Embedded 1-Many</strong>**
:   The parent document of the relation should use the embeds_many macro to indicate it has n number of embedded children, where the document that is embedded uses embedded_in.</p>

<p><strong><em>Referenced 1-1</em></strong>
:    The parent document of the relation should use the has_one macro to indicate is has 1 referenced child, where the document that is referenced in it uses belongs_to.</p>

<p><strong><em>Referenced Many-to-Many</em></strong>
:    Many to many relationships where the inverse documents are stored in a separate collection from the base document are defined using Mongoid&#8217;s has_and_belongs_to_many macro. This exhibits similar behavior to Active Record with the exception that no join collection is needed, the foreign key ids are stored as arrays on either side of the relation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Airbrake]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/27/airbrake/"/>
    <updated>2012-07-27T12:23:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/27/airbrake</id>
    <content type="html"><![CDATA[<p>Airbrake is basically wrapped around a begin rescue block&#8230;
The app doesn&#8217;t break AND the error is sent to the application.</p>

<p>There are errors in apps that happen that you don&#8217;t care about, then there are show-stoppers.
- Solution: rebuild a dashboard to ignore the errors or use airbrake to config their own errors.</p>

<p>?How do you decide what kinds of errors are important</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AirbrakeAPI::Errors</span></code></pre></td></tr></table></div></figure>


<p>after you instantite the credientials, you need to create the connections
- learned this via the spec/client_spec</p>

<p>Keep running into the <a href="http://www.dzone.com/snippets/hashdeepmerge">deep_merge</a> undefined method. According to their specs, Airbreak assumes that the gems in the specs should be included in the library. They assume that people won&#8217;t be using this outside of rails, which is a big assumption.</p>

<p>HashieMashie- hashes behave as both as regular hash and as an object</p>

<p>Once the proper gems are required it works properly.
If this library had corrected all of the dependencies in it&#8217;s stand along library, this would have been fine&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ gem install airbrake-api
</span><span class='line'>♕ irb
</span><span class='line'> :001 &gt; require 'active_support'
</span><span class='line'> =&gt; true 
</span><span class='line'> :002 &gt; require 'active_support/core_ext'
</span><span class='line'> =&gt; true 
</span><span class='line'> :003 &gt; require 'i18n'
</span><span class='line'> =&gt; false 
</span><span class='line'> :004 &gt; require 'airbrake'
</span><span class='line'> =&gt; true 
</span><span class='line'> :005 &gt; require 'airbrake-api'
</span><span class='line'> =&gt; true 
</span><span class='line'> :006 &gt; AirbrakeAPI.configure(:account =&gt; 'gearshare', :auth_token =&gt; 'authcodehere', :secure =&gt; true)
</span><span class='line'> =&gt; AirbrakeAPI 
</span><span class='line'> :007 &gt; AirbrakeAPI.new
</span><span class='line'>NoMethodError: undefined method `new' for AirbrakeAPI:Module
</span><span class='line'> :008 &gt; AirbrakeAPI::Client.new
</span><span class='line'> =&gt; #&lt;AirbrakeAPI::Client:0x007fe102901880 @account="gearshare", @auth_token="authcode", @secure=true, @connection_options={}, @adapter=:net_http, @user_agent="AirbrakeAPI Ruby Gem 4.1.0"&gt; 
</span><span class='line'> :009 &gt; a = _
</span><span class='line'> =&gt; #&lt;AirbrakeAPI::Client:0x007fe102901880 @account="gearshare", @auth_token="authcode", @secure=true, @connection_options={}, @adapter=:net_http, @user_agent="AirbrakeAPI Ruby Gem 4.1.0"&gt; 
</span><span class='line'> :010 &gt; a.errors</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BadAss Keyboard Shortcuts]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/25/badass-keyboard-shortcuts/"/>
    <updated>2012-07-25T17:49:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/25/badass-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>shift, cmd, T &#8211; open the last tab closed in chrome and FF</p>

<p>And of course <a href="https://www.shortcutfoo.com/">shortcut foo</a> is awesome too!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake routes | grep mixtape</span></code></pre></td></tr></table></div></figure>


<p>Will only show the routes that match this resource.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/25/postgres/"/>
    <updated>2012-07-25T11:00:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/25/postgres</id>
    <content type="html"><![CDATA[<p><a href="http://russbrooks.com/2010/11/25/install-postgresql-9-on-os-x">Install of postgresql on Mac OS X</a></p>

<p><a href="http://stackoverflow.com/questions/6710654/how-do-you-easily-change-from-sqlite-to-postgresql-in-rails">How do you easily change from SQLite to PostgreSQL in Rails</a> It hasn&#8217;t been a seemless transition for me. At least the first time around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/24/heroku/"/>
    <updated>2012-07-24T15:07:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/24/heroku</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add heroku git@heroku.com:gearshare.git
</span><span class='line'>fatal: remote heroku already exists.</span></code></pre></td></tr></table></div></figure>


<p><a href="http://digitalsanctum.com/2010/05/05/heroku-no-app-specified/">See</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#this initializes the heroku repo
</span><span class='line'>♕ heroku create #i'm sure I can name the app here, instead of the below steps
</span><span class='line'>Creating ancient-tor-4530... done, stack is cedar
</span><span class='line'>http://ancient-tor-4530.herokuapp.com/ | git@heroku.com:ancient-tor-4530.git
</span><span class='line'>Git remote heroku added
</span><span class='line'>
</span><span class='line'>#check to see what remotes I've set up
</span><span class='line'>♕ git remote -v
</span><span class='line'>heroku    git@heroku.com:ancient-tor-4530.git (fetch)
</span><span class='line'>heroku    git@heroku.com:ancient-tor-4530.git (push)
</span><span class='line'>origin    https://github.com/ajonas04/*appname*.git (fetch)
</span><span class='line'>origin    https://github.com/ajonas04/*appname*.git (push)
</span><span class='line'>
</span><span class='line'># need to remove heroku so that I can rename it
</span><span class='line'>♕ git remote rm heroku
</span><span class='line'>
</span><span class='line'>#add new name
</span><span class='line'>♕ git remote add heroku git@heroku.com:*appname*.git</span></code></pre></td></tr></table></div></figure>


<p>I was missing this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku run rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>as outlined in the rails3 basics <a href="https://devcenter.heroku.com/articles/rails3">here&#8230;</a></p>

<p>See how to point domains to your heroku project <a href="https://devcenter.heroku.com/articles/custom-domains">here</a>.</p>

<p><strong>Linking Local Branches to Remote Apps:</strong>*</p>

<p>Heroku is designed only to accept pushes from master. In order to push from a feature branch you need to do something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ git push heroku branch_name:master</span></code></pre></td></tr></table></div></figure>


<p>This says push branch named &#8216;branch_name&#8217; to heroku but call it master. <a href="https://devcenter.heroku.com/articles/multiple-environments#advanced-linking-local-branches-to-remote-apps">Explanation</a></p>

<p>Also look at rake tasks for heroku&#8230; its on the rake task post&#8230;</p>

<h3>Pushing the seed file to heroku</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ heroku run rake db:seed</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Airbrake]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/24/airbrake/"/>
    <updated>2012-07-24T14:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/24/airbrake</id>
    <content type="html"><![CDATA[<p><a href="https://airbrake.io/pages/home">Airbreak</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 6- Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/23/lecture-6-rails/"/>
    <updated>2012-07-23T19:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/23/lecture-6-rails</id>
    <content type="html"><![CDATA[<p>if it has a belongs_to it has a foreign key&#8230;
e.g. songs belong to an artist, so it must have an artist_id</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#the return value of this is all the songs </span>
</span><span class='line'><span class="n">aretha</span><span class="o">.</span><span class="n">song</span> <span class="o">&lt;&lt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Natural Woman&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#this is just one song</span>
</span><span class='line'><span class="n">respect</span> <span class="o">=</span> <span class="n">aretha</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Respect&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>7:27</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">favorites</span><span class="o">.</span><span class="n">mixtape_songs</span><span class="o">.</span><span class="n">build</span> <span class="ss">:song</span> <span class="o">=&gt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s2">&quot;Thriller&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#these accomplish the same thing, but above is more expressive</span>
</span><span class='line'><span class="n">favorites</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure>


<p>the first level of keys in the params hash is usually scope.</p>

<p>what is params?
- user passes in data through forms
- rails takes that data and makes it easy to access through forms</p>

<p>so <em>accepts_nested_attributes</em> is a way for you to specify that this model should accept data for its associations</p>

<p>field_for
f.fields_for :song_genres
is accessing params[:song][:song_genres]</p>

<h3>Select Boxes</h3>

<p>select(method, choices, options = {}, html_options = {})</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">song_genre</span><span class="o">.</span><span class="n">select</span> <span class="ss">:genre_id</span><span class="p">,</span> <span class="o">[</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;Rap&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;Pop&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;Whatever&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>  <span class="o">]</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Text Boxes</strong>:
adding functionalty</p>

<p><strong><em>classes are data and behavior</em></strong>
we have added behavior to the song_genre model because this is the only place the genre_id is being stored.</p>

<p><em>LookUp</em> Ruby try method</p>

<figure class='code'><figcaption><span>Delegate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">delegate</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:genre</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:allow_nils</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="c1">#the above macro is the same as the method below method.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">genre_name</span>
</span><span class='line'>  <span class="n">genre</span><span class="o">.</span><span class="n">name</span> <span class="k">if</span> <span class="n">genre</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Normalization</h3>

<p>the incision point for normalization are easy to do on writer. but if you are using a vanilla writer, then don&#8217;t write a normalizer just to normalize. Use a gem or something.</p>

<figure class='code'><figcaption><span>Delegate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">:uniq</span>
</span><span class='line'><span class="no">If</span> <span class="kp">true</span><span class="p">,</span> <span class="n">duplicates</span> <span class="n">will</span> <span class="n">be</span> <span class="n">omitted</span> <span class="n">from</span> <span class="n">the</span> <span class="n">collection</span><span class="o">.</span> <span class="no">Useful</span> <span class="k">in</span> <span class="n">conjunction</span> <span class="n">with</span> <span class="ss">:through</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>in general this goes on the through model&#8230; which doesn&#8217;t make all that much sense, but that&#8217;s how it goes on many to many relationships
This isn&#8217;t preventing the creation of duplicates, it&#8217;s just treating duplicates as singular&#8211; total crap</p>

<p>8:15
Allow destroy
with a checkbox</p>

<h3>Validations</h3>

<figure class='code'><figcaption><span>Delegate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#following valdiation rule is a constraint on the following attribute</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:maximum</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">}</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:uniqueness</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:song_id</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">See rails guides validations</a>
<a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#uniqueness">specifically uniqueness</a></p>

<h3>Technical Debt</h3>

<p>Technical debt (also known as design debt or code debt) is a neologistic metaphor referring to the eventual consequences of poor or evolving software architecture and software development within a codebase. The debt can be thought of as work that needs to be done before a particular job can be considered complete.</p>

<p>in console can call .valid? to debug and see if an object is valid.</p>

<h3>When debugging&#8230;</h3>

<p>try to reduce abstraction
-actually need to debug the problem at hand</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a profile page]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/23/building-a-profile-page/"/>
    <updated>2012-07-23T14:32:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/23/building-a-profile-page</id>
    <content type="html"><![CDATA[<p><a href="http://rails.francik.name/tutorial/chapter/6">login and security</a>
<a href="http://rails.francik.name/tutorial/chapter/8">extending a profile in rails</a></p>

<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-in">How to redirect to a specific page on successful sign in</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 5- Rails]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails/"/>
    <updated>2012-07-22T14:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/22/lecture-5-rails</id>
    <content type="html"><![CDATA[<p>HOMEWORK:</p>

<p>In the migration:</p>

<figure class='code'><figcaption><span>In the migration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>  <span class="n">add_column</span> <span class="ss">:songs</span><span class="p">,</span> <span class="ss">:album_id</span><span class="p">,</span> <span class="ss">:integer</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#should probably make the below code in the rake tasks (in seed/tasks)</span>
</span><span class='line'>  <span class="n">songs</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>    <span class="n">album</span><span class="o">=</span> <span class="no">Album</span><span class="o">.</span><span class="n">find_or_create_by_name</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">album_name</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#update those songs to relate to that album</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;UPdating song </span><span class="si">#{</span><span class="n">s</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2"> to album </span><span class="si">#{</span><span class="n">album</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">...&quot;</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">album</span><span class="o">=</span> <span class="n">album</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">remove_column</span> <span class="ss">:songs</span><span class="p">,</span> <span class="ss">:album_name</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some other methods:</p>

<p>find_each method: look it up in guides <a href="http://guides.rubyonrails.org/active_record_querying.html">here</a>.
find_each yields each individual object one at a time
find_in_batches it yields songs</p>

<p>in the seeds file:</p>

<figure class='code'><figcaption><span>Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">aretha</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">create</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Aretha Franklin&quot;</span>
</span><span class='line'><span class="n">respect</span> <span class="o">=</span> <span class="n">aretha</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">build</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Respect&quot;</span>
</span><span class='line'><span class="n">aretha</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#many to one, the reverse of above</span>
</span><span class='line'><span class="n">monster</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">create</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Monster&quot;</span>
</span><span class='line'><span class="n">monster</span><span class="o">.</span><span class="n">build_artist</span> <span class="nb">name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Kanye West&quot;</span>
</span><span class='line'><span class="n">monster</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="n">aretha</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Natural Woman&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#unintentional performance issue here because it loads the full array</span>
</span><span class='line'><span class="c1">#in order to push one song into it</span>
</span><span class='line'>
</span><span class='line'><span class="n">kanye</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">find_by_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Kanye West&quot;</span>
</span><span class='line'><span class="n">kanye</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Home&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">michael</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">create</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Michael Jackson&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">michael</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="s2">&quot;Black and white&quot;</span><span class="p">,</span> <span class="s2">&quot;Thriller&quot;</span><span class="p">,</span> <span class="s2">&quot;beat it&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">song_name</span><span class="o">|</span>
</span><span class='line'><span class="c1"># need collect instead of each method b/c need the return</span>
</span><span class='line'>  <span class="n">song</span><span class="o">.</span><span class="n">create</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">song_name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">michael</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="no">Song</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s2">&quot;Black and white&quot;</span><span class="p">,</span> <span class="s2">&quot;Thriller&quot;</span><span class="p">,</span> <span class="s2">&quot;beat it&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will output the log output of the rake tasks:</p>

<figure class='code'><figcaption><span>Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="n">log</span><span class="o">/</span><span class="n">development</span><span class="o">.</span><span class="n">log</span>
</span></code></pre></td></tr></table></div></figure>


<p>update the forms in the application (2:50)</p>

<p>Shortcut: cmd D shortcut to highlight similar words to edit</p>

<p>errors:
when you get a stack trace and it&#8217;s part of rails you can ignore it because you created the file NOT rails.</p>

<h3>has_many :through</h3>

<p>(2:58)
artists have many albums through their songs
- a many to many association</p>

<p>if a model has 2 :belongs_to associations means that it is a join table
even though it is a join model is has all the same behaviors as a has_many assoc</p>

<p>INNER JOIN is SQL:
The INNER JOIN keyword return rows when there is at least one match in both tables.</p>

<h3>Foreign Key/ belongs_to RULE</h3>

<p>if it belongs_to xyz it is a foreign key. if it is a foreign key than it belongs_to xyz.</p>

<figure class='code'><figcaption><span>Seeds File from the lab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">avi</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Avi&quot;</span>
</span><span class='line'>  <span class="n">favorites</span> <span class="o">=</span> <span class="no">Mixtape</span><span class="o">.</span><span class="n">create</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Avi&#39;s favs&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">avi</span><span class="o">.</span><span class="n">mixtapes</span> <span class="o">&lt;&lt;</span> <span class="n">favorites</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">black_and_white</span> <span class="o">=</span> <span class="n">michael</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">black_and_white</span><span class="o">.</span><span class="n">genres</span><span class="o">.</span><span class="n">build</span> <span class="c1">#when it&#39;s a many it is genres.build</span>
</span><span class='line'>  <span class="c1">#singular is build_genre</span>
</span><span class='line'>  <span class="n">black_and_white</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">favorites</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="n">black_and_white</span>
</span><span class='line'>  <span class="n">favorites</span><span class="o">.</span><span class="n">mixtape_songs</span><span class="o">.</span><span class="n">build</span> <span class="ss">:song</span> <span class="o">=&gt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="s2">&quot;Thriller&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#(4:34)</span>
</span><span class='line'>  <span class="c1">#if you understand :belongs_to and has_many it doesn&#39;t matter if it&#39;s a :through</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">UserMixtape</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Roland&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="ss">:mixtape</span> <span class="o">=&gt;</span> <span class="n">favorites</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Forms</h3>

<p><strong>How do we build forms that give users the same abilities we have through forms?</strong>
If a field name end in an [], it will allow multiple fields and rails will treat it as unique values and glob them together in a params array (4:46)
- If you want to have multiple fields anem it with an empty array</p>

<p>in the mixtapes_controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@mixtape</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:song_ids</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#this would also work</span>
</span><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:song_ids</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song_id</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@mixtape</span><span class="o">.</span><span class="n">mixtape_songs</span><span class="o">.</span><span class="n">build</span> <span class="ss">:song</span> <span class="o">=&gt;</span> <span class="n">song_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next level of abstraction up&#8230; (4:55)
in the html we want to pass in:
mixtape[song_ids][]</p>

<p>??Mass assignment is this accordian of ____
a writer method implies an attribute of a model
<strong>Main goal as a programmer</strong> name your data so that it is easily accessbile in params</p>

<p>TODO (5:03)
HTML:
scope, attribute, attribute kind</p>

<h3>form_tag helper</h3>

<p>NEXT: <em>A rails implementation: form_tag helper</em>, a low level rails helper
all these methods do is generate html for you. not all that railsy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">form_tag</span> <span class="n">mixtapes_path</span> <span class="k">do</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At least we aren&#8217;t writing HTML here now&#8230; this level of implementation gives you lots of flexibility and control but at the expense of maintainability and explicitness.</p>

<h3>form helper builders</h3>

<p><em>html, form_tag helpers family, form helpers in order of low level of abstraction to higher</em>
want to bind the active record object to the form element
e.g. text_field, label
(5:17)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= label :mixtape, :name %&gt; #:mixtape represents @mixtape, but rails doesn&#39;t support @mixtape</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">text_field</span> <span class="ss">:mixtape</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>form_for</h3>

<p>We want to bind the instance var to the form itself
- the problem with text_field is that hte form is still built without any knowledge of the active record instance behind the form &#8211;> it should be an extension of the object
- these are the way our scaffolds normally work</p>

<p>form_for method yields a form builderthat knows the model the form is about</p>

<p>mixtape_form.object would return the mixtape object because it has knowledge of the form object</p>

<p>you also get access to <em>fields_for</em> -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mixtape_form</span><span class="o">.</span><span class="n">fields_for</span> <span class="ss">:mixtape_songs</span><span class="p">,</span> <span class="vi">@mixtape</span><span class="o">.</span><span class="n">mixtape_songs</span><span class="o">.</span><span class="n">build</span><span class="p">,</span> <span class="ss">:index</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="k">do</span>
</span><span class='line'><span class="o">|</span><span class="n">mixtape_songs_field</span><span class="o">|</span> <span class="c1">#index option will increment them automatically</span>
</span><span class='line'>  <span class="n">mixtape_songs_fields_for</span><span class="o">.</span><span class="n">label</span> <span class="ss">:song_id</span>
</span><span class='line'>  <span class="n">mixtape_songs_fields_for</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:song_id</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does your model implement a method called &#8220;mixtape_songs_attributes=&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">accepts_nested_attributes_for</span> <span class="ss">:mixtape_songs</span>
</span><span class='line'><span class="c1">#builds this method:</span>
</span><span class='line'> <span class="k">def</span> <span class="nf">mixtape_songs_attributes</span><span class="o">=</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>   <span class="n">attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute_has</span><span class="o">|</span>
</span><span class='line'>   <span class="no">MixtapeSong</span><span class="o">.</span><span class="n">build</span><span class="o">.</span><span class="n">attribute_has</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="c1"># this assigns the attributes of the mixtape_songs</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#this is the same as</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mixtape_songs_attributes</span><span class="o">=</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>   <span class="n">attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="p">,</span> <span class="n">mixtape_song_attributes</span><span class="o">|</span>
</span><span class='line'>     <span class="no">MixtapeSong</span><span class="o">.</span><span class="n">new</span> <span class="ss">:song_id</span> <span class="o">=</span> <span class="n">mixtape_song_attributes</span><span class="o">[</span><span class="ss">:song_id</span><span class="o">]</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://masonoise.wordpress.com/2010/07/23/rails-and-forms-using-accepts_nested_attributes_for/">Read</a>
<a href="http://railscasts.com/episodes/196-nested-model-form-part-1">railscast</a>
<a href="http://asciicasts.com/episodes/196-nested-model-form-part-1">ascii casts</a></p>

<p><strong>an attribute has a getter and setter method called the name of the attribute</strong></p>

<p>Rails Casts on this subject:
<a href="http://railscasts.com/episodes/47-two-many-to-many/">Many to Many</a></p>

<p><a href="http://railscasts.com/episodes/73-complex-forms-part-1/">Complex Forms - 1</a></p>

<p><a href="http://railscasts.com/episodes/74-complex-forms-part-2/">Complex Forms - 2</a></p>

<p><a href="http://railscasts.com/episodes/75-complex-forms-part-3">Complex Forms - 3</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested models 1</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-revised">Nested Models- revised</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html">API reading</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git initialization for a new repo]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/21/git-initialization-for-a-new-repo/"/>
    <updated>2012-07-21T18:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/21/git-initialization-for-a-new-repo</id>
    <content type="html"><![CDATA[<p>I know this is basic. I keep getting the steps wrong though. So I&#8217;m putting it here&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git init
</span><span class='line'>  touch README
</span><span class='line'>  git add README
</span><span class='line'>  git commit -m 'first commit'
</span><span class='line'>  git remote add origin https://github.com/ajonas04/REPO_NAME.git
</span><span class='line'>  git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p>I also ran into this during the process today:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ git remote add origin https://github.com/ajonas04/REPO_NAME.git
</span><span class='line'>fatal: remote origin already exists.
</span><span class='line'>♕ git remote rm origin
</span><span class='line'>♕ git remote add origin https://github.com/ajonas04/REPO_NAME.git</span></code></pre></td></tr></table></div></figure>


<p>I guess I needed to remove the remote origin. I can safely say, I don&#8217;t understand what&#8217;s going on here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Site Request Forgery]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery/"/>
    <updated>2012-07-21T13:08:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/21/cross-site-request-forgery</id>
    <content type="html"><![CDATA[<h3>Cross Site Request Forgery</h3>

<p>Description Summary
:  The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</p>

<p>Extended Description
:  When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</p>

<p>Ensures that information submitted through forms have a specific tag that identifies it as information submitted through the form I created. (Read more about csrf <a href="http://stackoverflow.com/questions/941594/understand-rails-authenticity-token">here</a> and <a href="http://stackoverflow.com/questions/9996665/rails-how-does-csrf-meta-tag-work">here.</a>)</p>

<p>This is the out of context code I have from class&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>csrf metatabs</span></code></pre></td></tr></table></div></figure>


<p>NOTE: We went over this in lecture 6 of ROR spring</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buzz Word Alert: Polymorphic]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/20/buzz-word-alert-polymorphic/"/>
    <updated>2012-07-20T17:57:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/20/buzz-word-alert-polymorphic</id>
    <content type="html"><![CDATA[<h3>Polymorphism</h3>

<ul>
<li>“is the ability of objects belonging to different types to respond to method calls of the same name, each one according to an appropriate type-specific behaviour.” (wikipedia)
-is a language feature that allows the same function call to be associated with different definitions during the same execution, by delaying the binding of the call to run-time. <a href="http://cs.calvin.edu/curriculum/cs/214/adams/labs/10/">here</a></li>
</ul>


<h3>Some Real Life Examples</h3>

<ul>
<li>depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mixtape_path</span><span class="p">(</span><span class="vi">@mixtape</span><span class="p">)</span> <span class="c1">#=&gt; &#39;/mixtapes/1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>real life e.g.s
subway slot can accept a metrocard and a credit card&#8211; depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</p>

<h3>Polymorphic Associations</h3>

<ul>
<li>in the <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">guides</a> it states: &#8220;With polymorphic associations, a model can belong to more than one other model, on a single association.&#8221;</li>
<li>You can think of a polymorphic belongs_to declaration as setting up an interface that any other model can use.</li>
</ul>


<p>As usual Ryan Bates to the rescue&#8211; <a href="http://railscasts.com/episodes/154-polymorphic-association?view=comments">polymorphic association rails cast.</a></p>

<p>Imagine an event website. We want to add a comments section. How would be do this because comments would belong to either the photo, article, or event.
Without polymorphic associations we would probably try to create a model for each instance&#8211; a photo comment, an article comment and an event comment. That&#8217;s 3 models with the same data and behavior so we want to combine these into one generic comment model that can belong_to any of these other models.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">scaffold</span> <span class="n">comment</span> <span class="n">content</span><span class="ss">:text</span> <span class="n">commentable_id</span><span class="ss">:integer</span> <span class="n">commentable_type</span><span class="ss">:string</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <em>polymorphic association</em> is an association that can belong_to many different models&#8230;</p>

<figure class='code'><figcaption><span>Polymorphic Association</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rails docs refer to the :as keyword parameter to has_one and has_many as specifying a “polymorphic interface.”</p>

<p>At the database level, the Comment table will have two columns for the association: commentable_type and commentable_id. <em>A composite foreign key.</em></p>

<p>To set up the other side of the association:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:commentable</span> <span class="c1">#the :as =&gt; :commentable indicates the PolyMorph assoc</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># similar code would be repeated for all of the associations-- in this case event &amp; photo</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the polymorphic bit means that the type of thing you’re going to get back when you ask a Comment for its commentable data is unknown&#8230; it could be an article or it could be an event or it could be a photo. In dynamic Ruby land, Ruby terms, this means I don’t care what I sort of model I get when I ask a comment for its commentable data, as long as it goes quack I can treat it like it’s a duck.</p>

<p>Enter <em>interfaces</em>. Interfaces specify what I want the returned object to behave like, it could be a duck, or it could be a spaceship or maybe, just maybe, it could be commentable. In fact if you read though the ActiveRecord docs on polymorphic associations, you will find that “interface” is exactly what they call the parameter passed in the :as key of the params hash, and the first parameter to a polymorphic belongs_to association, and even the xxx_type and xxx_id columns in the database. This threw me quite a bit when I first looked at polymorphic associations, you have to declare that the association uses the commentable interface, but you don’t have a commentable model, or a commentable table, or a commentable anything for that matter. To my mind, &#8220;commentable&#8221; is the name of the interface that the comments all have to implement. It could specify that all of them must have a “next_comment” method, which will give me (surprise surprise) the next comment they produce. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">(Read more on this)</a></p>

<p>My comment model does not need to be changed when I add another commentable type. This is important. Very important! As soon as anyone with even a mild case of featuritus gets near your code they are going to want to add stuff, and more often that not, that will mean adding new classes. If adding new classes means adding new branches to all your conditional logic, you are in trouble. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">See here again</a></p>

<p>Once the associations are wired, how can we use this in the controller and views?
- For the most part, this can be treated like any other has_many association. e.g. can call article.comments to list all the comments of the article.
- A lot of confusion can arise if you are doing nested resources</p>

<p>Need to change the routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">map</span><span class="o">.</span><span class="n">resources</span> <span class="ss">:articles</span><span class="p">,</span> <span class="ss">:has_many</span> <span class="o">=&gt;</span> <span class="ss">:comments</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="n">resources</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">:has_many</span> <span class="o">=&gt;</span> <span class="ss">:comments</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="n">resources</span> <span class="ss">:events</span><span class="p">,</span> <span class="ss">:has_many</span> <span class="o">=&gt;</span> <span class="ss">:comments</span>
</span><span class='line'><span class="c1"># i realize this isn&#39;t Rails 3.2 code...</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the end of the comment controller, Ryan adds the find_commentable method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_commentable</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">name</span> <span class="o">=~</span> <span class="sr">/(.+)_id$/</span>
</span><span class='line'>      <span class="k">return</span> <span class="vg">$1</span><span class="o">.</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Beyond the rails cast</h3>

<p><a href="http://teachmetocode.com/articles/ruby-on-rails-what-are-polymorphic-associations/">Charles Max Wood&#8217;s explanation</a></p>

<p>Polymorphic associations allow us to associate a single attribute of the class to any number of specified classes.
Charles suggest that you <a href="http://teachmetocode.com/articles/ruby-on-rails-polymorphic-associations-with-mixin-modules/">put your polymorphic associations and related functionality into mixin modules</a>.
<a href="http://www.youtube.com/watch?v=9NiCx1Lu-DY">Youtube Video</a>-
Polymorphic means that it can take different forms. A comment can belong_to a page or a post. Most devs name this ___able. e.g. for a comment it would be commentable. This just a convention.</p>

<p>On the has_many side this becomes a little muddy: if commentable can be a page or a post then a comment, it&#8217;s going to go looking for a page ID on the comments table and it&#8217;s not going to find it. So the solution is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:commentable</span>
</span><span class='line'><span class="c1">#saying: i have many comments and the comments refer to me as commentable</span>
</span></code></pre></td></tr></table></div></figure>


<p> If you have a belongs_to :commentable on your comment, you are going to expect it to have a commentable_id on the comments table (which it does!). But is that _id a post.id page.id? This is answers by having a commentable type column as well on the comments table&#8211; it&#8217;s a string column that stores the class name for whatever is associated there (i.e. post or page). So when you invoke joins or includes it has to go looking for the type column of commentable type.</p>

<p>Note: many to many polymorphic associations don&#8217;t seem to work very well
There is a video on this <a href="http://www.youtube.com/watch?v=vEo6hmHTvS4">here</a>.</p>

<p><a href="http://robots.thoughtbot.com/post/159809241/whats-the-deal-with-rails-polymorphic-associations">The beginning of this is worth a read</a>&#8230; even if it&#8217;s from 2006.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[association station]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/07/20/association-station/"/>
    <updated>2012-07-20T17:30:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/07/20/association-station</id>
    <content type="html"><![CDATA[<p>4.1.2.2 :class_name
:  If the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name. For example, if an order belongs to a customer, but the actual name of the model containing customers is Patron, you’d set things up this way:</p>

<figure class='code'><figcaption><span>[from the assoication guide](</span><a href='http://guides.rubyonrails.org/association_basics.html)'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:customer</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Patron&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>One-to-many relationships</h3>

<p>:   The most common relationship used when creating relational databases.  A row in a table in a database can be associated with one or (likely) more rows in another table.  An example of a one-to-many relationship is a single order has many items on that order.  And since relationships work both ways it is not uncommon to hear reference to many-to-one-relationships as well.</p>

<p>most common kind
<a href="http://www.maakal.com/maakalDB/ERD_Examples2.htm">e.g.</a></p>

<h3>One-to-one relationship</h3>

<p>:    A row in a table is associated to one and only one row in another table.  An example of a one-to-one relationship is a person can have one social security number and a social security number can only be assigned to one person.</p>

<p>In most cases there is no need for a one-to-one relationship as the contents of the two tables can be combined into one table.</p>

<p><a href="http://www.maakal.com/maakalDB/ERD_Examples.htm">e.g.</a></p>

<h3>Many-to-many relationships</h3>

<p>:   When one or more rows in a table are associated with one or more rows in another table.  An example of a many-to-many relationship is a table of customers can purchase many products and many customers can purchase a product.</p>

<p><a href="http://help.filemaker.com/app/answers/detail/a_id/9922/~/understanding-and-creating-many-to-many-relationships-in-filemaker-pro">Source</a></p>

<h3>Self joins</h3>

<p>In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between manager and subordinates. This situation can be modeled with self-joining associations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:subordinates</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Employee&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;manager_id&quot;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:manager</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Employee&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this setup, you can retrieve @employee.subordinates and @employee.manager</p>

<p>There is another rails cast on <a href="http://railscasts.com/episodes/163-self-referential-association">self-referential-association</a>. Ryan Bates is amazing.</p>

<p>Notes:</p>

<p>Reading:
<a href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420">patterns of enterprise application architecture</a></p>
]]></content>
  </entry>
  
</feed>

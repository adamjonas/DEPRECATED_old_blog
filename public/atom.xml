<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-06T15:23:20-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Assignment1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/06/assignment1/"/>
    <updated>2012-10-06T14:54:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/06/assignment1</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Quiz1.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Write a program that tells you the following:</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Hours in a year. How many hours are in a year? - 6pts</span>
</span><span class='line'><span class="c1"># Minutes in a decade. How many minutes are in a decade? - 6pts</span>
</span><span class='line'><span class="c1"># Your age in seconds. How many seconds old are you? - 6pts</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Define at least the following methods to accomplish these tasks:</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># seconds_in_minutes(1) #=&gt; 60 - 3pts</span>
</span><span class='line'><span class="c1"># minutes_in_hours(1) #=&gt; 60 - 3pts</span>
</span><span class='line'><span class="c1"># hours_in_days(1) #=&gt; 24 - 3pts</span>
</span><span class='line'><span class="c1"># days_in_weeks(1) #=&gt; 7 - 3pts</span>
</span><span class='line'><span class="c1"># weeks_in_years(1) #=&gt; 52 - 3pts</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># If I am 1,111 million seconds old, how old am I?</span>
</span><span class='line'><span class="c1">#   Define an age_from_seconds method - 7pts</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">seconds_in_minutes</span><span class="p">(</span><span class="n">minutes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">minutes</span><span class="o">*</span><span class="mi">60</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">minutes_in_hours</span><span class="p">(</span><span class="n">hours</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hours</span><span class="o">*</span><span class="mi">60</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hours_in_days</span><span class="p">(</span><span class="n">day</span><span class="p">)</span>
</span><span class='line'>  <span class="n">day</span><span class="o">*</span><span class="mi">24</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">days_in_weeks</span><span class="p">(</span><span class="n">weeks</span><span class="p">)</span>
</span><span class='line'>  <span class="n">weeks</span><span class="o">*</span><span class="mi">7</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">weeks_in_years</span><span class="p">(</span><span class="n">years</span><span class="p">)</span>
</span><span class='line'>  <span class="n">years</span><span class="o">*</span><span class="mi">52</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hours_in_years</span><span class="p">(</span><span class="n">years</span><span class="p">)</span>
</span><span class='line'>  <span class="n">years</span><span class="o">*</span><span class="n">weeks_in_years</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">days_in_weeks</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">hours_in_days</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">minutes_in_a_decade</span><span class="p">(</span><span class="n">decades</span><span class="p">)</span>
</span><span class='line'>  <span class="n">decades</span><span class="o">*</span><span class="n">hours_in_years</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">*</span><span class="n">minutes_in_hours</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">age_in_seconds</span><span class="p">(</span><span class="n">years</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hours_in_years</span><span class="p">(</span><span class="n">years</span><span class="p">)</span><span class="o">*</span><span class="n">minutes_in_hours</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">seconds_in_minutes</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">age_from_seconds</span><span class="p">(</span><span class="n">seconds</span><span class="p">)</span>
</span><span class='line'>  <span class="n">minutes</span> <span class="o">=</span> <span class="n">seconds</span><span class="o">/</span><span class="mi">60</span>
</span><span class='line'>  <span class="n">hours</span> <span class="o">=</span> <span class="n">minutes</span><span class="o">/</span><span class="mi">60</span>
</span><span class='line'>  <span class="n">days</span> <span class="o">=</span> <span class="n">hours</span><span class="o">/</span><span class="mi">24</span>
</span><span class='line'>  <span class="n">years</span> <span class="o">=</span> <span class="n">days</span><span class="o">/</span><span class="mi">365</span>
</span><span class='line'>  <span class="n">years</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;There are </span><span class="si">#{</span><span class="n">seconds_in_minutes</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> seconds in minutes&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;There are </span><span class="si">#{</span><span class="n">minutes_in_hours</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> minutes in hours&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;There are </span><span class="si">#{</span><span class="n">hours_in_days</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> hours in a day&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;There are </span><span class="si">#{</span><span class="n">days_in_weeks</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> days in a week&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;There are </span><span class="si">#{</span><span class="n">weeks_in_years</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> weeks in a year&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;There are </span><span class="si">#{</span><span class="n">hours_in_years</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> hours in a year&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;There are </span><span class="si">#{</span><span class="n">minutes_in_a_decade</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> minutes in a decade&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;You are </span><span class="si">#{</span><span class="n">age_in_seconds</span><span class="p">(</span><span class="mi">31</span><span class="p">)</span><span class="si">}</span><span class="s2"> seconds old&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;You are </span><span class="si">#{</span><span class="n">age_from_seconds</span><span class="p">(</span><span class="mi">1111000000</span><span class="p">)</span><span class="si">}</span><span class="s2"> years old&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FizzBuzz]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/06/fizzbuzz/"/>
    <updated>2012-10-06T14:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/06/fizzbuzz</id>
    <content type="html"><![CDATA[<p>FizzBuzz - The Stairway to Heaven of Programmers</p>

<p>Define the fizzbuzz method to do the following: 10pts
Use the modulo % method (divisible by)
2 % 2 #=> true
1 % 2 #=> false</p>

<p>If a number is divisible by 3, puts &#8220;Fizz&#8221;.
If a number is divisible by 5, puts &#8220;Buzz&#8221;.
If a number is divisible by 3 and 5, puts &#8220;FizzBuzz&#8221;</p>

<p>Use if statements 2pts
Use the &amp;&amp; operator 3pts</p>

<p>Write a loop that will group the numbers from 1 through 50
by whether they fizz, buzz, or fizzbuzz - 10pts</p>

<figure class='code'><figcaption><span>FizzBuzz</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fizz_buzz</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fizzbuzz</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">buzz</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">fizz</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">49</span>
</span><span class='line'>      <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">fizzbuzz</span> <span class="o">&lt;&lt;</span> <span class="n">number</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;FizzBuzz&quot;</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">buzz</span> <span class="o">&lt;&lt;</span> <span class="n">number</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;buzz&quot;</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">fizz</span> <span class="o">&lt;&lt;</span> <span class="n">number</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;fizz&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">number</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;All the fizzes are </span><span class="si">#{</span><span class="n">fizz</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;All the buzzes are </span><span class="si">#{</span><span class="n">buzz</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;All the fizzbuzzes are </span><span class="si">#{</span><span class="n">fizzbuzz</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fizz_buzz</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some background of FizzBuzz</p>

<ul>
<li><a href="http://www.codinghorror.com/blog/2007/02/fizzbuzz-the-programmers-stairway-to-heaven.html">If you can&#8217;t do FizzBuzz you aren&#8217;t a programmer</a></li>
<li><a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html">The majority of comp sci grads can&#8217;t do fizzbuzz</a></li>
<li><a href="http://dave.fayr.am/posts/2012-10-4-finding-fizzbuzz.html">proper implementations of fizzbuzz</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISday3]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/05/fisday3/"/>
    <updated>2012-10-05T16:48:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/05/fisday3</id>
    <content type="html"><![CDATA[<p>Programs are:</p>

<p><em>idealized components</em>&#8230; not bound by degradation of use.</p>

<p><em>infinite complexity</em>&#8230; because nothing is stopping us from building it.</p>

<p><em>Method signature</em> is the first line of the method (e.g. def method_name(*arg))</p>

<p><em>Parameters</em> are the adverbs. Parameters allow us to make a method dynamic.</p>

<p>To the computer, there is no difference between a local variable and a method.</p>

<p>&#8217;==&#8217; => value equality
&#8217;===&#8217; => object equality</p>

<p>A computationally efficient language will compile down faster than</p>

<p><em>lazy evaluation</em>- the program will stop as soon as an if or elsif is satisfied. It won&#8217;t execute any more statements.</p>

<p><a href="http://www.bartleby.com/103/6.html">Ode</a> by Arthur O&#8217;Shaughnessy</p>

<p>?? Are there languages with more syntactic sugar than ruby?
?? is it really not possible to write a program in SQL
Does <a href="http://www.simple-talk.com/blogs/2005/12/30/a-sql-game/">this</a> qualify as a program?
<a href="http://www.red-gate.com/downloads/CreateTheMazeGame.txt">SQL code:</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Line]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/04/command-line/"/>
    <updated>2012-10-04T16:01:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/04/command-line</id>
    <content type="html"><![CDATA[<p>To create multiple directories via the CLI using mkdir simply include the -p flag. For example, starting in home directory where &#8216;development already exists run the following:</p>

<p>$ mkdir -p development/practice/learn_sql</p>

<p>To create multiple directories down the tree do this…</p>

<p>$ mkdir -p development/practice/learn_sql/{beginner,intermediate,advanced}</p>

<p>Learned this thanks to this friendly <a href="http://technosophos.com/content/mkdir-creating-multiple-subdirectories-one-command">blog post</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day2]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/04/fis-day2/"/>
    <updated>2012-10-04T09:06:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/04/fis-day2</id>
    <content type="html"><![CDATA[<p>summary of yesterday
plan for today</p>

<pre><code>-everyone should be cloning on their own
</code></pre>

<p>git clone
create new repo
 - git remove remote origin
 - git add remote origin</p>

<p>make changes push to our repo
submit pull request to flatiron repo</p>

<p>DB design:</p>

<p>student:</p>

<pre><code>id (pk, incrementer)
name
</code></pre>

<p>Quiz:</p>

<pre><code>id (pk, incrementer)
a question
b question
c question
d question
e queston
answer
</code></pre>

<p>Student/answers</p>

<pre><code>student id
quiz id
</code></pre>

<p>circles for pictures
css - mask transparent circle on top of it</p>

<p>write a site that degrades gracefully.
progressive enhancement- don&#8217;t build for the worst browser rather than the worst</p>

<figure class='code'><figcaption><span>Smilies implementation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* in the css */</span>
</span><span class='line'><span class="nt">div</span> <span class="nt">smilies-5</span><span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="k">repeat-x</span> <span class="sx">url(smilies)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>communicate on the web protocols
ssh
http
http
git://
ftp
aim://</p>

<p>https required more resources
// => piggy back the protocol that is being used. over course if this is local it will break on the file system</p>

<p>tr;dl => too long, don&#8217;t read</p>

<p><em>Programmer of the day</em>
Edgar F. Codd: designed the relational database model</p>

<ul>
<li>relational model: has data with keys
one column has a primary key and all the other data works off of that primary</li>
<li><p>don&#8217;t want to repeat data so you a second normal form is what you want over third normal form. <a href="http://en.wikipedia.org/wiki/Network_model">network model</a></p></li>
<li><p>Hierarchical model is the other kind, that no one uses</p></li>
</ul>


<p>&#8220;A relation is in second normal form if the relation depends on the key, the whole key, and nothing but the key, so help me Codd&#8221;.<a href="http://www.dba-oracle.com/oracle_tips_codd_obit.htm">source</a></p>

<p>Beautiful code-
is in proportion to the complexity of the problem.</p>

<p>left joins, inner joins, etc.</p>

<figure class='code'><figcaption><span>Prefixes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">//</span><span class="k">prefix</span><span class="p">.</span> <span class="n">It</span> <span class="n">would</span> <span class="n">be</span> <span class="n">ambiguous</span> <span class="n">if</span> <span class="n">you</span> <span class="n">had</span> <span class="n">the</span> <span class="n">content</span> <span class="k">column</span> <span class="k">in</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">question</span><span class="p">.</span><span class="n">content</span> <span class="n">multiple</span> <span class="n">tables</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">quiz</span><span class="p">,</span> <span class="n">question</span><span class="p">,</span> <span class="n">quiz_question</span>
</span><span class='line'><span class="k">WHERE</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.sqlite.org/datatype3.html"><em>sql data types</em></a></p>

<p><strong><em>The fewer tables you query, the more efficient the query is</em></strong></p>

<p>difference between a where and a join</p>

<p>refernential integrity problem</p>

<figure class='code'><figcaption><span>Prefixes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">student</span>
</span><span class='line'><span class="n">id</span>         <span class="n">name</span>
</span><span class='line'><span class="mi">1</span>         <span class="n">Adam</span> <span class="n">Jonas</span>
</span><span class='line'>
</span><span class='line'><span class="n">quiz</span>
</span><span class='line'><span class="n">id</span>         <span class="n">name</span>
</span><span class='line'><span class="mi">1</span>             <span class="k">First</span> <span class="n">quiz</span>
</span><span class='line'>
</span><span class='line'><span class="n">question</span>
</span><span class='line'><span class="n">id</span> <span class="n">question_content</span>                     <span class="n">correct_answer_id</span>    <span class="n">quiz_id</span>
</span><span class='line'><span class="mi">1</span>     <span class="ss">&quot;What&#39;s the color of the sky&quot;</span>         <span class="mi">1</span>                               <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">answers</span>
</span><span class='line'><span class="n">id</span>         <span class="n">response_content</span>         <span class="n">question_id</span>
</span><span class='line'><span class="mi">1</span>         <span class="ss">&quot;blue&quot;</span>                                    <span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>         <span class="ss">&quot;red&quot;</span>                                     <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">student_answers</span>
</span><span class='line'><span class="n">question_id</span>    <span class="n">student_id</span>       <span class="n">student_response_id</span>  <span class="n">correct</span>
</span><span class='line'>    <span class="mi">1</span>                         <span class="mi">1</span>                           <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Different SQL JOINs</em></p>

<p>Before we continue with examples, we will list the types of JOIN you can use, and the differences between them.</p>

<p>JOIN: Return rows when there is at least one match in both tables (this is also known as inner join)
LEFT JOIN: Return all rows from the left table, even if there are no matches in the right table
RIGHT JOIN: Return all rows from the right table, even if there are no matches in the left table
FULL JOIN: Return rows when there is a match in one of the tables</p>

<p><a href="http://stackoverflow.com/questions/1609637/is-it-possible-to-insert-multiple-rows-at-a-time-in-an-sqlite-database">multiple row inserts syntax</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISDay1]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/03/fisday1/"/>
    <updated>2012-10-03T09:10:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/03/fisday1</id>
    <content type="html"><![CDATA[<h3>Lessons learned from day0 project</h3>

<ul>
<li>Positives:  worked well in a group, made sure that everyone got there page done.</li>
<li>Mistakes: could have walked around and see what other teams were doing, could have focused more on layout/style and then breakout overnight to write the content.</li>
</ul>


<p>shell
: guis are an illusion. They are a visualizations of the shell.</p>

<pre><code>: BASH- invented by [Stephen Bourne](http://en.wikipedia.org/wiki/Stephen_R._Bourne)
: ZSH- alternative shell that isn't standard
</code></pre>

<ul>
<li><a href="http://linuxcommand.org/lts0040.php">learning the shell</a></li>
</ul>


<p>BASH
: Bourne Again Shell</p>

<p><a href="http://surfraw.alioth.debian.org/">surfraw</a></p>

<p><a href="http://en.wikipedia.org/wiki/POSIX">POSIX system</a> based off of BASH</p>

<p>dot files are hidden files</p>

<p>bash profile runs everytime I open up a new file</p>

<p>pwd will output the full path
~ => home directory</p>

<p>BASHrc(runs second) and BASHLogin(runs first)</p>

<p><em>BIN</em></p>

<ul>
<li>create a path that says these files and directories can be considered local at all times&#8211; make them local at all times.</li>
<li>all binaries programs which are executables are in the bin dir</li>
</ul>


<p><em>RVM</em></p>

<ul>
<li>if you find yourself in the wrong version of ruby it must have been because the path was messed up</li>
</ul>


<p>ps - shows what is available
ps aux - shows all the programs that are running at all times</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill 81367 #=&gt; kills the task with the id x
</span><span class='line'>ps aux | grep sub #=&gt; this takes the output of ps aux and output it to the other side of the pipe</span></code></pre></td></tr></table></div></figure>


<p>ssh keys- private/public key encryption key. Can&#8217;t decrypt a message with my private key, but not my public key.
encryption is with the public and
decryption is the private</p>

<p>Brew:
package manager for open source software</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew doctor</span></code></pre></td></tr></table></div></figure>


<p><a href="http://ethanschoonover.com/solarized">solarized</a></p>

<p><a href="http://drnicwilliams.com/2006/10/12/my-irbrc-for-consoleirb/">IRBRC</a> - runs everytime I open IRB
gcc - C compiler
need a visualizer</p>

<p>solarized
prgrammer fonts</p>

<p><em>symbolic link</em>
usr/local/bin is where we put all of our binaries</p>

<p>ln -s &#8220;link the stuff from here to&#8230;&#8221; &#8216;also look here&#8217;</p>

<p>ls -lah</p>

<p><em>RVM</em>
If the wrong version is being used:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3 --default</span></code></pre></td></tr></table></div></figure>


<p><em>.irbrc file</em></p>

<ul>
<li>local_method is added here</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">local_methods</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">methods</span> <span class="o">-</span> <span class="no">Object</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Git</em></p>

<ul>
<li><a href="https://help.github.com/articles/ignoring-files">.gitignore file</a></li>
</ul>


<p><em>Bash</em></p>

<ul>
<li>.bash_profile > .bash_login > .profile</li>
<li>.bash_logout would run when you log out</li>
<li>.bashrc - always get loaded afterwards through the source command</li>
</ul>


<p>subshell is a non-login shell
.bashrc runs every time you pull up a non-login terminal</p>

<p><em>SublimeText2</em></p>

<p><a href="http://wbond.net/sublime_packages/package_control/installation">Package installer</a> allows you to install packages for sublime using cmd+shift+p</p>

<p><a href="http://octopress.org/docs/deploying/github/"><em>Deploying to GitHub Pages</em></a></p>

<ul>
<li>I deployed a new octopress <a href="http://ajonas04.github.com/jonas/">test blog</a></li>
<li>Some nice features on github pages that don&#8217;t seem available on heroku</li>
<li>It looks faster, can use the command &#8216;rake deploy&#8217; to deploy</li>
</ul>


<p><em>Fun</em></p>

<p><a href="http://www.mbhs.edu/~bconnell/cgi-bin/anagram.cgi">Anagrams</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading and Resources]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/02/reading-and-resources/"/>
    <updated>2012-10-02T18:01:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/02/reading-and-resources</id>
    <content type="html"><![CDATA[<p><a href="http://ruby4kids.com/ruby4kids/public/web_page/1">ruby explained to a child</a></p>

<p>Smalltalk best practice patterns</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISDay0]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/02/fisday0/"/>
    <updated>2012-10-02T09:25:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/02/fisday0</id>
    <content type="html"><![CDATA[<p><em>Why are we here?</em></p>

<p>-To fall in love with code</p>

<p>-If you give 100% you will change.</p>

<p><em>Programmer(s) of the day</em></p>

<ul>
<li><p><a href="http://www.sdsc.edu/ScienceWomen/lovelace.html">Ada Lovelace</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Charles_Babbage">Charles Babbage and the difference machine</a></p></li>
</ul>


<p><em>CSS Selectors</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#elements, #links{
</span><span class='line'> padding: 25px 0 15px 0;
</span><span class='line'>}
</span><span class='line'>#elements h2{
</span><span class='line'>  font-size: 2em;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Git</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git remote add &lt;remote name&gt; &lt;link&gt;
</span><span class='line'>♕ git remote add group git@github.com:ajonas04/etcetc.com.git</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch 
</span><span class='line'>git co #not ever changing the state of any branch
</span><span class='line'>git pull
</span><span class='line'>git branch -a #shows all local branches
</span><span class='line'>git branch #shows all the remotes</span></code></pre></td></tr></table></div></figure>


<p>can get pull requests from forks as well as the head repo</p>

<p>always want to deal with potential conflicts in the feature branch rather than on master</p>

<p><em>rebase</em> take these commits from master and put them in the right place of x feature branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase master
</span><span class='line'>git co master
</span><span class='line'>git merge add-profile-rexfeng --no-ff #=&gt; merge made by recursive strategy
</span><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>If it&#8217;s forked:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase upstream/master</span></code></pre></td></tr></table></div></figure>


<p>Git rainbow is not good.</p>

<p>squashing commits</p>

<p>go into my fork as a remote</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add ajonas04 git@github.com:ajonas04/students.flatironschool.com.git
</span><span class='line'>git fetch ajonas04
</span><span class='line'>git co feature-push
</span><span class='line'>git rebase origin/master #resolve 
</span><span class='line'>git rebase --continue</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD #=&gt; reset to the state of the repo at the last commit in the repo
</span><span class='line'>git branch -D add_profile_page</span></code></pre></td></tr></table></div></figure>


<p>interactive rebase</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase master -i
</span><span class='line'>#provide a file that shows all the commits in it</span></code></pre></td></tr></table></div></figure>


<p>no fastforward versus fastforward
-maintains the fact that you were once on your own branch</p>

<p>recursion and fast forward
checkout the branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add . #will ADD all files that haven't been previously committed as well as change modified files
</span><span class='line'>git commit -am 'message' #will change files, but not add new ones
</span><span class='line'>git commit -m 'message' #will just add a message</span></code></pre></td></tr></table></div></figure>


<p>Workflow to pull down the most updated verison:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ git fetch upstream
</span><span class='line'>♕ git rebase upstream/master
</span><span class='line'>First, rewinding head to replay your work on top of it...
</span><span class='line'>error: The following untracked working tree files would be overwritten by checkout:
</span><span class='line'>  .DS_Store
</span><span class='line'>  images/.DS_Store
</span><span class='line'>Please move or remove them before you can switch branches.
</span><span class='line'>Aborting
</span><span class='line'>could not detach HEAD
</span><span class='line'>[19:02:04] (master) students.flatironschool.com
</span><span class='line'>♕ rm .DS_Store
</span><span class='line'>♕ rm images/.DS_Store
</span><span class='line'>♕ git rebase upstream/master
</span><span class='line'>♕ git add aviflombaum.html
</span><span class='line'>♕ git rebase --continue
</span><span class='line'>♕ subl .</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcasts]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/01/podcasts/"/>
    <updated>2012-10-01T11:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/01/podcasts</id>
    <content type="html"><![CDATA[<p><a href="http://feeds.feedburner.com/se-radio">Software Engineer Radio</a></p>

<ul>
<li><p><a href="http://www.se-radio.net/2007/04/episode-52-dsl-development-in-ruby/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">DSL Dev in ruby</a></p></li>
<li><p><a href="http://www.se-radio.net/2008/06/episode-102-relational-databases/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">relation DBs</a></p></li>
<li><p><a href="http://www.se-radio.net/2009/06/episode-137-sql-with-jim-melton/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">SQL</a></p></li>
<li><p><a href="http://www.se-radio.net/2009/08/episode-143-api-design-with-jim-des-rivieres/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+se-radio+%28Software+Engineering+Radio%29&amp;utm_content=FeedBurner">API Design</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cheat Sheets]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/01/cheatsheets/"/>
    <updated>2012-10-01T11:17:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/01/cheatsheets</id>
    <content type="html"><![CDATA[<p><a href="http://richardjh.org/blog/sqlite3-cheat-sheet/">SQLite3 cheat sheet</a></p>

<p><a href="http://rogerdudler.github.com/git-guide/">Git cheat sheet</a></p>

<p><a href="http://support.mashery.com/docs/customizing_your_portal/Markdown_Cheat_Sheet/">Markdown language cheat sheet</a>
<a href="http://packetlife.net/media/library/16/Markdown.pdf">Another markdown language cheat sheet</a></p>

<p><a href="http://blog.wiemann.name/mongoid-cheat-sheet">Mongoid cheat sheet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vocab]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/01/vocab/"/>
    <updated>2012-10-01T10:58:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/01/vocab</id>
    <content type="html"><![CDATA[<p>Idempotent
: is the property of certain operations in mathematics and computer science, that they can be applied multiple times without changing the result beyond the initial application.</p>

<p>SDK
: software development kit</p>

<p>Referential integrity
: The data in a foreign key needs to match the primary key in some record of the original table. Referential integrity assures there are no broken links between tables. Note that if you delete a record in the original table, for example, you delete one of the customers from the customer table, referential integrity requires that you delete all references to that customer in the order table.</p>

<p>Levels of Abstraction
: Going up levels of abstraction means removing the details.</p>

<p>Recursion
: the process of repeating items in a self-similar way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion.</p>

<p>WIP
: work in progress</p>

<p>Tautology
: true by virtue of its logical form alone</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kent Beck]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/29/kent-beck/"/>
    <updated>2012-09-29T23:34:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/29/kent-beck</id>
    <content type="html"><![CDATA[<p><a href="http://blog.iterate.no/2012/06/20/programming-like-kent-beck/">http://blog.iterate.no/2012/06/20/programming-like-kent-beck/</a></p>

<p><a href="http://pragprog.com/screencasts/v-kbtdd/test-driven-development">TDD vids with Kent Beck</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby rogue notes]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/28/ruby-rogue-notes/"/>
    <updated>2012-09-28T19:57:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/28/ruby-rogue-notes</id>
    <content type="html"><![CDATA[<p>DCI
data, context, interactions</p>

<p><a href="http://en.wikipedia.org/wiki/Dunbar's_number">Dunbar number</a></p>

<p><a href="http://piotrsarnacki.com/2010/06/18/rails-internals-railties/">Railties</a></p>

<p><a href="http://blog.plataformatec.com.br/2012/06/why-your-web-framework-should-not-adopt-rack-api/">Why not to adopt Rack</a></p>

<p><a href="http://vimeo.com/22053820">Design video dealing with irrational customers</a></p>

<p><a href="http://weblog.rubyonrails.org/2012/3/21/strong-parameters/">Strong parameters</a></p>

<p>Git blame- you can annotate the file with git blame to see when each line of the method was last edited and by whom</p>

<p><a href="http://www.screenr.com/QOd">Amazing prices at priceline</a></p>

<p><a href="http://timelessrepo.com/haters-gonna-hateoas">HATEOAS</a>
Contrast with SOA (Service Oriented Architecture)</p>

<p>Domain model pattern versus active record</p>

<p><a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the kindom of nouns</a></p>

<p>TO READ:
<a href="https://github.com/avdi/keyword_params">keyword params code</a></p>

<p><a href="http://vimeo.com/42622511">hashrocket lunch and learn</a></p>

<p><a href="http://www.amazon.com/Restful-Web-Services-Leonard-Richardson/dp/0596529260">RESTful Webservices</a></p>

<p>Reading for when I am grown up:
<a href="http://www.amazon.com/gp/product/0136301045/ref=as_li_ss_tl?ie=UTF8&amp;tag=chamaxwoo-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399373&amp;creativeASIN=0136301045">Class Construction in C and C++: Object-Oriented Programming Fundamentals</a></p>

<p>Gems:
carrierwave over paperclip <a href="https://www.ruby-toolbox.com/search?utf8=%E2%9C%93&amp;q=carrierwave">carrierwave</a>
Kaminari over will_paginate
<a href="http://railscasts.com/episodes/254-pagination-with-kaminari">Pagination with Kaminari</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learn sql the hard way]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/26/learn-sql-the-hard-way/"/>
    <updated>2012-09-26T12:53:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/26/learn-sql-the-hard-way</id>
    <content type="html"><![CDATA[<p>Schema:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♕ sqlite3 ex3.db .schema
</span><span class='line'>/* OR */
</span><span class='line'>♕ sqlite3 ex3.db
</span><span class='line'>SQLite version 3.7.7 2011-06-25 16:35:1
</span><span class='line'>Enter ".help" for instructions
</span><span class='line'>Enter SQL statements terminated with a ";"
</span><span class='line'>sqlite&gt; .schema
</span><span class='line'>CREATE TABLE person (
</span><span class='line'>  id INTEGER PRIMARY KEY,
</span><span class='line'>  first_name TEXT,
</span><span class='line'>  last_name TEXT,</span></code></pre></td></tr></table></div></figure>


<p>In the first line I just make ex3.db from the ex2.sql file. Then I add the -echo argument to sqlite3 so that it prints out what it is doing. After that the data is in the database and ready to query.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sqlite3 ex3.db &lt; ex2.sql
</span><span class='line'>$ sqlite3 -echo ex3.db &lt; ex3.sql 
</span><span class='line'>INSERT INTO person (id, first_name, last_name, age)
</span><span class='line'>    VALUES (0, "Zed", "Shaw", 37);
</span><span class='line'>INSERT INTO pet (id, name, breed, age, dead) 
</span><span class='line'>    VALUES (0, "Fluffy", "Unicorn", 1000, 0); 
</span><span class='line'>INSERT INTO pet VALUES (1, "Gigantor", "Robot", 1, 1);</span></code></pre></td></tr></table></div></figure>


<p><strong>Important</strong>
Always remember this: SQL ONLY KNOWS TABLES. In programming you deal in graphs and in SQL you deal in tables. They&#8217;re related concepts, but the mental model is different.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* I only want some columns from pet so I am explicit rather than using the '*' */
</span><span class='line'>SELECT pet.id, pet.name, pet.age, pet.dead
</span><span class='line'>/* To connect person and pet I use the person_pet JOIN table */
</span><span class='line'>  FROM pet, person_pet, person
</span><span class='line'>  WHERE
</span><span class='line'>      #connect person and pet by the related id columns
</span><span class='line'>      #now the DB can search for only the rows where the ID columns all match
</span><span class='line'>  pet.id = person_pet.pet_id AND
</span><span class='line'>      #connect person and person_pet in the same way
</span><span class='line'>  person_pet.person.id = person.id AND
</span><span class='line'>      #ask for only the pets that I own
</span><span class='line'>  person.first_name = "Adam";</span></code></pre></td></tr></table></div></figure>


<p><strong>Delete</strong>
DELETE is like SELECT but it removes rows from the table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DELETE FROM pet WHERE id IN (
</span><span class='line'>  SELECT pet.id
</span><span class='line'>  FROM pet, person_pet, person
</span><span class='line'>  WHERE
</span><span class='line'>  person.id = person_pet.person_id AND
</span><span class='line'>  pet.id = person_pet.pet.id AND
</span><span class='line'>  person.first_name = "Zed"
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>  SELECT * FROM pet; 
</span><span class='line'>  SELECT * FROM person_pet;
</span><span class='line'>  
</span><span class='line'>  DELETE FROM person_pet
</span><span class='line'>      WHERE pet_id NOT IN ( 
</span><span class='line'>          SELECT id FROM pet
</span><span class='line'>      );
</span><span class='line'>  
</span><span class='line'>  SELECT * FROM person_pet;</span></code></pre></td></tr></table></div></figure>


<p>The WHERE clause uses an IN to match the id columns in pet to the table that&#8217;s returned in the subquery. The subquery (also called a subselect) is then a normal SELECT.</p>

<p>How SQL does this is with the following process:
1. Runs the subquery in the parenthesis at the end and build a table with all the columns just like a normal SELECT.
2. Treats this table as a kind of temporary table to match pet.id columns against.
3. Goes through the pet table and deletes any row that has an id IN this temporary table.</p>

<p><em>REPLACE</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* We can force it by doing an INSERT OR REPLACE. */ 
</span><span class='line'>INSERT OR REPLACE INTO person (id, first_name, last_name, age) 
</span><span class='line'>    VALUES (0, 'Frank', 'Smith', 100);
</span><span class='line'>
</span><span class='line'>SELECT * FROM person; 
</span><span class='line'>
</span><span class='line'>/* And shorthand for that is just REPLACE. */ 
</span><span class='line'>REPLACE INTO person (id, first_name, last_name, age) 
</span><span class='line'>    VALUES (0, 'Zed', 'Shaw', 37);</span></code></pre></td></tr></table></div></figure>


<p><em>DROP TABLE</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  /* Only drop table if it exists. Use the IF EXISTS modifier and the table will be dropped only if it's already there. This suppresses the error you get when running you .sql script on a fresh database that has no tables. */
</span><span class='line'> DROP TABLE IF EXISTS person;
</span><span class='line'>   
</span><span class='line'>  /* Create again to work with it. */
</span><span class='line'>  CREATE TABLE person ( 
</span><span class='line'>      id INTEGER PRIMARY KEY,
</span><span class='line'>      first_name TEXT,
</span><span class='line'>      last_name TEXT, 
</span><span class='line'>      age INTEGER
</span><span class='line'>  );
</span><span class='line'>   
</span><span class='line'>  /* Rename the table to peoples. */ 
</span><span class='line'>  ALTER TABLE person RENAME TO peoples;
</span><span class='line'>   
</span><span class='line'>  /* Add a hatred column to peoples. */ 
</span><span class='line'>  ALTER TABLE peoples ADD COLUMN hatred INTEGER;
</span><span class='line'>     
</span><span class='line'>  /* Rename peoples back to person. */
</span><span class='line'>  ALTER TABLE peoples RENAME TO person; 
</span><span class='line'>  
</span><span class='line'>  .schema person
</span><span class='line'> 
</span><span class='line'>  /* We don't need that. */
</span><span class='line'>  DROP TABLE person;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/24/rspec/"/>
    <updated>2012-09-24T13:21:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/24/rspec</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;has no brains&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="c1">#modifier is should</span>
</span><span class='line'>  <span class="c1">#matcher is the less than sign</span>
</span><span class='line'>  <span class="n">zombie</span><span class="o">.</span><span class="n">brains</span><span class="o">.</span><span class="n">should</span> <span class="o">&lt;</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Matchers and Modifiers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;Ash&#39;</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">alive</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">rotting</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">height</span><span class="o">.</span><span class="n">should</span> <span class="o">&gt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">height</span><span class="o">.</span><span class="n">should</span> <span class="o">&gt;=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">height</span><span class="o">.</span><span class="n">should</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">height</span><span class="o">.</span><span class="n">should_not</span> <span class="o">==</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Predicate &#8216;be&#8217;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Tweet</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;without a leading @ symbol should be public&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">tweet</span> <span class="o">=</span> <span class="no">Tweet</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">status</span><span class="p">:</span> <span class="s1">&#39;Nom nom nom&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tweet</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</span><span class='line'>    <span class="c1">#this is equivalent to tweet.status.should == true</span>
</span><span class='line'>    <span class="c1">#the predicate is a better way though</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Mark as Pending</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;is named Ash&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#to mark it as pending</span>
</span><span class='line'><span class="n">xit</span> <span class="s2">&quot;is named Ash&quot;</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#OR</span>
</span><span class='line'><span class="n">it</span> <span class="s2">&quot;is named Ash&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Should be</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Tweet</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;truncates the status to 140 characters&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">tweet</span> <span class="o">=</span> <span class="no">Tweet</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">status</span><span class="p">:</span> <span class="s1">&#39;Nom nom nom&#39;</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># notice the space between the &#39;should&#39; and &#39;be&#39;</span>
</span><span class='line'>    <span class="n">tweet</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span> <span class="o">&lt;=</span> <span class="mi">140</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Installing RSpec</p>

<figure class='code'><figcaption><span>Should be</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">rspec</span>
</span><span class='line'><span class="n">rspec</span> <span class="o">--</span><span class="n">init</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#in rails</span>
</span><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">rspec</span><span class="ss">:install</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Matchers: include</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;includes a tweet&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">tweet</span> <span class="o">=</span> <span class="no">Tweet</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">tweets</span><span class="p">:</span> <span class="o">[</span><span class="n">tweet</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">tweets</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Matchers: have</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#this</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">weapons</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'><span class="c1">#is better written as</span>
</span><span class='line'><span class="n">zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">weapons</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;increases the number of tweets&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Ash&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">tweets</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="s2">&quot;Arrrgggggggghhhhh&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">tweets</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#can also have</span>
</span><span class='line'><span class="n">have</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">have_at_least</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">have_at_most</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Expect Block and Change Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;gains 3 IQ points by eating brains&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">eat_brains</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">iq</span> <span class="p">}</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#can also use</span>
</span><span class='line'><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="c1">#and they can be chained</span>
</span><span class='line'><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Raise_error</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;raises a Zombie::NotSmartEnoughError if not able to make a decision&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">make_decision!</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span>
</span><span class='line'>      <span class="no">StandardError</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#these modifiers also work</span>
</span><span class='line'><span class="n">to</span>
</span><span class='line'><span class="n">not_to</span>
</span><span class='line'><span class="n">to_not</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>More Matchers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span><span class="p">(</span><span class="n">hungry?</span><span class="p">)</span>
</span><span class='line'><span class="vi">@zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">be_within</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">of</span><span class="p">(</span><span class="mi">33</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="vi">@zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">exist</span>
</span><span class='line'><span class="vi">@zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">satisfy</span> <span class="p">{</span> <span class="o">|</span><span class="n">zombie</span><span class="o">|</span> <span class="n">zombie</span><span class="o">.</span><span class="n">hungry?</span> <span class="p">}</span>
</span><span class='line'><span class="vi">@hungry_zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="no">Zombie</span><span class="p">)</span> <span class="c1">#Inheritance: HungryZombie &lt; Zombie</span>
</span><span class='line'><span class="vi">@status</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Subject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#this</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should not be a genius&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_genius</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#can be simplified to</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should not be a genius&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_genius</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#this can be further simplified to</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should not be a genius&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1">#implicit subject</span>
</span><span class='line'>    <span class="n">should_not</span> <span class="n">be_genius</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is only going to work if using a describe block with a class in it&#8230;</p>

<figure class='code'><figcaption><span>it</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">subject</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;Ash&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>its</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should have an iq of zero&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="n">iq</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#can simplify it all the way to</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:iq</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>its examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;Ash&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:weapons</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="n">weapon</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:brain</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_nil</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="s1">&#39;tweet.size&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Refactoring with Context</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_genius</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:iq</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be_genius with high iq&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">iq</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">be_genius</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should have a brains_eaten_count of 1 with high iq&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span> <span class="o">=</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">iq</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">brains_eaten_count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#Refactored with context and subject and its</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_genius</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:iq</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;with high iq&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">iq</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_genius</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">its</span><span class="p">(</span><span class="ss">:brains_eaten_count</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Let</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:tweet</span><span class="p">)</span> <span class="p">{</span> <span class="no">Tweet</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">subject</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">tweets</span><span class="p">:</span> <span class="o">[</span><span class="n">tweet</span><span class="o">]</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="o">[</span><span class="n">zombie</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="c1">#moved zombie to its own let</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:zombie</span><span class="p">)</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:tweets</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="n">tweet</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:latest_tweet</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="n">tweet</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Let!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;with high iq&quot;</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">let!</span><span class="p">(</span><span class="ss">:zombie</span><span class="p">)</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">iq</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Anna&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>     <span class="n">subject</span> <span class="p">{</span> <span class="n">zombie</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">it</span> <span class="s2">&quot;should be returned with genius&quot;</span> <span class="k">do</span>
</span><span class='line'>       <span class="no">Zombie</span><span class="o">.</span><span class="n">genius</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="n">zombie</span><span class="p">)</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">it</span> <span class="s2">&quot;should have a genius count of 1&quot;</span> <span class="k">do</span>
</span><span class='line'>       <span class="no">Zombie</span><span class="o">.</span><span class="n">genius</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hooks</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span>
</span><span class='line'><span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span>
</span><span class='line'><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span>
</span><span class='line'><span class="n">aftter</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">hungry!</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#by default, a before clock runs each time before an example is about to run</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Before Hook</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:zombie</span><span class="p">)</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">create</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="n">zombie</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;is not a dummy zombie&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">eat_brains</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_dummy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;is a genius zombie&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">eat_brains</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">be_genius</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># refactored as</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:zombie</span><span class="p">)</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">create</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="n">zombie</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">eat_brains</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;is not a dummy zombie&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_dummy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;is a genius zombie&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">zombie</span><span class="o">.</span><span class="n">should</span> <span class="n">be_genius</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Zombie</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:zombie</span><span class="p">)</span> <span class="p">{</span> <span class="no">Zombie</span><span class="o">.</span><span class="n">create</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">iq</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="n">zombie</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;with a dummy zombie&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">iq</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_dummy</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;with a smart zombie&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="n">zombie</span><span class="o">.</span><span class="n">iq</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_dummy</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Shared Examples</h3>

<figure class='code'><figcaption><span>Shared Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#used to call shared examples</span>
</span><span class='line'><span class="n">it_behaves_like</span> <span class="s1">&#39;yada yada yada&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#refers to the implicit subject</span>
</span><span class='line'><span class="n">shared_examples_for</span> <span class="s1">&#39;the undead&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;does not have a pulse&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">subject</span><span class="o">.</span><span class="n">pulse</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Unit Testing]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/24/rails-unit-testing/"/>
    <updated>2012-09-24T13:20:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/24/rails-unit-testing</id>
    <content type="html"><![CDATA[<h3>Rails Testing</h3>

<ul>
<li>Verification Testing</li>
<li>Test First</li>
<li>Test Driven Design</li>
</ul>


<h3>Unit Testing</h3>

<ul>
<li>Piecing of our applications in isolation from other parts</li>
<li>Easy to debug</li>
<li>Leads to good documentation</li>
</ul>


<p>WHY TEST::UNIT rather than RSPEC
- More basic testing library and what rails uses by default
- similar to other testing libraries from other languages</p>

<figure class='code'><figcaption><span>Assert List</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">assert</span> <span class="o">&lt;</span><span class="n">conditional</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">assert_equal</span> <span class="o">&lt;</span><span class="n">expected</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">actual</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">assert_not_equal</span>
</span><span class='line'><span class="n">assert_respond_to</span> <span class="o">&lt;</span><span class="n">object</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">:</span><span class="o">&lt;</span><span class="nb">method</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">assert_nil</span> <span class="o">&lt;</span><span class="n">object</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">assert_not_nil</span> <span class="o">&lt;</span><span class="n">object</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">assert_match</span> <span class="o">&lt;</span><span class="n">pattern</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">assert_no_match</span> <span class="o">&lt;</span><span class="n">pattern</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">assert_raise</span><span class="p">(</span><span class="o">&lt;</span><span class="n">error</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="o">&lt;</span><span class="n">code</span> <span class="n">to</span> <span class="k">raise</span> <span class="n">error</span><span class="o">&gt;</span> <span class="p">}</span>
</span><span class='line'><span class="n">assert_kind_of</span><span class="p">(</span><span class="o">&lt;</span><span class="no">Class</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">object</span><span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">subject</span><span class="o">&gt;</span><span class="n">_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;</span><span class="no">Subject</span><span class="o">&gt;</span><span class="no">Test</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_</span><span class="o">&lt;</span><span class="n">what_we_are_testing</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">assertion</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#E.g.</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;test/unit&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BooleanTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_true_is_true</span>
</span><span class='line'>  <span class="c1">#the 2nd parameter is puts on failure.</span>
</span><span class='line'>      <span class="n">assert</span> <span class="kp">true</span><span class="p">,</span> <span class="s2">&quot;True should be truthy&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#another e.g.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ConditionalTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_one_is_greater_than_one</span>
</span><span class='line'>    <span class="n">assert</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;One is not greater than zero&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#e.g.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MultipleTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_multiple_of</span>
</span><span class='line'>    <span class="n">assert</span> <span class="no">Multiple</span><span class="o">.</span><span class="n">multiple_of?</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="s2">&quot;10 should be a multiple of 5&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The best tests have one assertion.</em></p>

<h3>Red, Green, Refactor</h3>

<ol>
<li>Red: Write a failing test</li>
<li>Green: Write enough code to make it pass</li>
<li>Refactor: Refactor your code</li>
</ol>


<figure class='code'><figcaption><span>assert_respond_to</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_humanize_function_added_to_string</span>
</span><span class='line'><span class="c1"># assert_respond_to &lt;object&gt;, &lt;:method&gt;</span>
</span><span class='line'>  <span class="n">assert_respond_to</span> <span class="s2">&quot;blah&quot;</span><span class="p">,</span> <span class="ss">:humanize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Assert_match</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ZombifierTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_zombify_brains</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="no">Zombifier</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;I love your arms&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#assert_match &lt;regex&gt;, &lt;string&gt;</span>
</span><span class='line'>    <span class="n">assert_match</span> <span class="sr">/brains/</span><span class="p">,</span> <span class="n">z</span><span class="o">.</span><span class="n">zombify</span><span class="o">.</span><span class="n">humanize</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ZombifierTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_zombify_upcase</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="no">Zombifier</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">zombify</span>
</span><span class='line'>    <span class="c1">#assert_equal &quot;&lt;expected string&gt;&quot;, &quot;&lt;actual string&gt;&quot;</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s2">&quot;HELLO WORLD BRAINS&quot;</span><span class="p">,</span> <span class="n">z</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>assert_raise</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#assert_raise(RuntimeError) { &quot;zombie&quot;.humanize }</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ZombifierTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_brains_in_zombify_raises_error</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="no">Zombifier</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;BRAINS&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_raise</span><span class="p">(</span><span class="no">RuntimeError</span><span class="p">)</span> <span class="p">{</span> <span class="n">z</span><span class="o">.</span><span class="n">zombify</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ZombifierTest</span> <span class="o">&lt;</span> <span class="no">Test</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_zombify_returns_a_string</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="no">Zombifier</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;I like knees&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">#assert_kind_of(&lt;Class&gt;, &lt;object&gt;)</span>
</span><span class='line'>    <span class="n">assert_kind_of</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="n">z</span><span class="o">.</span><span class="n">zombify</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons from 97 things every programmer should know]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/24/lessons-from-97-things-every-programmer-should-know/"/>
    <updated>2012-09-24T09:29:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/24/lessons-from-97-things-every-programmer-should-know</id>
    <content type="html"><![CDATA[<p>The boy scout rule (p.16)
&#8220;Always leave a campground cleaner than you found it.&#8221;
&#8220;Always check in a module a little cleaner than when you checked it out.&#8221;</p>

<p>Don&#8217;t repeat yourself (p.60)</p>

<ul>
<li><p>Duplication is waste</p></li>
<li><p>Repetition in process calls for automation</p></li>
<li><p>Repetition in logic calls for abstraction</p></li>
<li><p>A matter of principle: once and only once principle</p></li>
</ul>


<p>Know your next commit (p.94)</p>

<ul>
<li><p>Understanding your commit in the greater user story scope is valuable, but stay focused on your specific goal.</p></li>
<li><p>Define a task that would constitute a productive step.</p></li>
</ul>


<p>Learn to estimate (p.100)</p>

<ul>
<li><p>An estimate is an approximate calculation or judgment of the value, number, quantity, or extent of something.</p></li>
<li><p>A target is a statement of a desirable business objective.</p></li>
<li><p>A commitment is a promise to deliver specified functionality as a certain level of quality by a certain date or event.</p></li>
</ul>


<p>Make interfaces easy to use correctly and hard to use incorrectly (p.110)</p>

<ul>
<li><p>A.K.A. defensive design</p></li>
<li><p>Making interfaces hard to use incorrectly requires two things: first, you must anticipate errors users might make and find ways to prevent them. Second, you must observe how an interface is misused during early release and modify it to prevent such errors.</p></li>
</ul>


<p>Missing opportunities for polymorphism (p.118)</p>

<ul>
<li>Polymorphism, taken from Greek, means many (poly) forms (morph). In the context of programming, polymorphism refers to many forms of a particular class of objects or method.</li>
</ul>


<p>The professional programmer (p.134)</p>

<ul>
<li><p>pros are responsible for their own career</p></li>
<li><p>pros take responsibility for the code they write</p></li>
<li><p>pros are team players</p></li>
<li><p>pros do not tolerate big bug lists</p></li>
<li><p>pros do not make a mess.</p></li>
</ul>


<p>Put down the mouse and step away from the keyboard (p.138)</p>

<ul>
<li><p>Focus is good, but to get through a problem we often have to walk away from the problem.</p></li>
<li><p>While you are coding, the logical part of the brain is active and the creative side is shut out. It can&#8217;t present anything to you until the logical side takes a break.</p></li>
</ul>


<p>Read code (p.140)</p>

<ul>
<li>Write code so that it is readable for others. Read other people&#8217;s code.</li>
</ul>


<p>Read the humanities (p.142)</p>

<ul>
<li>Coding is about communicating with others through experience. Understand metaphors and how to express your thoughts to others in terms they can understand.</li>
</ul>


<p>Resist the temptation of the singleton pattern (p.146)</p>

<ul>
<li>the singleton pattern is a design pattern that restricts the instantiation of a class to one object.</li>
</ul>


<p>The single responsibility principle (p.152)</p>

<ul>
<li><p>Gather together things that change for the same reason, and separate those things that change for different reasons.</p></li>
<li><p>Good system design means that we separate the system into components that can be independently deployed. Independent deployment means that if we change one component, we do not have to redeploy any of the others.</p></li>
</ul>


<p>Two heads are better than one (p.170)</p>

<ul>
<li>Pair programming is more productive for learning and long term enjoyment of the profession.</li>
</ul>


<p>Ubuntu coding for your friends (p.174)</p>

<ul>
<li><p>&#8220;A person is a person through (other) persons.&#8221;</p></li>
<li><p>So it follows, &#8220;a developer is a developer through other developers.&#8221;</p></li>
<li><p>&#8220;Code is code through other code.&#8221;</p></li>
<li><p>The quality of the code I write affects the quality of the code you write.</p></li>
<li><p>Zen is about the individual. Ubuntu is about the Zen a group of people. Very, very rarely do we create code for ourselves alone.</p></li>
</ul>


<p>Unix tools > IDEs (p.176)</p>

<p>WET dilutes performance bottlenecks (p.182)</p>

<ul>
<li>WET (write every time) the antithesis of DRY</li>
</ul>


<p>Write code as if you had to support it for the rest of your life (p.186)</p>

<ul>
<li>The code your wrote many years ago still influences your career. People form opinions of you based on the code they see.</li>
</ul>


<p>Write tests for people (p.190)</p>

<ul>
<li>Good tests act as documentation for the code they are testing.</li>
</ul>


<p>You gotta care about the code (p.192)</p>

<ul>
<li><p>The difference between good and bad programmers is attitude.</p></li>
<li><p>The code to hell is paved with good intentions. To be an excellent programmer, you need to rise above good intentions, and actually care about the code.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The path to better code design]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/21/less-the-path-to-better-design/"/>
    <updated>2012-09-21T11:29:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/21/less-the-path-to-better-design</id>
    <content type="html"><![CDATA[<p><a href="http://vimeo.com/26330100">Video</a></p>

<p>Design is the art of arranging code</p>

<p>Code needs to work today just once and be easy to change forever.</p>

<p>The purpose is to reduce the cost of change.</p>

<p>Patterns solve a lot of problems:
- SOLID, Demeter
- principles are broad but blind</p>

<p>Diagnostics:
Simple ways to judge the goodness of code.
TRUE&#8230;</p>

<p>Transparent
The consequences of chancge are visible and predictable.</p>

<p>Reasonable
The cost of adding a new feature is proportional to its value</p>

<p>Usable
If you wrote the code, you can resuse it.</p>

<p>Exemplary
More code like this would be good for your app.</p>

<p>8 MIN</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini-Test]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/18/testing/"/>
    <updated>2012-09-18T15:29:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/18/testing</id>
    <content type="html"><![CDATA[<h3>Treehouse</h3>

<figure class='code'><figcaption><span>Some examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;minitest/autorun&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyTest</span> <span class="o">&lt;</span> <span class="no">MiniTest</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'><span class="c1">#all tests are prefixed with &quot;test_&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_that_addition_works</span>
</span><span class='line'>      <span class="n">assert_equal</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="o">+</span><span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_that_my_arry_has_a_value</span>
</span><span class='line'>      <span class="n">my_array</span> <span class="o">=</span> <span class="sx">%w(dog cat frog)</span>
</span><span class='line'>      <span class="n">assert</span> <span class="n">my_array</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;frog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#asser_delta: checks to see that floating point numbers are within a given range</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_assert_delta</span>
</span><span class='line'>      <span class="n">assert_in_delta</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14159</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#assert_match: checks to see if the reg expressions evaluates against a string</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_assert_match</span>
</span><span class='line'>      <span class="n">assert_match</span> <span class="sr">/world/</span><span class="p">,</span> <span class="s1">&#39;Hello world&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#assert_nil: all variables passed in are nil</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_nil</span>
</span><span class='line'>      <span class="n">some_variables</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">assert_nil</span> <span class="n">some_variable</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#assert_output</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_output</span>
</span><span class='line'>      <span class="n">assert_output</span> <span class="s2">&quot;hello world&quot;</span><span class="p">,</span> <span class="kp">nil</span> <span class="k">do</span>
</span><span class='line'>          <span class="nb">print</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#assert_raises</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_raise</span>
</span><span class='line'>      <span class="n">assert_raises</span> <span class="no">NameError</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">this_variable_doesnt_exist</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#assert_respond_to: testing if something responds to a certain method</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_respond</span>
</span><span class='line'>      <span class="n">assert_respond_to</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="s1">&#39;include?&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All tests are prefixed with &#8220;test_&#8221;</p>

<h3>Mini Test Spec</h3>

<p>The functionality of the Mini-test and Mini-test Spec are pretty similar. The keywords and strucutre are different as shown below&#8230;</p>

<figure class='code'><figcaption><span>Mini Test Spec Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;minitest/autorun&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;minitest/spec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;MyTests&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#can add before and after blocks</span>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Tests are beginning.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds 2 + 2&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">must_equal</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;includes a frog&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="sx">%w(dog cat frog)</span><span class="o">.</span><span class="n">must_include</span><span class="p">(</span><span class="s1">&#39;frog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;must be Fixnum&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">must_be_instance_of</span> <span class="no">Fixnum</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should raise an error&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="nb">lambda</span> <span class="p">{</span> <span class="n">arrary</span><span class="o">.</span><span class="n">hello</span> <span class="p">}</span><span class="o">.</span><span class="n">must_raise</span> <span class="no">NoMethodError</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Test Driven Development</h3>

<p>Write just enough code to make the test pass</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Standard Library]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/09/18/ruby-standard-library/"/>
    <updated>2012-09-18T13:59:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/09/18/ruby-standard-library</id>
    <content type="html"><![CDATA[<h3><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/fileutils/rdoc/FileUtils.html">FileUtils</a></h3>

<p>The functions mostly involved changing dir, moving, removing, and copying files.</p>

<p>Going to give us different options for working with dir entries and files in the file system.</p>

<p>easy to work with in IRB</p>

<h3>Methods</h3>

<p>.cmp will tell you if two files have the same content
.touch creates a file if it doesn&#8217;t exist
.cp copy contents to another file</p>

<h3><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">Logger:</a></h3>

<h3>URIs</h3>

<p>URI stands for &#8220;Uniform Resource Identifier.&#8221; The URI module can be used to parse and manipulate URIs in your Ruby programs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; require 'uri'
</span><span class='line'> =&gt; true 
</span><span class='line'>&gt; require 'open-uri'
</span><span class='line'> =&gt; true 
</span><span class='line'>&gt; url = URI.parse('http://teamtreehouse.com/')
</span><span class='line'> =&gt; #&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/&gt; 
</span><span class='line'>&gt; puts url.inspect
</span><span class='line'>#&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/&gt;
</span><span class='line'> =&gt; nil 
</span><span class='line'>&gt; puts url.hostanme
</span><span class='line'>NoMethodError: undefined method `hostanme' for #&lt;URI::HTTP:0x007f9b728dfda0 URL:http://teamtreehouse.com/&gt;
</span><span class='line'>  from (irb):10
</span><span class='line'>  from /Users/Ajonas/.rvm/rubies/ruby-1.9.3-p194/bin/irb:16:in `&lt;main&gt;'
</span><span class='line'>&gt; puts url.hostname
</span><span class='line'>teamtreehouse.com
</span><span class='line'> =&gt; nil 
</span><span class='line'>&gt; puts url.path
</span><span class='line'>/
</span><span class='line'> =&gt; nil
</span><span class='line'>&gt; puts URI.split('http://teamtreehouse.com').inspect
</span><span class='line'>["http", nil, "teamtreehouse.com", nil, nil, "", nil, nil, nil]
</span><span class='line'> =&gt; nil 
</span><span class='line'>&gt; google = open('http://google.com').read
</span><span class='line'>=&gt; this outputs the html of the google homepage...</span></code></pre></td></tr></table></div></figure>


<h3>Benchmark Module</h3>

<p>Provides methods to report the time used that the program takes to execute&#8230;</p>

<figure class='code'><figcaption><span>Benchmarking symbols vs strings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repetitions</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="s2">&quot;String&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">repetitions</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;hello&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;world&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="s1">&#39;Symbol&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">repetitions</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="n">hello</span><span class="p">:</span> <span class="ss">:world</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>OptParse Library</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ostruct&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;optparse&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyParser</span> 
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="n">options</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">opts</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
</span><span class='line'>          <span class="n">opts</span><span class="o">.</span><span class="n">banner</span> <span class="o">=</span> <span class="s2">&quot;Usage: url&quot;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;-u&#39;</span><span class="p">,</span> <span class="s1">&#39;--url URL&#39;</span><span class="p">,</span> <span class="s1">&#39;Fetches the given url&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>              <span class="n">options</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>          <span class="n">opts</span><span class="o">.</span><span class="n">parse!</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Exceptions encountered: </span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">opts</span>
</span><span class='line'>          <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">options</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">options</span> <span class="o">=</span> <span class="no">MyParser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">open</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Observable Library</h3>

<p>The Observable module allows you to easily implement the observer pattern in your classes. The observer pattern specifies that an object maintains a list of its dependents, called observers, and notifies them automatically of any state changes.</p>

<p>You could put this behavior in the classes themselves, but by putting them in an observer class it keeps the classes clean.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Documenting all this...]]></title>
  <link href="http://ajonas.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://ajonas.herokuapp.com/"/>
  <updated>2012-10-26T16:33:16-04:00</updated>
  <id>http://ajonas.herokuapp.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day17]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17/"/>
    <updated>2012-10-26T09:37:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/26/fis-day17</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Roy Fielding</p>

<p>HTTP- it&#8217;s all about representations of data, not the data itself</p>

<p>urls are to represent a resouce. They should be stateless and you should get multiple representations of it (different data types for example).</p>

<p><a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a> is &#8220;like knocking on your neighbors&#8217; door and ask them to send a message to a guy down the street.&#8221;</p>

<h3>Blogs</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span> <span class="c1">#=&gt; you want to return an empty array so that you can run an iteration on it.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_artist</span><span class="p">(</span><span class="n">artist_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">artist_name</span><span class="p">}</span>
</span><span class='line'>  <span class="k">if</span>  <span class="n">artist</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">artist</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="no">Artist</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">artist_name</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#can be refactored as</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">assign_artist</span><span class="p">(</span><span class="n">artist_name</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Artist</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">artist_name</span><span class="p">}</span> <span class="o">||</span>
</span><span class='line'>  <span class="no">Artist</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">artist</span><span class="o">|</span> <span class="n">artist</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">artist_name</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Spinning Up My First Server</h2>

<p>??swap disk space</p>

<ul>
<li><p><strong>Passenger</strong> knows how to run your app, <strong>nginx</strong> does not</p>

<ul>
<li>nginx sends your request to a Passenger instance

<ul>
<li>nginx is managing the load to Passenger</li>
<li>Passenger is actually running the application ~> managing starting up your app and serving it

<ul>
<li>it could run up to 20 instances of the app on a single server (the default is 5)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>nginx</strong> is the actual webserver. It&#8217;s a piece of software that speaks HTTP, is very high performance and sits between your application and the internet.</p></li>
<li><p>The tutorial is very detailed</p>

<ul>
<li>Not on the tutorial- <a href="https://help.github.com/articles/generating-ssh-keys">adding the SSH key from the server</a></li>
</ul>
</li>
</ul>


<h3>Lessons Learned From the Server Work</h3>

<ul>
<li>Problem: So I couldn&#8217;t deploy for hours&#8230; I went and reconfigured like 3 times. Renamed the name of the application and going through the nginx config file on the server. It sucked.</li>
<li>Answer: I had my database in my .gitignore file, which meant that it was in the deploy from the github. AHHHH!!! I never would have gotten that one.</li>
</ul>


<h2>Ruby</h2>

<ul>
<li><p>Opposites</p>

<ul>
<li>Enumerable#reject

<ul>
<li>Returns an array for all elements of enum for which block is false (see alsoEnumerable#find_all).</li>
</ul>
</li>
<li>Enumerable#select

<ul>
<li>Returns an array containing all elements of enum for which block is not false (see alsoEnumerable#reject).</li>
</ul>
</li>
</ul>
</li>
<li><p>Equivalent, different order for pipes</p>

<ul>
<li>Enumerable#each_with_object

<ul>
<li>Iterates the given block for each element with an arbitrary object given, and returns the initially given object.

<ul>
<li>[1, 2, 3, 4].each_with_object([]) { |element, result| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Enumerable#inject</p>

<ul>
<li>Combines all elements of enum by applying a binary operation, specified by a block or a symbol that names a method or operator.

<ul>
<li>[1, 2, 3, 4].inject([]) { |result, element| result &lt;&lt; element }</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Rails</h3>

<ul>
<li>link_to is a great example of a polymorphic interface

<ul>
<li>if it receives an object (an instance of active record), it can create the correct link</li>
<li>if it receives a string it can create the correct link out of that</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>Routes Shortcuts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/about/:action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;about&#39;</span> <span class="c1"># the action would map directly to the action in the about controller</span>
</span><span class='line'><span class="c1">#this is dangerous but only on the controller level so it would need to be controlled for there...</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/about/:action(/:company)&#39;</span> <span class="c1"># this means that the company part of the url is optional</span>
</span><span class='line'>  <span class="ss">:company</span> <span class="o">=&gt;</span> <span class="s2">&quot;whatever&quot;</span> <span class="c1"># this additional means that &quot;whatever&quot; will be default value</span>
</span></code></pre></td></tr></table></div></figure>


<p>urls that have parameters in them like songs/:genre ~> you need to pass a paramter so that it can match it ~> songs/:genre/:year needs two parameters</p>

<figure class='code'><figcaption><span>In the view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% link_to </span><span class="s1">&#39;Avi&#39;</span><span class="p">,</span> <span class="n">avi_path</span><span class="p">(</span><span class="s2">&quot;flombaum&quot;</span><span class="p">,</span> <span class="s2">&quot;flatiron&quot;</span><span class="p">,</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="s2">&quot;baz&quot;</span><span class="p">)</span> <span class="o">%&gt;</span> <span class="c1">#will add parameter</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Mass Assignment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;call me maybe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#intialize the song with this default attribute</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day16]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16/"/>
    <updated>2012-10-25T09:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/25/fis-day16</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Linus Torvalds</p>

<h2>Rails</h2>

<p>rails assigns attr_accessors</p>

<figure class='code'><figcaption><span>Active Record Queries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">song</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">last</span> <span class="c1">#=&gt; this is the second to last song</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find_by_name</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find_by_anyattrributename</span>
</span><span class='line'><span class="no">Song</span><span class="o">.</span><span class="n">find_all_by_name</span> <span class="c1">#=&gt; sweet</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ORM ~> Object Relational Mapping</h3>

<ul>
<li><strong>A ruby class is to a databse table as instances of that class are to a row in that table</strong>

<ul>
<li>the form field should map to the column name</li>
</ul>
</li>
<li>activerecord&#8217;s exists to accomplish CRUD</li>
<li>active record pattern <a href="http://books.google.com/books?id=FyWZt5DdvFkC&amp;lpg=PA1&amp;dq=Patterns%20of%20Enterprise%20Application%20Architecture%20by%20Martin%20Fowler&amp;pg=PT187#v=onepage&amp;q=active%20record&amp;f=false">proposed by Martin Fowler</a></li>
</ul>


<figure class='code'><figcaption><span>Persistence</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">persisted?</span> <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">new_record?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">persisted?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">new_record?</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>ORM Awareness</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_song</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">changed?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">changes</span> <span class="c1">#=&gt; {&quot;name=&gt; [&quot;whatever&quot;, &quot;new&quot;]}</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">name_changed?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">duration_changed</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">song</span><span class="o">.</span><span class="n">destroy</span> <span class="c1">#=&gt; will destroy the record</span>
</span><span class='line'><span class="n">song</span><span class="o">.</span><span class="n">delete</span> <span class="c1">#=&gt; don&#39;t use this for now</span>
</span></code></pre></td></tr></table></div></figure>


<h3>REST</h3>

<p>Identification of a resource
Individual resources that are identified in the requests, for example using the URIs sin web-based REST systems.</p>

<p>REST- the url address should mirror the http verb and url action</p>

<ul>
<li><em>What do you mean by a representation?</em></li>
<li>these objects have different representations depending on their name</li>
<li>.xml should return the xml and .json and return the json</li>
<li>the objects should be devoid of your form until you ask for them</li>
</ul>


<h3>Routes</h3>

<figure class='code'><figcaption><span>Routes File syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/welcome&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application#welcome&#39;</span>
</span><span class='line'><span class="c1"># same as ApplcationController.welcome</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="n">controller</span> <span class="o">=&gt;</span> <span class="s1">&#39;application&#39;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;welcome&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:songs</span> <span class="c1">#is a macro that is calling 7 methods for you</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>the routes file are evaluated with lazy evaluation. Which allows you to put the most specific patterns on top and let them trickle down&#8230;</li>
<li>7 restful routes: get, create, update, delete, show, etc.</li>
<li><p><em>url endpoint</em>- the very last thing that is executed after a url request- the last application run is the action in the controller</p></li>
<li><p><strong>URL request cascade through a rails app:</strong></p>

<ol>
<li>web server gets request</li>
<li>send it through the rack</li>
<li>last stop, routes file</li>
<li>match a  route</li>
<li>request = SongContoller.new</li>
<li>response = request.index</li>
</ol>
</li>
</ul>


<p>Rails was the first to have implicit rendering&#8230;</p>

<figure class='code'><figcaption><span>Implicit Rendering</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@index</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#this will implicitly render the index page</span>
</span><span class='line'><span class="c1">#could also add ~&gt; render &#39;artist/index&#39; &lt;~ which will over-write the implicitly render</span>
</span><span class='line'><span class="c1">#&#39;artist/index&#39; is a method called on self</span>
</span></code></pre></td></tr></table></div></figure>


<p>class variable can inherit down the inheritance tree
a class instance var is private to the class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@songs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@genres</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Artist</span><span class="o">.</span><span class="n">all</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span><span class="sc">??</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>VPS- Virtual Private server</p>

<p>Linux distribution - ubuntu
server - nginx
unicorn
DB- postgres</p>

<h3>Visualization</h3>

<ul>
<li>how does a partition actually work?

<ul>
<li>2 cores or 4 cores?? i don&#8217;t know what a core is.</li>
</ul>
</li>
<li>hardware usually out-paces software

<ul>
<li>we have had <em>multi-core processors</em> before we had software to take advantage of it.</li>
</ul>
</li>
<li><p>vocab:</p>

<ul>
<li>slice, a box, a vps, are pretty much synonymous</li>
</ul>
</li>
<li><p>dediserve is the server we are using</p></li>
<li>RAM has fast access.</li>
<li><a href="http://vimeo.com/15882917">capistrano</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ssh</span> <span class="n">root</span><span class="err">@</span><span class="mi">96</span><span class="o">.</span><span class="mi">8</span><span class="n">ipaddress</span>
</span><span class='line'><span class="c1">#will get an error saying that you can&#39;t connect</span>
</span><span class='line'><span class="c1">#say yes</span>
</span><span class='line'><span class="c1">#next insert your password: </span>
</span><span class='line'>
</span><span class='line'><span class="c1">#create a new user instead of root</span>
</span><span class='line'><span class="n">useradd</span> <span class="c1">#to get access to instructons</span>
</span><span class='line'><span class="n">man</span> <span class="n">useradd</span>
</span><span class='line'><span class="n">useradd</span> <span class="o">-</span><span class="n">m</span> <span class="o">-</span><span class="n">s</span> <span class="sr">/bin/</span><span class="n">bash</span> <span class="o">-</span><span class="n">G</span> <span class="n">sudo</span> <span class="n">ajonas</span>
</span><span class='line'><span class="c1">#sudo says anyone in sudo group can use sudo adam</span>
</span><span class='line'><span class="c1">#userdel will delete a user</span>
</span><span class='line'>
</span><span class='line'><span class="n">passwd</span> <span class="n">ajonas</span>
</span><span class='line'><span class="c1">#enter password:</span>
</span><span class='line'><span class="n">ssh</span> <span class="n">root</span><span class="err">@</span><span class="mi">96</span><span class="o">.</span><span class="mi">8</span><span class="n">ipaddress</span> <span class="n">will</span> <span class="n">get</span> <span class="n">you</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span> <span class="c1">#for updating indexes and downloading packages, like homebrew</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span>
</span><span class='line'><span class="n">build</span><span class="o">-</span><span class="n">apt</span><span class="o">-</span><span class="n">install</span> <span class="n">build</span><span class="o">-</span><span class="n">essential</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#install your packages with apt-get</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Capistrano</h3>

<ul>
<li>handles your <a href="http://en.wikipedia.org/wiki/Release_management">release management</a> throw the entire code base on your server every time you deploy. Copy code off of Github or server and apply it. This will maintain revisions, roll back easily, compile the CSS in your assets. It can&#8217;t happen manually.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cap</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>will do this for you. It&#8217;s script-able and automatic.</p>

<ul>
<li>This is run locally.</li>
<li>cap is what you use to interact with capistrano from the outside (like rails new from outside a rails project)</li>
<li>capify is how you interact with the gem (like rails generate inside the project folder)</li>
</ul>


<h3>Web Servers</h3>

<ul>
<li>apache was the market leader for best of breed of web server</li>
<li><p>ngenx - can handle lots of requests and tries to stay really small</p>

<ul>
<li>has much smaller memory footprint</li>
<li>has some features that are better suited for rails</li>
<li>ngenx is also a really good load balancer</li>
<li>config file is much easier to understand than ngenx</li>
</ul>
</li>
<li><p>Four functions in the config/deploy.rb DSL</p>

<ul>
<li>set: capistrano variables</li>
<li>role:</li>
</ul>
</li>
</ul>


<h3>Further reading</h3>

<ul>
<li>backups</li>
<li>log rotations - when your log gets too big, it is going to zip it up and send it to some long term storage. The first thing hackers will do is go through the logs.</li>
</ul>


<h3>Reading in prep:</h3>

<ul>
<li>Capistrano reads its instructions from a capfile.</li>
<li>many server clusters are hidden behind NATs (Network address translation) and firewalls, to prevent direct access.

<ul>
<li>NATs - the process of modifying IP address information in IP packet headers while in transit across a traffic routing device.</li>
</ul>
</li>
<li>Tasks are the foundation of a Capistrano setup; collections of tasks are typically called Recipes.</li>
<li><p>Daemons are special system applications which typically execute continuously in the background and await requests for the functions they provide from other applications.</p></li>
<li><p><em>From lowest to highest, the layers of the internet protocol suite are:</em></p></li>
<li>The link layer (commonly Ethernet) contains communication technologies for a local network.</li>
<li>The internet layer (IP) connects local networks, thus establishing internetworking.</li>
<li>The transport layer (TCP) handles host-to-host communication.</li>
<li><p>The application layer (for example HTTP) contains all protocols for specific data communications services on a process-to-process level (for example how a web browser communicates with a web server).</p></li>
<li><p>Stateless firewalls require less memory, and can be faster for simple filters that require less time to filter than to look up a session.</p></li>
<li><p>Modern firewalls can filter traffic based on many packet attributes like source IP address, source port, destination IP address or port, destination service like WWW or FTP.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Motion]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/ruby-motion/"/>
    <updated>2012-10-24T19:16:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/ruby-motion</id>
    <content type="html"><![CDATA[<p>ios simulator app
git repo: malkomalko/tweets-i-love</p>

<ul>
<li><p>File structure:</p>

<ul>
<li>controller</li>
<li>extensions</li>
<li>models</li>
<li>styles</li>
<li>views</li>
<li>build</li>
<li>resources</li>
<li>spec</li>
<li>tasks</li>
<li>vendor</li>
<li>Gemfile</li>
</ul>
</li>
<li><p>Use Xcode for storyboards</p></li>
</ul>


<p><a href="https://github.com/CocoaPods/CocoaPods">Cocoapods</a></p>

<p>more or less -> every screen of data is bound to a view controller</p>

<p>??delegates ~> look it up</p>

<p><a href="http://iconoclastlabs.com/cms/blog/posts/starting-with-rubymotion-delegates-and-messages">read</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@collection = [*"a".."z"] ~&gt; explode a range in the view</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Questions]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/interview-questions/"/>
    <updated>2012-10-24T15:47:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/interview-questions</id>
    <content type="html"><![CDATA[<p><a href="http://codegolf.com/tower-of-hanoi">Towers of Hanoi</a></p>

<p><a href="http://en.literateprograms.org/Fibonacci_numbers_(Ruby">Fibonacci Sequence</a>) <a href="http://vimeo.com/45768714">(Fib in video)</a></p>

<p><a href="https://github.com/darcyclarke/Front-end-Developer-Interview-Questions">front-end interview questions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiniTest::Spec]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/minitest-spec/"/>
    <updated>2012-10-24T13:30:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/minitest-spec</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>MiniTest Spec Matchers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be</span><span class="p">(</span><span class="n">operator</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">-</span> <span class="k">for</span> <span class="n">example</span><span class="p">,</span> <span class="mi">10</span><span class="o">.</span><span class="n">must_be</span> <span class="p">:</span><span class="o">&lt;</span> <span class="p">,</span> <span class="mi">11</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_close_to</span> <span class="o">-</span> <span class="n">the</span> <span class="n">equivalent</span> <span class="n">of</span> <span class="n">assert_in_delta</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_empty</span> <span class="o">-</span> <span class="no">Fails</span> <span class="k">unless</span> <span class="n">obj</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_instance_of</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span> <span class="o">-</span> <span class="no">Fails</span> <span class="k">unless</span> <span class="n">obj</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="n">klass</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_kind_of</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span> <span class="o">-</span> <span class="no">Fails</span> <span class="k">unless</span> <span class="n">obj</span> <span class="n">is</span> <span class="n">of</span> <span class="k">class</span> <span class="n">klass</span> <span class="ow">or</span> <span class="n">klass</span> <span class="n">is</span> <span class="n">one</span> <span class="n">of</span> <span class="n">its</span> <span class="n">superclasses</span><span class="o">.</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_nil</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_same_as</span> <span class="o">-</span> <span class="n">tests</span> <span class="k">for</span> <span class="kp">true</span> <span class="n">object</span> <span class="n">equality</span>
</span><span class='line'><span class="nb">lambda</span> <span class="p">{}</span><span class="o">.</span><span class="n">must_be_silent</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_within_delta</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_be_within_epsilon</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_equal</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="o">-</span> <span class="no">Does</span> <span class="n">a</span> <span class="o">==</span><span class="sr">/eql? comparison between two objects.</span>
</span><span class='line'><span class="sr">obj.must_include(other)</span>
</span><span class='line'><span class="sr">obj.must_match(regex) - A regular expression match, e.g. &quot;hello&quot;.must_match /</span><span class="n">w</span><span class="o">+/</span>
</span><span class='line'><span class="nb">lambda</span> <span class="p">{}</span><span class="o">.</span><span class="n">must_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="o">[</span><span class="n">stderr</span><span class="o">.</span><span class="n">.</span><span class="o">]</span><span class="p">)</span> <span class="o">-</span> <span class="no">The</span> <span class="n">block</span> <span class="n">should</span> <span class="n">have</span> <span class="n">certain</span> <span class="n">output</span> <span class="n">on</span> <span class="n">stdout</span> <span class="ow">or</span> <span class="n">stderr</span><span class="o">.</span> <span class="no">Set</span> <span class="n">stdout</span> <span class="n">to</span> <span class="kp">nil</span> <span class="n">just</span> <span class="n">to</span> <span class="n">check</span> <span class="n">stderr</span><span class="o">.</span>
</span><span class='line'><span class="nb">lambda</span> <span class="p">{}</span><span class="o">.</span><span class="n">must_raise</span><span class="p">(</span><span class="n">exception</span><span class="p">)</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_respond_to</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">must_throw</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Negative Matchers too</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wont_be</span>
</span><span class='line'><span class="n">wont_be_empty</span>
</span><span class='line'><span class="n">wont_be_instance_of</span>
</span><span class='line'><span class="n">wont_be_kind_of</span>
</span><span class='line'><span class="n">wont_be_nil</span>
</span><span class='line'><span class="n">wont_be_same_as</span>
</span><span class='line'><span class="n">wont_equal</span>
</span><span class='line'><span class="n">wont_include</span>
</span><span class='line'><span class="n">wont_match</span>
</span><span class='line'><span class="n">wont_respond_to</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driven Development]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/test-driven-development/"/>
    <updated>2012-10-24T13:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/test-driven-development</id>
    <content type="html"><![CDATA[<p>??browser testing? this falls under acceptance tests?</p>

<p><em>Difference between mock, stub, and fixture?</em> They are all a mechanisms to decouple data from the database. If your DB is down, you couldn&#8217;t run your test suite.</p>

<p><em>Fixtures and factories</em> sort of relate to each other so that you don&#8217;t have to instantiate a bunch of objects.</p>

<p><em>mocks and stubs</em>: connect to the FB api, but you don&#8217;t need to, so you create something that responses with canned data like it is the facebook api.</p>

<p>why does a spec folder hold the tests? This outlines the specifications?
  - A specification is an explicit set of requirements to be satisfied by a material, product, or service.</p>

<p>??ping ponging - if someone writes a test and the other passes it are you switching off every 5 minutes</p>

<p><a href="http://railscasts.com/episodes/275-how-i-test">&#8220;How I test&#8221; with Ryan Bates</a></p>

<p>only open the browser when you need to focus on UI. Otherwise use tests.</p>

<p><a href="https://github.com/jnicklas/capybara">capybara</a> to simulate the user
factory-girl instead of fixtures -> where you store your factories
guard</p>

<p>integeration_test</p>

<figure class='code'><figcaption><span>Capybara DSL Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">visit</span> <span class="n">login_path</span>
</span><span class='line'>    <span class="n">click_link</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s2">&quot;Reset Password&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.skorks.com/2010/01/thoughts-on-tdd-a-case-study-with-ruby-and-rspec/">Good article on the process of testing</a></p>

<h2>Steven Nunez</h2>

<p>@_StevenNunez
conway&#8217;s game of life</p>

<p>Testing is: the act of isolating parts of your code with a known state to ensure it works as expected</p>

<p>Acceptance testing, integration and tests: cucumber, capybara, webrat</p>

<p>unit tests - take a class, take tests and make objects</p>

<h3>Why test?</h3>

<ul>
<li>want to know when things break</li>
<li>allows for courageous refactoring</li>
<li>gives documentation on how your code is SUPPOSED to work. Learn to expect tests.</li>
<li>It is your duty to deliver working code. Verification.</li>
</ul>


<h3>Testing sounds like an extra step&#8230;</h3>

<ul>
<li>Forces you to think small</li>
<li>Less thoughts to juggle</li>
<li>Leads to modular code</li>
<li>write less code</li>
<li>increase documentation: see what the intention was</li>
<li>small victories: always chasing green</li>
</ul>


<h3>RSpec</h3>

<ul>
<li>RSpec provides something called subject

<ul>
<li>subject = Class.new</li>
</ul>
</li>
</ul>


<h3>Write the code you wish you had</h3>

<ul>
<li>test with none, test with 1, test with some</li>
<li>can write a pending test by just writing it blocks</li>
</ul>


<p>BDD is more route => controller => model
TDD is more model => controller => route</p>

<p>practical object oriented design by <a href="http://www.poodr.info">sandi metz</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day15]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/24/fis-day15/"/>
    <updated>2012-10-24T09:41:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/24/fis-day15</id>
    <content type="html"><![CDATA[<p>Refactoring ruby by Jay Fields</p>

<h3>POTD</h3>

<p>Apache - most popular web server that powers 57% of the internet
68% of the top 100 sites use apache</p>

<p>LAMP - linux, apache, mysql, php</p>

<p><a href="http://en.wikipedia.org/wiki/User:Hobart/Robert_McCool">Rob McCool</a></p>

<p>Named after Apache Native American tribe and also &#8220;A patchy server&#8221;</p>

<p><a href="http://code.google.com/p/codeswarm/">code_swarm</a></p>

<h3>Code Review</h3>

<p>CLI-
The only thing that should be rescued are exceptional errors&#8230;
- rescuing a non-exceptional search item.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="c1"># runs the code</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="c1">#resuces an error</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://en.wikipedia.org/wiki/Defensive_programming">defensive programming</a></li>
<li><a href="http://eimers.blogspot.com/2008/02/reflection-vs-introspection.html">introspection</a> - look in the DB and see what attributes I have</li>
<li>when something changes, you just need to trickle that change to a bunch of different places.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">PRAMA</span> <span class="n">table_info</span><span class="p">(</span><span class="n">students</span><span class="p">);</span>
</span><span class='line'><span class="c1">#returns the headers of the table</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Debugger</h3>

<p>gives you debugger prompt- type irb which will allow you to drop into IRB with the objects all ready loaded</p>

<h3>Methods</h3>

<ul>
<li><p>??inject() do |incrementer, another param|</p>

<ul>
<li>it is the result of the block that keeps getting passed along.

<ul>
<li><h1>needs review</h1></li>
</ul>
</li>
</ul>
</li>
<li><p>??each_with_object</p>

<ul>
<li>This needs review, passes in the object as the second argument, inject is the first. There is little diff other than that.</li>
</ul>
</li>
<li><p>send(string_or_a_symbol, data[i])</p></li>
</ul>


<h3>Code Review</h3>

<p><a href="http://masonry.desandro.com/">jquery masonry</a></p>

<p>dynamic dispatching</p>

<p><strong>use the database to find stuff for you, not ruby</strong></p>

<p>raw_results</p>

<figure class='code'><figcaption><span>Send method example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new_from_db</span><span class="p">(</span><span class="n">raw_results</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Programmer</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>    <span class="n">raw_results</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span> <span class="c1">#name of the attribute, value of the attribute</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>program with the initialize method or better yet, build on top of the new object</strong></p>

<ul>
<li><p>drop db or just drop table? USE: database cleaner gem- drop the data (truncate it)</p></li>
<li><p>the .included method at the bottom of the module is like a callback or hook</p></li>
</ul>


<h2>Rails Lecture</h2>

<ul>
<li><p>the rails command inside the the rails app folder is very different than outside the folder&#8230;</p></li>
<li><p>bundler - we call it a bundle, because it is a bundle of dependencies</p></li>
<li><p>all ruby web applications will respond to a rack application&#8230;</p></li>
<li>ActiveRecord is for relational databases (not MongoDB for example)</li>
</ul>


<h3>MVC</h3>

<p>Models are our objects the CRUD
<strong>Models are always SINGULAR</strong></p>

<p>Controller are about ferrying data from one place to another-> just business logic</p>

<p>Views are display logic -> present data</p>

<h3>Other Files</h3>

<p>lib dir:</p>

<ul>
<li>for any modules that made my classes autocompletable for all songs and users</li>
<li> anything that isn&#8217;t part of the request cycle</li>
</ul>


<p>Public dir:</p>

<ul>
<li>whatever you put in the public dir will automatically be served (that is why it worked in sinatra)</li>
</ul>


<h3>Resources</h3>

<p>a resource means that you have a model, controller, and a view</p>

<h3>Migrations</h3>

<p>apply any migrations all changes that have not been previously been uncommitted</p>

<figure class='code'><figcaption><span>Send method example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>
rake is included in the standard library</p>

<h3>TDD</h3>

<p><a href="http://ajonas.herokuapp.com/blog/2012-10-24-test-driven-development">see</a></p>

<h3>Ruby</h3>

<figure class='code'><figcaption><span>Hash.new</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@item</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c1">#when something is instantiated its value will be 0</span>
</span><span class='line'><span class="vi">@item</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8220;anytime you see a private method you see a new class yearning to be born&#8221;</p>

<figure class='code'><figcaption><span>Ruby Magic</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span> <span class="c1">#=&gt; [3]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">|</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span> <span class="c1">#=&gt; [1,2,3,4,5]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gregg Pollack]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/gregg-pollack/"/>
    <updated>2012-10-23T15:00:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/gregg-pollack</id>
    <content type="html"><![CDATA[<h3>Transparency</h3>

<ul>
<li><p>Client closer to the team</p>

<ul>
<li>short feedback cycles

<ul>
<li>show work on a weekly basis</li>
</ul>
</li>
</ul>
</li>
<li><p>Understanding the why of your work</p>

<ul>
<li>clients often don&#8217;t know what they really want

<ul>
<li><p>ask questions</p>

<p>  In order to<em><strong><em>,
  as a </em></strong>,
  I want to </em>__.</p></li>
</ul>
</li>
</ul>
</li>
<li><p>Code is a craft.</p>

<ul>
<li>consulting is more challenging than a startup

<ul>
<li>scratching someone else&#8217;s itch is more challenging</li>
</ul>
</li>
</ul>
</li>
<li><p>There are things that you can delegate</p></li>
<li><p>Starting a book club- for both your company and those around you.</p></li>
<li><p>Use <a href="http://skitch.com/">Skitch</a> and <a href="http://www.techsmith.com/jing.html">Jing is like skitch for screencasting</a> to show off your work and improve feedback.</p></li>
<li><p><strong>Ask a company about their core values&#8230;</strong></p></li>
</ul>


<h3>Estimates</h3>

<ul>
<li>go to user stories right away</li>
<li>show the estimates of the of the features, not of the tasks that contribute to the feature</li>
<li>get away from big estimates immediately - we don&#8217;t show the granular estimates</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 reasons to quit your job and learn to code]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/3-reasons-to-quit-your-stupid-job-and-learn-to-code/"/>
    <updated>2012-10-23T13:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/3-reasons-to-quit-your-stupid-job-and-learn-to-code</id>
    <content type="html"><![CDATA[<p>In the first five minutes of my first programming class I knew I was in trouble. I didn&#8217;t know what a method was. I didn&#8217;t know what an array was. My teacher babbled on about controllers and TCP packets as I nervously glanced around wondering if I was the only with that terrible pit in my stomach.</p>

<p>After class, I went up to <a href="http://flatironschool.com/#people">Avi</a> and told him of my situation. He offered two choices: a refund <strong><em>or</em></strong> I could push through and take the class as many times as needed. At this point, I don&#8217;t think I&#8217;ll be getting my money back&#8230;</p>

<p><a href="http://www.flickr.com/photos/adambindslev/4804939869/sizes/m/in/photostream/"><img class="right" src="http://ajonas.herokuapp.com/images/bored.jpg" width="250" title="Don't be Boring" ></a></p>

<h2>Why you should consider a change</h2>

<p><strong>1. You probably aren&#8217;t very happy with your job.</strong>
There are lots of people who are perfectly happy with their jobs. The chances are, you aren&#8217;t one of them. I can&#8217;t believe how many of the people in my life complain about something they spend a minimum of 8 hours a day doing. Few take action to make a change. Don&#8217;t let your future be defined by inaction.</p>

<p><strong>2. Tech is about as close to a meritocracy as you are going to find.</strong>
Unless you are the beneficiary of exceptional privilege, you probably wish that people would judge you on your merits rather than your: race, origin, sexual orientation, gender, hairstyle, or the color of your socks. In tech, people actually care about your skills. One&#8217;s pedigree means little in the absence of substance. It is how life should be. The best teacher <em>should</em> get paid the most. The best actors <em>should</em> get the leading roles. The best candidate <em>should</em> get the job. In tech, this <em>actually</em> happens.</p>

<p><strong>3. You don&#8217;t have to be a leecher anymore&#8230;</strong>
Since my Dad first popped in that AOL floppy disk around 1995, I have been a consumer of the internet. I&#8217;ve sucked down untold hours of <a href="http://mlb.com">baseball news</a> and <a href="http://gawker.com/5952338/had-a-ruff-day-this-dog-video-is-guaranteed-to-improve-your-mood">dog videos</a>. <a href="http://www.flickr.com/photos/alanchan/"><img class="right" src="http://ajonas.herokuapp.com/images/aoldisk.jpg" width="250" title="AOL Floppy" ></a> I&#8217;ve used web applications to communicate with my family, conduct business, and plan my social life. I&#8217;ve logged onto the internet nearly every day of the second-half of my life. I decided last year that I was done being a suck on the system. <a href="http://mldraft.com">Mldraft</a> was my first attempt to contribute something and it wasn&#8217;t great. The experience did, however, fundamentally change my perspective on being a consumer. I&#8217;ll be a leecher no more and neither should you.</p>

<blockquote><p>&#8220;The time for ideas is over.&#8221;  - <a href="https://twitter.com/dhh">Joseph Devenuta, Flatiron School &#8216;12</a></p></blockquote>

<p>There are so many resources to get started. There are limitless <a href="http://ajonas.herokuapp.com/blog/2012/10/10/code-school-vs-treehouse-vs-code-academy/">online tutorials</a> and <a href="http://www.meetup.com/nyc-on-rails/">Meetups</a>. You don&#8217;t need to be a math whiz or a hermit to be a programmer. If you have ever learned a foreign language; if you have ever spent hours at a time mastering a song on guitar; if you have ever spent a full afternoon improving your free-throw you can learn to code. <a href="http://www.youtube.com/watch?v=4npR4QZp_5M">Do it.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day14]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/23/fis-day14/"/>
    <updated>2012-10-23T09:45:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/23/fis-day14</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>DHH- you know who he is.</p>

<p>Stubs:
A method stub is an implementation that returns a pre-determined value. Method stubs can be declared on test doubles or real objects using the same syntax. rspec-mocks supports 3 forms for declaring method stubs:</p>

<p><a href="http://www.martinfowler.com/articles/mocksArentStubs.html">Mocks aren&#8217;t stubs</a></p>

<figure class='code'><figcaption><span>RSpec Hooks</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rspec/expectations&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;before and after callbacks&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;before all&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;before each&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;after each&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;after all&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;gets run in order&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.relishapp.com/rspec/rspec-core/v/2-2/docs/hooks/before-and-after-hooks">before and after hooks</a></p>

<h3>Git Error</h3>

<figure class='code'><figcaption><span>RSpec Hooks</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">You</span> <span class="n">asked</span> <span class="n">me</span> <span class="n">to</span> <span class="n">pull</span> <span class="n">without</span> <span class="n">telling</span> <span class="n">me</span> <span class="n">which</span> <span class="n">branch</span> <span class="n">you</span>
</span><span class='line'><span class="n">want</span> <span class="n">to</span> <span class="n">rebase</span> <span class="n">against</span><span class="p">,</span> <span class="ow">and</span> <span class="s1">&#39;branch.master.merge&#39;</span> <span class="k">in</span>
</span><span class='line'><span class="n">your</span> <span class="n">configuration</span> <span class="n">file</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">tell</span> <span class="n">me</span><span class="p">,</span> <span class="n">either</span><span class="o">.</span> <span class="no">Please</span>
</span><span class='line'><span class="n">specify</span> <span class="n">which</span> <span class="n">branch</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">use</span> <span class="n">on</span> <span class="n">the</span> <span class="n">command</span> <span class="n">line</span> <span class="ow">and</span>
</span><span class='line'><span class="n">try</span> <span class="n">again</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="s1">&#39;git pull &lt;repository&gt; &lt;refspec&gt;&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">See</span> <span class="n">git</span><span class="o">-</span><span class="n">pull</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">details</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">If</span> <span class="n">you</span> <span class="n">often</span> <span class="n">rebase</span> <span class="n">against</span> <span class="n">the</span> <span class="n">same</span> <span class="n">branch</span><span class="p">,</span> <span class="n">you</span> <span class="n">may</span> <span class="n">want</span> <span class="n">to</span>
</span><span class='line'><span class="n">use</span> <span class="n">something</span> <span class="n">like</span> <span class="n">the</span> <span class="n">following</span> <span class="k">in</span> <span class="n">your</span> <span class="n">configuration</span> <span class="n">file</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="n">branch</span> <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">remote</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">nickname</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">merge</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">remote</span><span class="o">-</span><span class="n">ref</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">rebase</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;&lt;nickname&gt;&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">url</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">fetch</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">refspec</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/11407161/cant-pull-without-saying-which-branch-to-rebase-against">see</a></p>

<p><a href="http://en.wikipedia.org/wiki/Ted_Nelson">hypertext was coined by</a></p>

<h2>Rails Lecture</h2>

<p>as a client you identify your attributes to a webserver in your headers
in theory, you don&#8217;t need anything in the header.</p>

<ul>
<li>a request must have a url and a method</li>
<li>a response has it&#8217;s own headers

<ul>
<li>shows the kind of content type</li>
<li>displays the body and the content (like the HTML)</li>
</ul>
</li>
<li>hypertext transfer protocol (http)</li>
</ul>


<h3>HTTP verbs:</h3>

<ul>
<li>get: retrieve</li>
<li>post: submits data- appropriate if you are submitting entirely new data</li>
<li>put: update</li>
<li>delete: delete this resource</li>
<li>head: asks for response like a GET but without the body</li>
<li>trace, options, connect, patch: we don&#8217;t care about</li>
</ul>


<h3>Convention over configuration</h3>

<p><strong>Naming Scheme</strong>
table: songs
model: song.rb
controller: songs_controller.rb
views: songs/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal Design Patterns and Gotchas]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/22/personal-design-patterns/"/>
    <updated>2012-10-22T09:47:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/22/personal-design-patterns</id>
    <content type="html"><![CDATA[<p>For when I get in trouble?</p>

<ul>
<li>Do I want to be accessing an attribute of an object or the object itself?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day13]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13/"/>
    <updated>2012-10-21T19:18:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/21/fis-day13</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;It is much easier to optimize correct code than it is to correct optimized code.&#8221;</p></blockquote>

<h3>POTD Uncle Bob</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Robert_Cecil_Martin">Wikipedia</a></li>
<li><a href="http://agilemanifesto.org/">Agile manifesto</a></li>
</ul>


<h3>Nate Westheimer</h3>

<ul>
<li>? What kind of startups would you like to work at?</li>
<li>? Since we are starting with a blank slate, what would you spend your time learning? Mobile? What skills will ensure you will be valuable for the next few years?</li>
<li>? why choose mysql over other db options, how do you make other architectural decisions since you may not have a bird&#8217;s eye view?</li>
<li>? controlling feature creep - where i live based on the photos&#8211; necessary? A: intuition</li>
</ul>


<p><strong>Mentions:</strong></p>

<ul>
<li><a href="http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html">comparing pictures</a></li>
<li>imagemagick- gem for manipulating photos</li>
<li><a href="http://stu.mp/2004/06/a-quick-bitmask-howto-for-programmers.html">bit mask</a></li>
<li>vertical color palette is spits out top 5 colors out my <a href="http://www.imagemagick.org/script/index.php">imagemagick</a></li>
<li><a href="http://www.merbivore.com/">merb</a>- a product people love because it&#8217;s simple</li>
<li><a href="http://digital-photography-school.com/using-exif-data">exif</a> data in the photos</li>
<li><a href="http://www.amazon.com/iWoz-Computer-Invented-Personal-Co-Founded/dp/0393330435/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1350920465&amp;sr=1-1&amp;keywords=iwoz">IWOZ</a> by Steve Wozniak</li>
<li><a href="http://www.amazon.com/Soul-New-Machine-Tracy-Kidder/dp/0316491977">soul of the new machine</a></li>
</ul>


<h3>TDD</h3>

<p>Setup and tear down methods come with every test suite.</p>

<ul>
<li>CLI application for the dynamic</li>
<li>test the job board classes, using SQL joins&#8211; class called job and a class called company</li>
<li>test the student class in the dynamic site</li>
<li>focus on Sinatra- put a front end on the job board</li>
<li>find what they scraped and build an end all be all of job scrapers.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile with  Matt Salerno]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/19/agile-with-matt-salerno/"/>
    <updated>2012-10-19T13:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/19/agile-with-matt-salerno</id>
    <content type="html"><![CDATA[<h2>Agile is&#8230;</h2>

<p><strong><em>is about getting input from your environment</em></strong></p>

<ul>
<li>many agile dev techniques, come from Toyota and lean manufacturing

<ul>
<li>if they were based on 1000 cars a day metric and the suppliers or demand change, Toyota needed to avoid</li>
</ul>
</li>
</ul>


<p><em>split the process into small parts to reduce waste and inefficiency</em></p>

<ul>
<li>set up frequent opportunities for assessment and feedback</li>
<li>plan only as far ahead as you need to. Your environment WILL change.</li>
<li>break the process down into the smallest possible units</li>
</ul>


<h3>Small Pieces</h3>

<ul>
<li>break the task down and break the time frames down</li>
<li>sprints: in an avg dev shop, a sprint might be from 2-3 weeks

<ul>
<li>for a day project, we use sprints from</li>
</ul>
</li>
</ul>


<p><strong>Get feedback so that you can fail faster</strong></p>

<h3>Process</h3>

<ol>
<li>sprint planning session</li>
<li>sprint</li>
<li>retrospective</li>
</ol>


<h3>Stories</h3>

<p>Epic > stories > task</p>

<ul>
<li>Story = what is this code going to do?

<ul>
<li>break the story down into tasks to make that happen</li>
</ul>
</li>
</ul>


<h3>Planning session</h3>

<ul>
<li>beginning of the project, you start out with a planning session.

<ul>
<li>the client and the user can identify the NEED TO HAVES and WANT TO HAVES

<ul>
<li>which stories are we going to pull out from the backlog</li>
</ul>
</li>
<li>reduce you waste because the client is going to change their mind</li>
</ul>
</li>
</ul>


<h3>Agile is sort of the like:</h3>

<ul>
<li>~= small git commits</li>
<li>~= TDD</li>
</ul>


<p><strong><em>Nice job <a href="https://twitter.com/seldomatt">Matt</a></em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day12]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/19/fis-day12/"/>
    <updated>2012-10-19T09:36:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/19/fis-day12</id>
    <content type="html"><![CDATA[<h3>POTD: Tim Berners-Lee</h3>

<ul>
<li>physicist</li>
<li>invented the world wide web in 1989 @ <a href="http://public.web.cern.ch/public/">Cern</a></li>
<li><a href="http://en.wikipedia.org/wiki/Marshall_McLuhan">Marshall_McLuhan</a></li>
</ul>


<h3>Modules</h3>

<p><strong>Dogs and humans can both run, so should they inherit from runner or runnable?</strong></p>

<p>We put this shared behavior into a module so that the class can include or <strong>mixin</strong> modules.</p>

<p>modules can include other modules</p>

<p>include - is for the instance methods
extend - is for the class methods</p>

<p>super - call the same exact message on the class above</p>

<figure class='code'><figcaption><span>Simple Inheritance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'> <span class="kp">attr_accessor</span> <span class="ss">:legs</span>
</span><span class='line'>
</span><span class='line'> <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">legs_count</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@leg</span> <span class="o">=</span> <span class="n">legs_count</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Human</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:hair_color</span> <span class="c1">#this is an additional accessor</span>
</span><span class='line'>  <span class="c1">#and doesn&#39;t over-ride any #other attr_accessor</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#this overides the initialize in the Animal class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#super sexy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>The Builder Pattern</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Movement</span><span class="o">::</span><span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Human</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Movement</span><span class="o">::</span><span class="no">Animal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Movement</span><span class="o">::</span><span class="no">Human</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ERB</h3>

<p>The <a href="http://www.ruby-doc.org/stdlib-1.9.3/">standard library</a> is separate because you can release ruby and the standard lib without updating the release of the other</p>

<p>&lt;%=  %> (known as a delimiter) is like interpolation for a template</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;erb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="c1">#EOF = end of file</span>
</span><span class='line'><span class="n">template</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span>
</span><span class='line'><span class="sh"> the value of x is: &lt;%= x %&gt;</span>
</span><span class='line'><span class="no">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span> <span class="c1">#the value of x is :42</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">24</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">template</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span> <span class="c1">#the value of x is: 24</span>
</span></code></pre></td></tr></table></div></figure>


<p>binding - is equal to the current scope - return to me everything in the universe that happened at this point in time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heroku deployment]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/18/heroku-deployment/"/>
    <updated>2012-10-18T11:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/18/heroku-deployment</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Initialize the repository
</span><span class='line'>$ git init
</span><span class='line'>
</span><span class='line'># Add new files to the repo
</span><span class='line'>$ git add .
</span><span class='line'>
</span><span class='line'># See the status
</span><span class='line'>$ git status
</span><span class='line'>
</span><span class='line'># Commit the changes with the commit message "testing"
</span><span class='line'>$ git commit -m "testing"
</span><span class='line'>
</span><span class='line'># Create a new Heroku app
</span><span class='line'>$ heroku create
</span><span class='line'>
</span><span class='line'># Rename the Heroku app
</span><span class='line'># Example: $ heroku rename tom-messages
</span><span class='line'>$ heroku rename &lt;name of url&gt;
</span><span class='line'>
</span><span class='line'># Add a (free) PostgreSQL database to your app
</span><span class='line'>$ heroku addons:add heroku-postgresql
</span><span class='line'>
</span><span class='line'># See the details of your new database
</span><span class='line'>$ heroku pg:info
</span><span class='line'>
</span><span class='line'># Promote your new database to the "DATABASE_URL" global constant
</span><span class='line'># Example: $ heroku pg:promote HEROKU_POSTGRESQL_BRONZE_URL
</span><span class='line'>$ heroku pg:promote &lt;YOUR_HEROKU_URL&gt;
</span><span class='line'>
</span><span class='line'># Push your repo to Heroku, start your app
</span><span class='line'>$ git push heroku master
</span><span class='line'>
</span><span class='line'># Open the app in your browser
</span><span class='line'>$ heroku open
</span><span class='line'>
</span><span class='line'># See your app's log, keep the stream open by using "--tail"
</span><span class='line'>$ heroku logs --tail
</span><span class='line'>
</span><span class='line'># Set up the database for first use, running "DataMapper.auto_migrate!"
</span><span class='line'># Example: $ http://ajonas.herokuapp.com/reset
</span><span class='line'>$ http://&lt;project-name&gt;.herokuapp.com/reset
</span><span class='line'>
</span><span class='line'># See your messages!
</span><span class='line'># Example: $ http://ajonas.herokuapp.com
</span><span class='line'>$ http://&lt;project-name&gt;-messages.herokuapp.com</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day11]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/18/fis-day11/"/>
    <updated>2012-10-18T09:39:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/18/fis-day11</id>
    <content type="html"><![CDATA[<h3>POTD: Adele Goldberg</h3>

<ul>
<li>developed smalltalk and design patterns</li>
<li>WIMP: windows, icons, menus, pointers.</li>
</ul>


<h3>Making the student pages dynamic</h3>

<p>user:</p>

<ul>
<li>go to any of the 20 pages and get unique content</li>
</ul>


<p>write tests:</p>

<ul>
<li>write failing test</li>
</ul>


<p>create a cms</p>

<ul>
<li>pull data: use db from</li>
<li>add data</li>
</ul>


<p>sinatra interact with db</p>

<ul>
<li>create erb views,</li>
<li>paths in sinatra</li>
</ul>


<p>sinatra front end
hash student</p>

<p>create a class called student so that the hash
student.find[1] - has all the</p>

<p>hardcode the data on the front end
while the backend is done by the other group</p>

<p>(column names are the key and values are the rows.)</p>

<p>Git co in a branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git co &lt;specific file&gt;
</span><span class='line'>#will pull in the file from the master branch</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day10]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/17/fis-day10/"/>
    <updated>2012-10-17T09:42:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/17/fis-day10</id>
    <content type="html"><![CDATA[<p>Yaml is more about structured data. Markdown is more about content.</p>

<p>Koans don&#8217;t really demonstrate variable scope.</p>

<p>Vint Cerf:</p>

<blockquote><p>built TCP</p></blockquote>

<h3>Programmer of the day</h3>

<p>Kent Beck:</p>

<ul>
<li>invented smalltalk</li>
<li>smalltalk design patterns, refactoring, test-driven development, extreme programming, the agile manifesto</li>
</ul>


<blockquote><p><strong>The nature of errors are unmet expectations</strong> you made an assumption and for some reason that is not longer true.</p></blockquote>

<h3>Test Driven Development</h3>

<p>define your expectation</p>

<ul>
<li><strong>writing tests is writing the code I wish I had</strong></li>
<li><strong>testing is not about quality assurance</strong></li>
</ul>


<p>If you are using a case statement your code isn&#8217;t object oriented.</p>

<p><a href="http://sqlite-ruby.rubyforge.org/sqlite3/faq.html">execute batch</a></p>

<h2>Ruby</h2>

<h3>Hooks</h3>

<figure class='code'><figcaption><span>initialize</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#by specifying that initialize </span>
</span><span class='line'>  <span class="c1">#in initialize its very much ok to use initialize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>class Methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Artist</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">top_5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Artist</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>  <span class="c1">#this method is hard to read if you are scrolled all the way down.</span>
</span><span class='line'>  <span class="c1">#it doesn&#39;t explicitly say it&#39;s a class method in the method signature</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">top_5</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mini Library Project</h3>

<figure class='code'><figcaption><span>Lessons Learned</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="n">find_songs</span><span class="p">(</span><span class="n">library</span><span class="p">,</span> <span class="s2">&quot;Poker Face&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s2">&quot;Poker Face&quot;</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">e</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#notice that find_songs has an implicit receiver. Since it&#39;s not a </span>
</span><span class='line'><span class="c1">#class method, it has to be called OUTSIDE a class...</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ALSO</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">search_songs</span><span class="p">(</span><span class="n">library</span><span class="p">,</span> <span class="n">song</span><span class="p">)</span>
</span><span class='line'>    <span class="n">library</span><span class="o">.</span><span class="n">songs</span><span class="o">.</span><span class="n">find_all</span> <span class="p">{</span> <span class="o">|</span><span class="n">ea_song</span><span class="o">|</span> <span class="n">ea_song</span> <span class="k">if</span> <span class="n">ea_song</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">song</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#make sure that I&#39;m calling the .find_all on an ATTRIBUTE of an object. &#39;Come on Jonas,&#39; you are better than that.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day9]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/16/fis-day9/"/>
    <updated>2012-10-16T09:38:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/16/fis-day9</id>
    <content type="html"><![CDATA[<h3>POTD</h3>

<p>Alan Kay</p>

<ul>
<li>think of programming and computers as metaphors</li>
<li>Created the GUI</li>
<li>GUI and object orientation are totally in line</li>
</ul>


<p>The hyperlink makes the internet unique. Embedding context and meta-data is what make the internet special.</p>

<h3>Object Orientation</h3>

<p>Chinese proverb:</p>

<blockquote><p>The beginning of wisdom is to call things by their right names.</p></blockquote>

<p>Defining new kinds of things and bringing these to code. We should be able to create our own things. Teach those things how to work. And use those things.</p>

<ul>
<li>class Names are arbitrary and simply point to a block of behaviors. They are just variables</li>
<li>the difference between variable types is the scope. The context in which they were created.</li>
<li>a class and a module represent the same behavior and scope gate</li>
<li>a constant defined in a class are only accessible in that class</li>
<li>classes can&#8217;t inherit from modules</li>
</ul>


<figure class='code'><figcaption><span>Namespacing with ::</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dog</span><span class="o">::</span><span class="no">Colors</span>
</span><span class='line'><span class="c1">#go into the name class and get me colors</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>An instance variable is totally dependent on which object you are referring to. Every time you assign an instance variable you are teaching properties to the object.

<ul>
<li>It is not the responsibility of each dog (snoopy, pluto, etc.) to know anything about any other dog.</li>
<li>It is the classes responsibility to know about the class, but not about each individual dog.</li>
</ul>
</li>
</ul>


<p><strong>classes are</strong> object, logic and data</p>

<p>method overriding- changing what a method does</p>

<h3>Referential integrity</h3>

<p>Foreign key relationships are described as parent/child relationships (customer being the parent, and customer_sales the child), and the record is said to be orphaned when its parent is no longer in existence.</p>

<p>Referential integrity can be compromised in three situations: when creating a new record, deleting a record or updating a record.</p>

<p>You can delete a record from customer and at the same time delete the record from the customer_sales table, using only one delete statement. This is called a cascading delete, where all associated records are deleted, &#8216;cascading&#8217; through the tables according to the foreign key relationships.</p>

<p>The standard options when deleting a foreign key are listed below:</p>

<ul>
<li>ON DELETE CASCADE</li>
<li>ON DELETE SET NULL</li>
<li>ON DELETE RESTRICT</li>
<li>ON DELETE NO ACTION</li>
<li>ON DELETE SET DEFAULT</li>
</ul>


<h3>Fun</h3>

<p><a href="http://en.wikipedia.org/wiki/Code_golf">Code golf</a> is a type of recreational computer programming competition in which participants strive to achieve the shortest possible code that implements a certain algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack and Sinatra]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/15/rack-and-sinatra/"/>
    <updated>2012-10-15T13:11:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/15/rack-and-sinatra</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/blacktm">Tom Black</a></p>

<h3>Programmer of the day</h3>

<p>John Carmack- creator of quake, doom</p>

<blockquote><p>Programming is not a zero-sum game. Teaching something to a fellow programmer doesn&#8217;t take it away from you. I&#8217;m happy to share what I can, because I&#8217;m in it for the love of programming.</p></blockquote>

<p><em>Think about solutions not syntax</em></p>

<p>Rack</p>

<blockquote><p>A modular web server interface</p></blockquote>

<p>Rack App</p>

<blockquote><p>a ruby object that responses to a call method, taking a single hash parameter and returning an array which contains the response status code, response headers</p></blockquote>

<p>Middleware</p>

<blockquote><p>stuff stuck in the middle of a process</p></blockquote>

<p>rack sits in the middle of your app and webserver</p>

<h3>Sinatra</h3>

<blockquote><p>is a dsl for quickly creating web applications in Ruby with minimal effort.</p></blockquote>

<p>Is just a facade
webserver -> middleware -> sinatra -> your app</p>

<p><em>Sinatra is closer to rack&#8217;s older brother than rails is to sinatra.</em></p>

<p>Rails is a full-stack web application framework.</p>

<p><a href="http://www.blacktm.com/docs/talks/building_web_apps_with_rack_and_sinatra">Project page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day8]]></title>
    <link href="http://ajonas.herokuapp.com/blog/2012/10/15/fis-day8/"/>
    <updated>2012-10-15T09:26:00-04:00</updated>
    <id>http://ajonas.herokuapp.com/blog/2012/10/15/fis-day8</id>
    <content type="html"><![CDATA[<p>Domain Models
TDD</p>

<p><a href="http://www.evolutionoftheweb.com/">Evolution of the web</a></p>

<p><a href="http://frozen-citadel-3574.herokuapp.com/blog/2012/10/09/string-concatenation-the-right-way-the-fastest-way/">String Concatenation the Right Way; the Fast and Furious Way</a></p>

<figure class='code'><figcaption><span>.upto method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">100</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">fizzbuzz</span><span class="p">(</span><span class="n">i</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Building a prime method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assert</span><span class="p">(</span><span class="n">expectation</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;true&quot;</span> <span class="k">if</span> <span class="n">expectation</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Integer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">self</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>          <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="nb">self</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">#=&gt; number is not prime</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="mi">1</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="mi">2</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="mi">3</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">assert</span> <span class="o">!</span><span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="n">prime?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>SELF is always the receiver the method called on</strong></p>

<figure class='code'><figcaption><span>Dot Notation &#8211; calling on the right receiver</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="n">inspect</span> <span class="c1">#will break because &#39;inspect&#39; is being called on 4, not the range.</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">inspect</span> <span class="n">is</span> <span class="n">the</span> <span class="n">proper</span> <span class="n">syntax</span>
</span></code></pre></td></tr></table></div></figure>


<p>each just returns the original array</p>

<figure class='code'><figcaption><span>inject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="c1">#=&gt; {:1=&gt;1, :2=&gt;4, :3=&gt;9}</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">squares</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">squares</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">i</span><span class="o">*</span><span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">squares</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Collect / Map</h3>

<p>each just returns the <strong>original array</strong>
We want to be expression oriented.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">squares</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># this is NOT expression oriented</span>
</span><span class='line'><span class="n">squares</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="p">;</span> <span class="n">i</span><span class="p">}</span> <span class="c1">#i is a newline character #=&gt; [1,2,3]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>If you are chaining onto the return value, even if it is on one line.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">detect</span> <span class="p">(</span><span class="n">will</span> <span class="k">return</span> <span class="n">the</span> <span class="n">first</span> <span class="n">value</span> <span class="k">for</span> <span class="n">which</span> <span class="n">the</span> <span class="n">block</span> <span class="n">is</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>.select will return all, .detect will return the first.
.reject returns all the values for which the block is false (the opposite of select)</p>

<p>.select will return an empty array if no values are found, but .detect will return nil since it will only return one value&#8230;</p>

<p>.all? is sort of like a case statement except you get to use your own comparison</p>

<p><a href="http://foragoodstrftime.com/">string for time</a></p>
]]></content>
  </entry>
  
</feed>

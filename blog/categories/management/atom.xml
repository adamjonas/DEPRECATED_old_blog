<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: management | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/management/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-04-25T15:54:45-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Technically Inexperienced Manager]]></title>
    <link href="http://adamjonas.com/blog/a-technically-inexperienced-manager/"/>
    <updated>2017-04-25T19:47:00-04:00</updated>
    <id>http://adamjonas.com/blog/a-technically-inexperienced-manager</id>
    <content type="html"><![CDATA[<p>I've thought deeply about how my technical inexperience impacts my abilities to manage a technical team. I think it's a valid concern. I wrote about my thoughts on <a href="http://adamjonas.com/blog/my-take-on-maker-versus-manager/">maker vs manager</a> already, but this is a different beast. I haven't been managing technical teams all that long and yet I have a deep rooted belief that I can be effective as an engineering manager in spite of my background.</p>

<p>I have been building teams and managing people for the bulk of my professional career. In the latter half of my twenties I ran a baseball academy in Dominican Republic. We had 30+ teenage athletes, 15 staff, two fields, dormitories, and kitchen. It was a big operation for a kid who spoken broken Spanish and never played the sport professionally. To compensate, I was a tyrant. I made all the calls and I shouldered the whole load. I constantly felt no one was doing enough. I felt like I was the only one who made sure the kids got what they needed. The staff hated me. I didn't care. I controlled the daily schedule and the food deliveries. I checked that the grass was cut and the players weren't sneaking out past curfew. I was scrappy and I was a hard-ass. In retrospect, I'm sorry my staff had to pay the the price for my education.  Those years burned me out. I was lonely. I was stressed. I was a single point of failure. I was a terrible version of myself and I knew I'd never do it that way again.</p>

<p>Part of my growth as a person has been to get past my own insecurities. I learned to be comfortable not knowing the answer. Once I started managing a tech team, it took me a while to understand that really good devs often <strong>don't</strong> want any people management responsibilties and so I strive to be their sh!t umbrella. I work to isolate them from the politics and meetings so that they can focus on what they do best -- make magic. I would no doubt be more valuable if I had more reps, but my focus has been to strive to understand how the systems fit together and ask the right questions rather than lord over the implementation.</p>

<p>I can't fake my background. I learned to code late. It is a constraint I can't change. While I can work to refine my instincts and up my skills, I'm at peace with the fact I will never be the CTO. At least not the traditional kind. As I age and better understand myself, I've learned I am more effective when learning from my reports rather than handing down instructions. Even though it doesn't feel like it on the subway, <a href="http://www.medicaldaily.com/human-brain-hardwired-acts-kindness-vagus-nerve-activated-during-empathy-313020">humans are hardwired for kindness</a>. People energize me and I find satisfaction in helping a group discover cohesion. There will always be more to learn. The tech changes and so do the people. Businesses evolve demanding different kinds of leaders. But when we put people first, I've found the other pieces fall into place because trust and rapport create forgiveness and understanding. Or at least that's what my experience has taught me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Aristole]]></title>
    <link href="http://adamjonas.com/blog/project-aristole/"/>
    <updated>2017-03-27T11:49:00-04:00</updated>
    <id>http://adamjonas.com/blog/project-aristole</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html?_r=0">Quest to build the perfect team</a></li>
</ul>


<h2>Reading Notes</h2>

<ul>
<li>decentralized control</li>
<li>manager surveys

<ul>
<li>different mediums to collect feedback</li>
</ul>
</li>
<li>no exact patterns</li>
<li>rapport building -> chit chat, care about others as people as much
as co-workers

<ul>
<li>social sensitivity

<ul>
<li>reading the <a href="http://socialintelligence.labinthewild.org/mite/">Reading the Mind in the Eyes test</a></li>
</ul>
</li>
<li>trust</li>
</ul>
</li>
<li>groups norms are stronger than the individual, even if the
individual is strong, driven and accomplished</li>
<li>?what is data of a strong group?</li>
<li>following up on hurtful interactions (saying the things that go
unsaid)</li>
<li>Manager:

<ul>
<li>humility, my team is smarter than me -> vulnerability</li>
<li>fulfillment of creating a great team</li>
<li>setting communication norms</li>
<li>empathy norms and quick follow up</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working to Make Myself Obsolete]]></title>
    <link href="http://adamjonas.com/blog/working-to-make-myself-obsolete/"/>
    <updated>2016-11-26T12:23:00-05:00</updated>
    <id>http://adamjonas.com/blog/working-to-make-myself-obsolete</id>
    <content type="html"><![CDATA[<p>When I told my mother, an executive of 30 years mostly spent at <a href="http://www.crabtree-evelyn.com/">Crabtree and Evelyn</a>, about my goal to make myself obsolete she flipped.</p>

<p>"You are working yourself out of your job," she warned. "You need to be doing the opposite."</p>

<p>My mom fought through sexism for decades to maintain her influential role at the top of the hierarchy. My mother is a scrapper and she clearly had to defend her territory. From her advice on management issues however, it seems pretty clear to me she probably never got ahead of the tsunami of work that consumes managers’ everyday lives. I mostly observe managers fire fighting and doing implementation. This is a trap. We all want to feel important, but if managers are the single point of failure, things will fall apart.</p>

<p>I’ve mused about my take on <a href="/blog/my-take-on-maker-versus-manager/">maker versus manager</a>, it can be hard to let go, but those that never let go of the hybrid role are doomed. The manager may not be, but the team is. We owe it to our reports to make sure we have the time to properly manage them. It feeds our egos to have a full calendar and lots of “important” decisions to make, but if that’s all we do then we will eventually drown in our own self-importance rather than develop the people on our team to help shoulder the load. Scale will break us.</p>

<p>So thanks mom for the advice, but I still strive to make myself obsolete, so the world will continue to spin without me. So I can go on vacation without stressing. So I can dedicate a good chunk of my week to 1 on 1s and so my lieutenants feel qualified and empowered to make the calls shape our team and product. I may be working myself out of a job, but at least I feel like I’m going to do this one right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Technology and Developer Happiness]]></title>
    <link href="http://adamjonas.com/blog/new-technology-and-developer-happiness/"/>
    <updated>2016-11-15T12:24:00-05:00</updated>
    <id>http://adamjonas.com/blog/new-technology-and-developer-happiness</id>
    <content type="html"><![CDATA[<p>What is the price worth paying to introduce a new technology into the stack? For our heavily junior team of 13 the price feels high. Our JS weapon of choice has been backbone and marionette. This toolset wasn’t determined by me. It was molded and implemented by a talented dev who might be a little short on leadership experience but has talent and intuition in spades. We’ve made some mistakes along the way, but the architectural choices he has made have served us well. Still about 8 months since its we push our first major feature set with marionette, the entire team has yet to be completely onboarded. We may be getting to the size where we can split our squad into front-end and back-end specialists, but to date that has never been discussed as a group. The fact that we all haven’t got there is a problem. It means that some of us aren’t capable to work on parts of the stack, which affects feature assignments and pairing.</p>

<p>This same dev is now suggesting that we introduce React to one aspect of the stack because of its rising popularity in the community. Our team spends a lot of time focusing on happiness at an individual level with 1 on 1s and <a href="/blog/quarterlies/">quarterlies</a>, but my priority isn’t individual happiness but rather team morale. At the moment, team morale is at an all-time high. Will introducing a new barrier to entry positively affect team morale because of its shiney? Will allowing the two JS leads on the team play with a new toy positively affect team morale? They both claimed in their last quarterly that their work brought them high levels of meaning and purpose and they found it challenging enough.</p>

<p>It is a tough call. I don’t have enough knowledge to know if this is truly a better tool or something new to learn for the sake of something new. How will we go about leveling up newcomers on two JS systems?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goal Setting for Devs]]></title>
    <link href="http://adamjonas.com/blog/goal-setting-for-devs/"/>
    <updated>2016-10-11T10:05:00-04:00</updated>
    <id>http://adamjonas.com/blog/goal-setting-for-devs</id>
    <content type="html"><![CDATA[<p>I heard you, goals are important. I get it. I've watched the Ted talks and read the zillionth article on the importance of goals. I understand the psychology and the physiology. I’ve got a dirty secret though. I haven’t been able to set goals for developers. We’ve tried KPIs and they don’t seem to filter down to the individual contributor level. When I ran our apprenticeship program two years ago I tried weekly goals, bi-weekly goals, monthly goals and quarterly goals. The problem was, the constants, the areas the goals could be clearly defined were mostly areas of personal development -- writing blog posts, learning keyboard shortcuts, giving a lunch and learn, etc. I had a much harder time defining goals for them to improve in their core job function, namely contributing well built features and pushing good code.</p>

<p>Recently we took a shot at changing our criteria for hiring and job responsibilities to being value based rather than bring task or milestone based. This rubric broke down our company values into behaviors and defined the expectations for each level within engineering. The resulting document sat well with the team and I think we are gettng closer, but I still can’t help but feel unfortable about the subjectivity of how to define a good productive dev. What devs do is complicated, which makes promotions and evaluation complicated. I don’t care whether you wrote a blog post this week if you pushed a great feature. I do care that you helped someone else push their feature or jumped in on a tough bug when everyone pretended they didn't see it. But how do I formulate concrete actionable goals around that? Anything I come up with feels so arbitrary.</p>

<p>When we tried KPIs for the engineering team it made sense to have goals around the product. But for individual contributors who didn’t have a choice about what feature they build or how the product evolves from a high level, I could connect them to the department goal in a meta way, but not on an individual basis. How could they be held responsible for the adoption success a feature set, for example, that they didn’t have much agency in designing or implementing?</p>

<p>The best I can do for goal setting is to pull out actionable points from our <a href="/blog/quarterlies/">longer-arching conversations</a> and hold them accountable on the things that matter to them both. It feels like there has to be something better, but I haven't been smart enough to figure it out.</p>
]]></content>
  </entry>
  
</feed>
